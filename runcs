<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="RunCTG_ECI.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1"/>
    </startup>
    <userSettings>
        <RunCTG_ECI.Properties.Settings>
            <setting name="CTGPATH" serializeAs="String">
                <value>c:\</value>
            </setting>
            <setting name="SAVE2DIR" serializeAs="String">
                <value>c:\</value>
            </setting>
        </RunCTG_ECI.Properties.Settings>
    </userSettings>
  <system.diagnostics>
    <trace autoflush="true"/>
    <sources>
      <source name="System.Net" maxdatasize="1024">
        <listeners>
          <add name="TraceFile"/>
        </listeners>
      </source>
      <source name="System.Net.Sockets" maxdatasize="1024">
        <listeners>
          <add name="TraceFile"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add name="TraceFile" type="System.Diagnostics.TextWriterTraceListener"
        initializeData="trace.log"/>
    </sharedListeners>
    <switches>
      <add name="System.Net" value="Verbose" />
      <add name="System.Net.Sockets" value="Verbose" />
    </switches>
  </system.diagnostics>
</configuration>
?//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

namespace RunCTG_ECI
{
    public class cvt_x_A_E
    {
        public string X_str = "";
        public string A_str = "";
        public string E_str = "";
    }
}
?using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
//using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{

    public partial class DisplayResults : Form
    {
        public static int mx_sub_grp_lng = 4; // 4 disp chars  dumped per sub grouping (8 displayable chars)
        public static int mx_sub_grp_lngX = mx_sub_grp_lng * 2; // 8 disp  hex chars  dumped per sub grouping (8 displayable chars)
        public static int grps_per_ln = 4;    // number of mx_sub_grp_lng per display line
        public static int pg_ln_unit_l = mx_sub_grp_lng * grps_per_ln; // groups of 16 display bytes per line
        public static int pg_ln_unit_lX = mx_sub_grp_lngX * grps_per_ln; // groups of 32 hex display bytes per line
        public static int pg_l = 1024; // num of data bytes per display page 
        public static string nl = Environment.NewLine;

        /*
         *  each display line will format to be dependent on above
         *  where we format
         *  oooooset | xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx | ssssssssssssssss |
        */

        public src_hdr hld_hdr = new src_hdr();
        public src_data hld_data = new src_data();
       // public int cur_pg = 0;
        public int cur_offset = 0;
        public int mx_pg = 0;
        public int modulo_pg = 0;

        int real_sel_offset = 0;
        public int real_sel_pg =  0;
        int sel_pg = 1;
        public char data_encode = 'e';   // use this to switch between display versions
        public char fmt_data_encode = 'e';   // use this for interpretation of req/resp src_data
        public string data_req_resp = "Request";  // request, response
        int use_pg_l = pg_l;


        public char c_n_N = 'c';   // c CA, n bit CN, N Char CN

        // accumulate structure (pg_data) holding data bit_converted by offset
        public Dictionary<int, pg_data> pgs_dict = new Dictionary<int, pg_data>();

        // accumulate formatted displayed pages for _A ascii and _E ebcdic by offset 
        public Dictionary<int, string> pgs_A = new Dictionary<int, string>();
        public Dictionary<int, string> pgs_E = new Dictionary<int, string>();


        public DisplayResults(src_hdr req_hdr, src_data disp_data)
        {
            InitializeComponent();
            hld_hdr = req_hdr;
            hld_data = disp_data;
            switch (hld_data.src_fmt_data_encode) {
                case 'a':
                case 'A': {
                data_encode = fmt_data_encode = 'a';
                rbtn_A.Checked = true;
                break;
                }
                case 'x':
                case 'X': {
                data_encode = fmt_data_encode = 'x';
                rbtn_A.Checked = true;
                    break;
                }
                case 'e':
                case 'E': {
                data_encode = fmt_data_encode = 'e';
                rbtn_E.Checked = true;
                    break;
                }
            }
            if (hld_data.src_fmt_data_encode == 'a' | hld_data.src_fmt_data_encode == 'e')
            {
                data_req_resp = "Request";
            }
            else
            {
                data_req_resp = "Response";
            }

            //            lbl_regnm.Text = string.Concat("Processing CA/CnC for region:",hld_hdr.src_hdr_rgn);
            if (hld_hdr.src_hdr_ch_nm == "")
            {
                lbl_ca_chnm.Text = "DFHCOMMAREA";
                grp_ca.Text = "CA ASCII or EBCDIC";
                c_n_N = 'c';
                lbl_ca_bit_char.Text = "CommArea";
                lbl_pg_offset.Text = "Offset:0";
            }
            else
            {
                lbl_ca_chnm.Text = hld_hdr.src_hdr_ch_nm;
                if (hld_data.src_type == 'n')
                {
                    grp_ca.Text = "CN:BIT ASCII or EBCDIC";
                    c_n_N = 'n';
                    lbl_ca_bit_char.Text = "Container:Bit";
                }
                else
                {
                    grp_ca.Text = "CN:CHAR ASCII or EBCDIC";
                    c_n_N = 'N'; 
                    lbl_ca_bit_char.Text = "Container:Char";
                }
            }
            lbl_ca_cnnm.Text = hld_data.src_name;
            lbl_data_l.Text = string.Concat("DataLength:",hld_data.src_l.ToString());
            lbl_cur_pg.Text = "1";  //cur_pg+1
            mx_pg = (hld_data.src_l / pg_l);
            modulo_pg = (hld_data.src_l % pg_l);
            if (modulo_pg > 0) mx_pg++;
            lbl_mx_pg.Text = mx_pg.ToString();
            spn_pgs.Maximum = mx_pg;
            lbl_pg_offset.Text = "Offset:0";
            lbl_pgnm.Text = string.Concat("Program:",hld_hdr.src_hdr_pgm_nm);
            lbl_tranid.Text = string.Concat(" Tranid:",hld_hdr.src_hdr_tranid);
            lbl_ST.Text = string.Concat("Start:",hld_data.src_startTM);
            lbl_SP.Text = string.Concat("Stop::",hld_data.src_endTM);
            c_n_N = hld_data.src_type;
        }

        private void DisplayResults_Load(object sender, EventArgs e)
        {
            lbl_regnm.Text = string.Concat(data_req_resp, " CA/CnC for region:", hld_hdr.src_hdr_rgn);
            real_sel_pg = real_sel_offset = 0;
            cur_offset = 0;
            sel_pg = 1;
            real_sel_pg = sel_pg - 1;
            disp_pg(data_encode, real_sel_pg);
            }

        private void btn_go2pg_Click(object sender, EventArgs e)
        {
            real_sel_pg = decimal.ToInt32(spn_pgs.Value) - 1;
            disp_pg(data_encode, real_sel_pg);
        }

        private void disp_pg(char data_encode, int d_real_sel_pg)
        {
            real_sel_offset = d_real_sel_pg * pg_l;
            int fmt_rc = 0;

            if (!pgs_A.ContainsKey(real_sel_offset))
            {

                byte[] cur_b_data_ary = new byte[1] { 20 };
                pg_data disp_pg_data = new pg_data();

                if (!pgs_dict.ContainsKey(real_sel_offset))
                {
                    if (sel_pg == mx_pg)
                    {
                        if (modulo_pg > 0)
                        {
                            use_pg_l = modulo_pg;
                        }
                        else
                        {
                            use_pg_l = pg_l;
                        }
                    }
                    else
                    {
                        use_pg_l = pg_l;
                    }

                    pg_data cur_pg = new pg_data();
//                    int tmpl = hld_data.b_src_ary.Length;
                    int tmpl = hld_data.src_l;
                    tmpl = tmpl - real_sel_offset;
                    if (tmpl < use_pg_l) use_pg_l = tmpl;
                    Array.Resize(ref cur_b_data_ary, use_pg_l);
                    Array.Copy(hld_data.b_src_ary, real_sel_offset, cur_b_data_ary, 0, use_pg_l);

                    Console.WriteLine("cur_b_data_ary.l:{0}", cur_b_data_ary.Length);
                    Console.WriteLine(Encoding.UTF8.GetString(cur_b_data_ary, 0, cur_b_data_ary.Length));

                    fmt_rc = fmtdata(fmt_data_encode, real_sel_offset, cur_b_data_ary, (pg_data)cur_pg);

                    pgs_dict.Add(real_sel_offset, cur_pg);
                }
                disp_pg_data = pgs_dict[real_sel_offset];
                string e_str = disp_pg_data.e_str;
                string a_str = disp_pg_data.a_str;
                string s_str = disp_pg_data.s_str;
                int e_str_l = e_str.Length;
                int s_str_l = s_str.Length;
                int a_str_l = e_str.Length;

                if (e_str_l != a_str_l)
                {
                    Console.WriteLine("e_str_l:{0} is not equal to a_str_l{1}. Use shorter.", e_str_l, a_str_l);
                    if (e_str_l > a_str_l) e_str_l = a_str_l;
                }
                int tmp = (e_str_l / 2);
                if (tmp != s_str_l)
                {
                    Console.WriteLine("e_str_l({0}) / 2:{3} is not equal to s_str_l{1}. Use shorter.", e_str_l, a_str_l, tmp);
                    if (tmp < s_str_l) s_str_l = tmp;
                }

                /*
                    *  each display line will format to be dependent on above
                    *  where we format
                    *  oooooset | xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx | ssssssssssssssss |
  
                        public static int mx_sub_grp_lng = 8; // four hex chars dumped per sub grouping (8 displayable chars)
                        public static int grps_per_ln = 4;    // number of mx_sub_grp_lng per display line
                        public static int pg_ln_unit_l = mx_sub_grp_lng * grps_per_ln; // groups of 16 bytes per line
                        public static int pg_l = 1024; // num of data bytes per display page 

                */

                int mx_grp_lng = pg_ln_unit_l;    // four sub groups per displayable line (32 displayable c

                StringBuilder DispStrA = new StringBuilder(pg_l * 2 + (pg_ln_unit_l + 17));
                StringBuilder DispStrE = new StringBuilder(mx_grp_lng * 2 + (pg_ln_unit_l + 17));

                if (s_str_l < pg_l)
                {
                    use_pg_l = s_str_l;
                }
                else
                {
                    use_pg_l = pg_l;
                }

                // determine if the data fits neatly on full lines
                // if use_ln_modulo not zero, then we will have leftofver data to deal with
                int use_ln_modulo = use_pg_l % pg_ln_unit_l;
                // get the amount of data that will fit neatly
                int tmp_lns = use_pg_l / pg_ln_unit_l;
                use_pg_l = tmp_lns * pg_ln_unit_l;
/*
 * we need to bump thru hex string by 32
 *  but that is only a rel bump of 16
 *  so we keep two different offset counters
 *  rel_ln_offset is the char offset counter bumped by 16
 *  rel_ln_offsetX is the hex offset counter bumped by 32
 */  
                int rel_ln_offset = 0;  // keep track of real offset in data
                int rel_ln_offsetX = 0;  // keep track of hex offset in data
                int rel_ln_mx = use_pg_l;  // end of data

                DispStrA.Clear();
                DispStrE.Clear();
                const string formatter = "{0:0000} |";
                while (rel_ln_offset < rel_ln_mx)
                {
                    DispStrA.Append(String.Format(formatter, rel_ln_offset));
                    DispStrE.Append(String.Format(formatter, rel_ln_offset));
                    for (int o = 0; o < pg_ln_unit_lX; o = o + mx_sub_grp_lngX)   // bump by 8
                    {
                        DispStrA.Append(a_str.Substring(rel_ln_offsetX, mx_sub_grp_lngX)).Append(" ");
                        DispStrE.Append(e_str.Substring(rel_ln_offsetX, mx_sub_grp_lngX)).Append(" ");
                        rel_ln_offsetX = rel_ln_offsetX + mx_sub_grp_lngX;  // bump by 32

                    }
                    int t = DispStrA.Length - 1;
                    DispStrA.Remove(t, 1).Append("|").Append(s_str.Substring(rel_ln_offset, pg_ln_unit_l)).Append("|").Append(nl);
                    DispStrE.Remove(t, 1).Append("|").Append(s_str.Substring(rel_ln_offset, pg_ln_unit_l)).Append("|").Append(nl);
                rel_ln_offset = rel_ln_offset + pg_ln_unit_l;   // bump by 16
                }
                if (use_ln_modulo > 0)
                {
                    DispStrA.Append(String.Format(formatter, rel_ln_offset));
                    DispStrE.Append(String.Format(formatter, rel_ln_offset));
                    int o = 0, p = 0;
                    int h_rel_ln_offset = rel_ln_offset;
                    int h_rel_ln_offsetX = rel_ln_offsetX;
                    while(o < pg_ln_unit_l)
                    {
                        string a = "", e = "";
                        if (o >= use_ln_modulo)
                        {
                            e = a = "  ";
                        }
                        else
                        {
                            a = a_str.Substring(rel_ln_offsetX, 2);
                            e = e_str.Substring(rel_ln_offsetX, 2);
                        }
                        DispStrA.Append(a);
                        DispStrE.Append(e);
                        rel_ln_offset = rel_ln_offsetX + 2;
                        p++;
                        if (p > 3)
                        {
                            DispStrA.Append(" ");
                            DispStrE.Append(" ");
                            p = 0;
                        }
                        o++;
                    }
                    int t = DispStrA.Length - 1;
                    DispStrA.Remove(t, 1).Append(string.Format("|{0,-16}|",s_str.Substring(h_rel_ln_offset)));
                    DispStrE.Remove(t, 1).Append(string.Format("|{0,-16}|",s_str.Substring(h_rel_ln_offset)));
                    }

                pgs_A.Add(real_sel_offset,DispStrA.ToString()); 
                pgs_E.Add(real_sel_offset,DispStrE.ToString()); 

                }   // end of the (!pgs_dict.ContainsKey(real_sel_offset))
                    // which means the pages should be available for immediate display

            
            string txt_disp = "";
            if (data_encode == 'e')
            {
                txt_disp = pgs_E[real_sel_offset];
            }
            else
            {
                txt_disp = pgs_A[real_sel_offset];
            }
            lbl_pg_offset.Text = string.Format("Offset:{0:000000}",real_sel_offset.ToString());
            tb_disp_data.Text = txt_disp;
            tb_disp_data.Update();
        }


public static int fmtdata(char data_encode, int real_sel_offset, byte[] b_frm_ary, pg_data new_pg) 
   {
        Encoding utf8 = Encoding.UTF8;
        Encoding ascii = Encoding.ASCII;
        Encoding unicode = Encoding.Unicode;
        Encoding ibm037 = Encoding.GetEncoding(037);

   
	int b_ary_l = b_frm_ary.Length;
	if (data_encode == 'u') {
	  b_ary_l = b_ary_l / 2;
	  }

    new_pg.pg_offset = real_sel_offset;
	
	byte[] unicodeBytes = new byte[b_ary_l *2];
Console.WriteLine("unicodeBytes.l:{0}", unicodeBytes.Length);

    byte[] utf8Bytes = new byte[b_ary_l];
Console.WriteLine("unicodeBytes.l:{0}", unicodeBytes.Length);
	byte[] asciiBytes = new byte[b_ary_l];
Console.WriteLine("asciiBytes.l:{0}", asciiBytes.Length);
	byte[] ibm037Bytes = new byte[b_ary_l];
Console.WriteLine("ibm037Bytes.l:{0}", ibm037Bytes.Length);

	string myCA = "";
	
	switch (data_encode)
	{
	    case 's':
		{
		  myCA = System.Text.Encoding.Default.GetString(b_frm_ary);
		  System.Console.WriteLine("Encoding.Default\n{0}", myCA);

		  myCA = utf8.GetString(b_frm_ary, 0, b_frm_ary.Length);
		  System.Console.WriteLine("Encoding.UTF8\n{0}", myCA);

		  unicodeBytes = unicode.GetBytes(myCA);
          utf8Bytes = Encoding.Convert(unicode, utf8, unicodeBytes);
          asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);       
		  ibm037Bytes = Encoding.Convert(unicode, ibm037, unicodeBytes);

		  System.Console.WriteLine("fmt string message");
		  break;
		}
	    case 'e':
		{
		
          Array.Copy(b_frm_ary, ibm037Bytes, b_ary_l);
          asciiBytes = Encoding.Convert(ibm037, ascii, ibm037Bytes);
          utf8Bytes = Encoding.Convert(ibm037, utf8, ibm037Bytes);
          	  
		  myCA = Encoding.UTF8.GetString(asciiBytes);
		  unicodeBytes = unicode.GetBytes(myCA);


		  System.Console.WriteLine("fmt ebcdic message");
		  break;
		}
	    case 'a':
		{
          Array.Copy(b_frm_ary, asciiBytes, b_ary_l);
          ibm037Bytes = Encoding.Convert(ascii, ibm037, asciiBytes );
          utf8Bytes = Encoding.Convert(ascii, utf8, asciiBytes);
          	  
		  myCA = utf8.GetString(asciiBytes);
		  unicodeBytes = unicode.GetBytes(myCA);

		  System.Console.WriteLine("fmt ascii message");
		  break;
		}
        case 'x':
        {
            Array.Copy(b_frm_ary, utf8Bytes, b_ary_l);
            ibm037Bytes = Encoding.Convert(utf8, ibm037, utf8Bytes);
            asciiBytes = Encoding.Convert(utf8, ascii, utf8Bytes);

            myCA = utf8.GetString(asciiBytes);
            unicodeBytes = unicode.GetBytes(myCA);

            System.Console.WriteLine("fmt hex message");
            break;
        }
	    case 'u':
		{
            Array.Copy(b_frm_ary, unicodeBytes, b_ary_l);
          	ibm037Bytes = Encoding.Convert(unicode, ibm037, unicodeBytes );
          	asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes );
            utf8Bytes = Encoding.Convert(unicode, utf8, unicodeBytes);
          	  
		  myCA = utf8.GetString(asciiBytes);

		  System.Console.WriteLine("fmt unicode message");
		  break;
		}
	    default:
	    	{
		  System.Console.WriteLine("fmt unknown message, return error.");
		  return -1;
		    }
		
	    }		    

Console.WriteLine("Offsetg:{0}", new_pg.pg_offset);
//  string s = Regex.Replace(myCA, @"[^\u0020-\u007F]", ".");
//  myCA = sb_tmpCA.ToString();
    new_pg.s_str = Regex.Replace(myCA, @"[^\u0020-\u007F]", ".");
Console.WriteLine("String:{0}", new_pg.s_str);
	new_pg.a_str = BitConverter.ToString(asciiBytes).Replace("-", string.Empty);
Console.WriteLine("AString:{0}", new_pg.a_str);
	new_pg.e_str = BitConverter.ToString(ibm037Bytes).Replace("-", string.Empty);
Console.WriteLine("EString:{0}", new_pg.e_str);	
	return 0;

   }

private void radioButtons_CheckedChanged(object sender, EventArgs e)
    {

        if (rbtn_A.Checked)
        {
            data_encode = 'a';
        }
        else if (rbtn_E.Checked)
        {
            data_encode = 'e';
        }
        disp_pg(data_encode, real_sel_pg);
    }

    private void btn_nxt_data_Click(object sender, EventArgs e)
    {
        this.Close();
    }

    private void btn_fin_Click(object sender, EventArgs e)
    {
        this.Close();
    }

    private void btn_can_Click(object sender, EventArgs e)
    {
        this.Close();
    }

    private void btn_msg_dgst_Click(object sender, EventArgs e)
    {
        Msg_Digest get_sha = new Msg_Digest(hld_data, hld_hdr.src_hdr_rgn , hld_hdr.src_hdr_ch_nm);
        get_sha.ShowDialog();
    }

  }
}
?namespace RunCTG_ECI
{
    partial class DisplayResults
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_regnm = new System.Windows.Forms.Label();
            this.btn_go2pg = new System.Windows.Forms.Button();
            this.btn_fin = new System.Windows.Forms.Button();
            this.spn_pgs = new System.Windows.Forms.NumericUpDown();
            this.lbl_sel_pg = new System.Windows.Forms.Label();
            this.btn_save_data = new System.Windows.Forms.Button();
            this.tb_disp_data = new System.Windows.Forms.TextBox();
            this.lbl_ca_chnm = new System.Windows.Forms.Label();
            this.lbl_cur_pg = new System.Windows.Forms.Label();
            this.llb_of = new System.Windows.Forms.Label();
            this.lbl_mx_pg = new System.Windows.Forms.Label();
            this.btn_apnd_data = new System.Windows.Forms.Button();
            this.lbl_data_l = new System.Windows.Forms.Label();
            this.btn_can = new System.Windows.Forms.Button();
            this.lbl_ca_cnnm = new System.Windows.Forms.Label();
            this.lbl_pgnm = new System.Windows.Forms.Label();
            this.lbl_tranid = new System.Windows.Forms.Label();
            this.lbl_ST = new System.Windows.Forms.Label();
            this.lbl_SP = new System.Windows.Forms.Label();
            this.grp_ca = new System.Windows.Forms.GroupBox();
            this.rbtn_E = new System.Windows.Forms.RadioButton();
            this.rbtn_A = new System.Windows.Forms.RadioButton();
            this.btn_nxt_data = new System.Windows.Forms.Button();
            this.lbl_pg_offset = new System.Windows.Forms.Label();
            this.lbl_ca_bit_char = new System.Windows.Forms.Label();
            this.btn_msg_dgst = new System.Windows.Forms.Button();
            ((System.ComponentModel.ISupportInitialize)(this.spn_pgs)).BeginInit();
            this.grp_ca.SuspendLayout();
            this.SuspendLayout();
            // 
            // lbl_regnm
            // 
            this.lbl_regnm.AutoSize = true;
            this.lbl_regnm.Location = new System.Drawing.Point(13, 9);
            this.lbl_regnm.Name = "lbl_regnm";
            this.lbl_regnm.Size = new System.Drawing.Size(151, 13);
            this.lbl_regnm.TabIndex = 0;
            this.lbl_regnm.Text = "Processing CA/CnC for region:";
            // 
            // btn_go2pg
            // 
            this.btn_go2pg.Location = new System.Drawing.Point(286, 238);
            this.btn_go2pg.Name = "btn_go2pg";
            this.btn_go2pg.Size = new System.Drawing.Size(75, 23);
            this.btn_go2pg.TabIndex = 1;
            this.btn_go2pg.Text = "GoToPage";
            this.btn_go2pg.UseVisualStyleBackColor = true;
            this.btn_go2pg.Click += new System.EventHandler(this.btn_go2pg_Click);
            // 
            // btn_fin
            // 
            this.btn_fin.DialogResult = System.Windows.Forms.DialogResult.No;
            this.btn_fin.Location = new System.Drawing.Point(486, 238);
            this.btn_fin.Name = "btn_fin";
            this.btn_fin.Size = new System.Drawing.Size(75, 23);
            this.btn_fin.TabIndex = 2;
            this.btn_fin.Text = "Finish Rgn";
            this.btn_fin.UseVisualStyleBackColor = true;
            this.btn_fin.Click += new System.EventHandler(this.btn_fin_Click);
            // 
            // spn_pgs
            // 
            this.spn_pgs.Location = new System.Drawing.Point(89, 243);
            this.spn_pgs.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.spn_pgs.Name = "spn_pgs";
            this.spn_pgs.Size = new System.Drawing.Size(78, 20);
            this.spn_pgs.TabIndex = 3;
            this.spn_pgs.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // lbl_sel_pg
            // 
            this.lbl_sel_pg.AutoSize = true;
            this.lbl_sel_pg.Location = new System.Drawing.Point(15, 245);
            this.lbl_sel_pg.Name = "lbl_sel_pg";
            this.lbl_sel_pg.Size = new System.Drawing.Size(65, 13);
            this.lbl_sel_pg.TabIndex = 4;
            this.lbl_sel_pg.Text = "Select Page";
            // 
            // btn_save_data
            // 
            this.btn_save_data.Location = new System.Drawing.Point(594, 9);
            this.btn_save_data.Name = "btn_save_data";
            this.btn_save_data.Size = new System.Drawing.Size(75, 23);
            this.btn_save_data.TabIndex = 5;
            this.btn_save_data.Text = "Save";
            this.btn_save_data.UseVisualStyleBackColor = true;
            // 
            // tb_disp_data
            // 
            this.tb_disp_data.Font = new System.Drawing.Font("Consolas", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_disp_data.Location = new System.Drawing.Point(16, 91);
            this.tb_disp_data.MaxLength = 4096;
            this.tb_disp_data.Multiline = true;
            this.tb_disp_data.Name = "tb_disp_data";
            this.tb_disp_data.ReadOnly = true;
            this.tb_disp_data.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_disp_data.Size = new System.Drawing.Size(613, 139);
            this.tb_disp_data.TabIndex = 6;
            this.tb_disp_data.Text = "---";
            this.tb_disp_data.WordWrap = false;
            // 
            // lbl_ca_chnm
            // 
            this.lbl_ca_chnm.AutoSize = true;
            this.lbl_ca_chnm.Location = new System.Drawing.Point(222, 9);
            this.lbl_ca_chnm.MaximumSize = new System.Drawing.Size(220, 0);
            this.lbl_ca_chnm.Name = "lbl_ca_chnm";
            this.lbl_ca_chnm.Size = new System.Drawing.Size(63, 13);
            this.lbl_ca_chnm.TabIndex = 7;
            this.lbl_ca_chnm.Text = "CA or Chnm";
            // 
            // lbl_cur_pg
            // 
            this.lbl_cur_pg.AutoSize = true;
            this.lbl_cur_pg.Location = new System.Drawing.Point(189, 243);
            this.lbl_cur_pg.Name = "lbl_cur_pg";
            this.lbl_cur_pg.Size = new System.Drawing.Size(13, 13);
            this.lbl_cur_pg.TabIndex = 8;
            this.lbl_cur_pg.Text = "0";
            // 
            // llb_of
            // 
            this.llb_of.AutoSize = true;
            this.llb_of.Location = new System.Drawing.Point(231, 243);
            this.llb_of.Name = "llb_of";
            this.llb_of.Size = new System.Drawing.Size(16, 13);
            this.llb_of.TabIndex = 9;
            this.llb_of.Text = "of";
            // 
            // lbl_mx_pg
            // 
            this.lbl_mx_pg.AutoSize = true;
            this.lbl_mx_pg.Location = new System.Drawing.Point(265, 243);
            this.lbl_mx_pg.Name = "lbl_mx_pg";
            this.lbl_mx_pg.Size = new System.Drawing.Size(13, 13);
            this.lbl_mx_pg.TabIndex = 10;
            this.lbl_mx_pg.Text = "0";
            // 
            // btn_apnd_data
            // 
            this.btn_apnd_data.Location = new System.Drawing.Point(594, 33);
            this.btn_apnd_data.Name = "btn_apnd_data";
            this.btn_apnd_data.Size = new System.Drawing.Size(75, 23);
            this.btn_apnd_data.TabIndex = 11;
            this.btn_apnd_data.Text = "Append";
            this.btn_apnd_data.UseVisualStyleBackColor = true;
            // 
            // lbl_data_l
            // 
            this.lbl_data_l.AutoSize = true;
            this.lbl_data_l.Location = new System.Drawing.Point(298, 65);
            this.lbl_data_l.Name = "lbl_data_l";
            this.lbl_data_l.Size = new System.Drawing.Size(63, 13);
            this.lbl_data_l.TabIndex = 12;
            this.lbl_data_l.Text = "DataLength";
            // 
            // btn_can
            // 
            this.btn_can.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_can.Location = new System.Drawing.Point(594, 238);
            this.btn_can.Name = "btn_can";
            this.btn_can.Size = new System.Drawing.Size(75, 23);
            this.btn_can.TabIndex = 13;
            this.btn_can.Text = "CancelRest";
            this.btn_can.UseVisualStyleBackColor = true;
            this.btn_can.Click += new System.EventHandler(this.btn_can_Click);
            // 
            // lbl_ca_cnnm
            // 
            this.lbl_ca_cnnm.AutoSize = true;
            this.lbl_ca_cnnm.Location = new System.Drawing.Point(222, 25);
            this.lbl_ca_cnnm.MaximumSize = new System.Drawing.Size(220, 0);
            this.lbl_ca_cnnm.Name = "lbl_ca_cnnm";
            this.lbl_ca_cnnm.Size = new System.Drawing.Size(63, 13);
            this.lbl_ca_cnnm.TabIndex = 14;
            this.lbl_ca_cnnm.Text = "CA or Cnnm";
            // 
            // lbl_pgnm
            // 
            this.lbl_pgnm.AutoSize = true;
            this.lbl_pgnm.Location = new System.Drawing.Point(14, 33);
            this.lbl_pgnm.Name = "lbl_pgnm";
            this.lbl_pgnm.Size = new System.Drawing.Size(46, 13);
            this.lbl_pgnm.TabIndex = 15;
            this.lbl_pgnm.Text = "Program";
            // 
            // lbl_tranid
            // 
            this.lbl_tranid.AutoSize = true;
            this.lbl_tranid.Location = new System.Drawing.Point(128, 33);
            this.lbl_tranid.Name = "lbl_tranid";
            this.lbl_tranid.Size = new System.Drawing.Size(37, 13);
            this.lbl_tranid.TabIndex = 16;
            this.lbl_tranid.Text = "Tranid";
            // 
            // lbl_ST
            // 
            this.lbl_ST.AutoSize = true;
            this.lbl_ST.Location = new System.Drawing.Point(14, 52);
            this.lbl_ST.Name = "lbl_ST";
            this.lbl_ST.Size = new System.Drawing.Size(29, 13);
            this.lbl_ST.TabIndex = 17;
            this.lbl_ST.Text = "Start";
            // 
            // lbl_SP
            // 
            this.lbl_SP.AutoSize = true;
            this.lbl_SP.Location = new System.Drawing.Point(14, 65);
            this.lbl_SP.Name = "lbl_SP";
            this.lbl_SP.Size = new System.Drawing.Size(29, 13);
            this.lbl_SP.TabIndex = 18;
            this.lbl_SP.Text = "Stop";
            // 
            // grp_ca
            // 
            this.grp_ca.Controls.Add(this.rbtn_E);
            this.grp_ca.Controls.Add(this.rbtn_A);
            this.grp_ca.Location = new System.Drawing.Point(443, 9);
            this.grp_ca.Name = "grp_ca";
            this.grp_ca.Size = new System.Drawing.Size(130, 56);
            this.grp_ca.TabIndex = 19;
            this.grp_ca.TabStop = false;
            this.grp_ca.Text = "CA ASCII or EBCDIC";
            // 
            // rbtn_E
            // 
            this.rbtn_E.AutoSize = true;
            this.rbtn_E.Location = new System.Drawing.Point(7, 32);
            this.rbtn_E.Name = "rbtn_E";
            this.rbtn_E.Size = new System.Drawing.Size(64, 17);
            this.rbtn_E.TabIndex = 1;
            this.rbtn_E.TabStop = true;
            this.rbtn_E.Text = "EBCDIC";
            this.rbtn_E.UseVisualStyleBackColor = true;
            this.rbtn_E.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // rbtn_A
            // 
            this.rbtn_A.AutoSize = true;
            this.rbtn_A.Cursor = System.Windows.Forms.Cursors.Default;
            this.rbtn_A.Location = new System.Drawing.Point(7, 14);
            this.rbtn_A.Name = "rbtn_A";
            this.rbtn_A.Size = new System.Drawing.Size(52, 17);
            this.rbtn_A.TabIndex = 0;
            this.rbtn_A.TabStop = true;
            this.rbtn_A.Text = "ASCII";
            this.rbtn_A.UseVisualStyleBackColor = true;
            this.rbtn_A.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // btn_nxt_data
            // 
            this.btn_nxt_data.DialogResult = System.Windows.Forms.DialogResult.Yes;
            this.btn_nxt_data.Location = new System.Drawing.Point(388, 238);
            this.btn_nxt_data.Name = "btn_nxt_data";
            this.btn_nxt_data.Size = new System.Drawing.Size(75, 23);
            this.btn_nxt_data.TabIndex = 20;
            this.btn_nxt_data.Text = "Next Data";
            this.btn_nxt_data.UseVisualStyleBackColor = true;
            this.btn_nxt_data.Click += new System.EventHandler(this.btn_nxt_data_Click);
            // 
            // lbl_pg_offset
            // 
            this.lbl_pg_offset.AutoSize = true;
            this.lbl_pg_offset.Location = new System.Drawing.Point(16, 230);
            this.lbl_pg_offset.Name = "lbl_pg_offset";
            this.lbl_pg_offset.Size = new System.Drawing.Size(61, 13);
            this.lbl_pg_offset.TabIndex = 21;
            this.lbl_pg_offset.Text = "Data Offset";
            // 
            // lbl_ca_bit_char
            // 
            this.lbl_ca_bit_char.AutoSize = true;
            this.lbl_ca_bit_char.Location = new System.Drawing.Point(222, 43);
            this.lbl_ca_bit_char.MaximumSize = new System.Drawing.Size(220, 0);
            this.lbl_ca_bit_char.Name = "lbl_ca_bit_char";
            this.lbl_ca_bit_char.Size = new System.Drawing.Size(92, 13);
            this.lbl_ca_bit_char.TabIndex = 22;
            this.lbl_ca_bit_char.Text = "CA, BIT, or CHAR";
            // 
            // btn_msg_dgst
            // 
            this.btn_msg_dgst.Location = new System.Drawing.Point(469, 65);
            this.btn_msg_dgst.Name = "btn_msg_dgst";
            this.btn_msg_dgst.Size = new System.Drawing.Size(75, 23);
            this.btn_msg_dgst.TabIndex = 23;
            this.btn_msg_dgst.Text = "MsgDgst";
            this.btn_msg_dgst.UseVisualStyleBackColor = true;
            this.btn_msg_dgst.Click += new System.EventHandler(this.btn_msg_dgst_Click);
            // 
            // DisplayResults
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(681, 273);
            this.Controls.Add(this.btn_msg_dgst);
            this.Controls.Add(this.lbl_ca_bit_char);
            this.Controls.Add(this.lbl_pg_offset);
            this.Controls.Add(this.btn_nxt_data);
            this.Controls.Add(this.grp_ca);
            this.Controls.Add(this.lbl_SP);
            this.Controls.Add(this.lbl_ST);
            this.Controls.Add(this.lbl_tranid);
            this.Controls.Add(this.lbl_pgnm);
            this.Controls.Add(this.lbl_ca_cnnm);
            this.Controls.Add(this.btn_can);
            this.Controls.Add(this.lbl_data_l);
            this.Controls.Add(this.btn_apnd_data);
            this.Controls.Add(this.lbl_mx_pg);
            this.Controls.Add(this.llb_of);
            this.Controls.Add(this.lbl_cur_pg);
            this.Controls.Add(this.lbl_ca_chnm);
            this.Controls.Add(this.tb_disp_data);
            this.Controls.Add(this.btn_save_data);
            this.Controls.Add(this.lbl_sel_pg);
            this.Controls.Add(this.spn_pgs);
            this.Controls.Add(this.btn_fin);
            this.Controls.Add(this.btn_go2pg);
            this.Controls.Add(this.lbl_regnm);
            this.Name = "DisplayResults";
            this.Text = "DisplayResults";
            this.Load += new System.EventHandler(this.DisplayResults_Load);
            ((System.ComponentModel.ISupportInitialize)(this.spn_pgs)).EndInit();
            this.grp_ca.ResumeLayout(false);
            this.grp_ca.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_regnm;
        private System.Windows.Forms.Button btn_go2pg;
        private System.Windows.Forms.Button btn_fin;
        private System.Windows.Forms.NumericUpDown spn_pgs;
        private System.Windows.Forms.Label lbl_sel_pg;
        private System.Windows.Forms.Button btn_save_data;
        private System.Windows.Forms.TextBox tb_disp_data;
        private System.Windows.Forms.Label lbl_ca_chnm;
        private System.Windows.Forms.Label lbl_cur_pg;
        private System.Windows.Forms.Label llb_of;
        private System.Windows.Forms.Label lbl_mx_pg;
        private System.Windows.Forms.Button btn_apnd_data;
        private System.Windows.Forms.Label lbl_data_l;
        private System.Windows.Forms.Button btn_can;
        private System.Windows.Forms.Label lbl_ca_cnnm;
        private System.Windows.Forms.Label lbl_pgnm;
        private System.Windows.Forms.Label lbl_tranid;
        private System.Windows.Forms.Label lbl_ST;
        private System.Windows.Forms.Label lbl_SP;
        private System.Windows.Forms.GroupBox grp_ca;
        private System.Windows.Forms.RadioButton rbtn_E;
        private System.Windows.Forms.RadioButton rbtn_A;
        private System.Windows.Forms.Button btn_nxt_data;
        private System.Windows.Forms.Label lbl_pg_offset;
        private System.Windows.Forms.Label lbl_ca_bit_char;
        private System.Windows.Forms.Button btn_msg_dgst;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.Net.Sockets;
using System.Security.Authentication;

using IBM.CTG;

namespace RunCTG_ECI
{
    class ExecECI
    {
        //Name of the CTG Region
        private string RegionName = "";

        //IPAdr of the CTG Region
        private string RegionIP = "";
        //Socket of the CTG Region
        private int rgnportno = 0;
        //Socket (string) of the CTG Region
        private string RegionPORT = "";
        //SSL "Y" or "N"
        private string Region_usessl = "";

        //Name of the CICS program to execute
        // private const string ProgramName = "PONG";    // commarea only
        private string ProgramName = "PONGCNC2";

        //Name of the CICS Transid to execute
        private string MyTransid = "UXXX";

        //Name of the CICS Transid that mirror is to execute
        private string MyMirrorTransId = "UXXX";

        // Set program to use CA or cNc
        private string use_ca_or_cNc = "CA";
        //private string use_ca_or_cNc = "cNc";

        //Name of Channel to pass to EC03 program
        private string CHANNEL_NAME = "PONGCNCTEST";   // max 16

        //Name of Container to pass to EC03 program
        private string CONTAINER_NAME = "PONGCNCCONTNR";   //max 16

        //The size of the COMMAREA to send to the program - This can be 0 - 32400
        private int CAL = 4080;

        //Repeat Non/Xtended transaction 0-98 times, waiting 0-10000 ms between calls
        //private  int  rep_txn = 0;	// 0 means NO repeats Itotal:1 executon)
        private int rep_txn = 0;
        private int wt_txn = 0;
        //Maximum number of flow attempts
        private int MaxFlowAttempts = 3;

        //ECI Flow TimeOut
        private int Flow_time_out = 0;


        //private char  Xtnd_txn = "N";	// "N" means individual txn in repeat cycle
        // "Y" means use LUW information for single LUW
        private char Xtnd_txn = 'N';
        public int Xtnd_LUW { get; set; }
        // hld_pw - holds PW between iterations because cics nulls it out
        public string hld_uid { get; set; }
        //The size of the COMMAREA to send to the program
        public string hld_pw { get; set; }
        // dest_kix_codepage can be any of Win Aix zOS
        string dest_kix_codepage = "zOS";

        string errmsg = null;
        int rc, maxrc = 0;


        public ExecECI(src_hdr eci_hdr)
        {
            RegionName = eci_hdr.src_hdr_rgn;
            RegionIP = eci_hdr.src_hdr_dest_ip;
            RegionPORT = eci_hdr.src_hdr_dest_port;
            Region_usessl = eci_hdr.src_hdr_dest_SSL;
            if (Int32.TryParse(RegionPORT, out rgnportno)) { };  // not sure what i may do
            ProgramName = eci_hdr.src_hdr_pgm_nm;
            MyTransid = eci_hdr.src_hdr_tranid;
            MyMirrorTransId = eci_hdr.src_hdr_tranid;
            rep_txn = eci_hdr.src_hdr_repeat;
            wt_txn = eci_hdr.src_hdr_wait;
            MaxFlowAttempts = eci_hdr.src_hdr_eci_flow;
            Flow_time_out = eci_hdr.src_hdr_eci_to;
            Xtnd_txn = eci_hdr.src_hdr_eci_X_tran;
            Xtnd_LUW = 0;
            hld_uid = eci_hdr.src_hdr_uid;
            hld_pw = eci_hdr.src_hdr_pw;
            if (eci_hdr.src_hdr_ch_nm == "" | eci_hdr.src_hdr_ch_nm == "DFHCOMMAREA")
            {
                use_ca_or_cNc = "CA";
                CHANNEL_NAME = "";
            }
            else
            {
                use_ca_or_cNc = "cNc";
                CHANNEL_NAME = eci_hdr.src_hdr_ch_nm;
            }
            Console.WriteLine("ExecECI:\nRegion:{2} IP:{0} PORT:{1} UsesSSL?:{3}", RegionIP, RegionPORT, RegionName, Region_usessl);
            Console.WriteLine("Program:{0}, Transid:{1}", ProgramName, MyTransid);
            Console.WriteLine("Repeat:{0}, Wait:{1}", rep_txn, wt_txn);
        }

        /// <summary>
        /// Connects to the CICS Transaction Gateway using TCP/IP or SSL.
        /// </summary>
        /// <returns>The <see cref="GatewayConnection"/> representing the connection to the Gateway daemon.</returns>
        private GatewayConnection OpenConnection()
        {
            if (Region_usessl.Equals('Y'.ToString()) )
            {
                SslProperties ssl_p = new SslProperties(System.Security.Authentication.SslProtocols.Tls12);
//                SslProperties ssl_p = new SslProperties();  // binds with tls 1

                return new SslGatewayConnection(RegionIP, rgnportno, Flow_time_out, ssl_p);
            }
            else
            {
                return new GatewayConnection(RegionIP, rgnportno, Flow_time_out);
            }
        }
        public int ExecECIReq(List<src_data> eci_req_data_list, 
            List<src_data> eci_resp_data_list)
        {
            StringBuilder sb_cont = new StringBuilder();

            string cicsServer, myCA;
            int rep_ct = this.rep_txn + 1;	// create the arrays with a value 1 - 99

            // Commarea buckets
            int CA_cnt = 0, a = 0;
            // with src_data List/Dict? do we need these arrays?
            byte[][] bAry_CA = new byte[rep_ct][];   // ca byte ary one for each rep
            string[][] sAry_CA = new string[rep_ct][]; // ca str ary one for each rep
            int[] iAry_ca_cail = new int[rep_ct];  //commarea.inboundlength one for each rep
            int[] iAry_ca_cal = new int[rep_ct];   //commarea.length one for each rep

            EciRequest eciReq = new EciRequest();
            eciReq.UserId = hld_uid;
            eciReq.Password = hld_pw;

            try
            {
                using (GatewayConnection gwyConnection = OpenConnection())
                //
                //using (GatewayConnection gwyConnection =
                //    new GatewayConnection(RegionIP, rgnportno, Flow_time_out))
                {
                    //Connected to the Gateway daemon
                    //Get name of CICS server from the user
                    cicsServer = this.SelectServer(gwyConnection);
                    if (cicsServer == null)
                    {
                        //No servers defined, or user chose to quit
                        maxrc = 12;
                        return maxrc;
                    }

                    Console.WriteLine("Selected Region:{0}", cicsServer);
                    int eci_req_ct = eci_req_data_list.Count;

                    //Prepare the EciRequest %%%%
                    if ((use_ca_or_cNc != "CA") && (use_ca_or_cNc != "cNc"))
                    {
                        Console.WriteLine("ERROR: Invalid data selection.\n Use CA or cNc (var:use_ca_or_cNc:{0}", use_ca_or_cNc);
                        maxrc = 12;
                        return maxrc;
                    }

                    eciReq.ServerName = cicsServer;
                    eciReq.Program = ProgramName;

                    eciReq.TransId = MyTransid;
                    eciReq.MirrorTransId = MyMirrorTransId;

                    if (this.Xtnd_txn != 'Y')
                    {
                        eciReq.ExtendMode = EciExtendMode.EciNoExtend;
                    }
                    else
                    {
                        eciReq.ExtendMode = EciExtendMode.EciExtended;
                    }
                    eciReq.LuwToken = 0;  // set to zero on first request
                    // Create two different encodings for Commarea Version
                    string ST_mydt = null;
                    string SP_mydt = null;
                    Encoding ascii = Encoding.ASCII;
                    Encoding utf8 = Encoding.UTF8;
                    Encoding unicode = Encoding.Unicode;
                    Encoding ibm037 = Encoding.GetEncoding(037);


                    if (use_ca_or_cNc == "CA")
                    {
                        int ca_ct = eci_req_data_list.Count;
                        int cur_ca = 0;
                        do
                        {
                            Console.WriteLine("Using Commarea Data request. Current iteration:{0} of {1}", (cur_ca + 1), (ca_ct + 1));
                            Console.WriteLine("Repeat:{0} Wait:{1} Extend:{2} ", this.rep_txn, this.wt_txn, this.Xtnd_txn);
                            src_data eci_req_data = new src_data();
                            eci_req_data = Program.DeepCopy(eci_req_data_list[cur_ca]);
                            int ca_bary_l = eci_req_data.b_src_ary.Length;
                            CAL = eci_req_data.src_l;
                            if (ca_bary_l > CAL) ca_bary_l = CAL;
                            byte[] b_myCA = new byte[CAL];
                            char CA_fmt_data_encode = eci_req_data.src_fmt_data_encode;
                            Array.Copy(eci_req_data.b_src_ary, 0, b_myCA, 0, ca_bary_l);
                            switch (CA_fmt_data_encode)
                            {
                                case 'a':
                                    {
                                        myCA = ascii.GetString(b_myCA, 0, ca_bary_l);
                                        break;
                                    }
                                case 'e':
                                    {
                                        myCA = ibm037.GetString(b_myCA, 0, ca_bary_l);
                                        break;
                                    }
                                case 'x':
                                    {
                                        myCA = utf8.GetString(b_myCA, 0, ca_bary_l);
                                        break;
                                    }
                                default:
                                    {
                                        myCA = string.Concat("Data Format indicator:", CA_fmt_data_encode.ToString(), " not recognized.");
                                        break;
                                    }
                            }
                            //string s = Encoding.UTF8.GetString(b_myCA, 0, b_myCA.Length);
                            //string t = System.Text.Encoding.Default.GetString(b_myCA);
                            //myCA = s;
                            //myCA = t;
                            //int tmp_i = myCA.Length;
                            //myCA = myCA.PadRight(CAL, '\0');
                            //tmp_i = myCA.Length;
                            //sb_cont.Clear();
                            //sb_cont.Append(b_myCA.ToString());
                            //myCA = sb_cont.ToString().PadRight(CAL, '\0');

                            //byte[] unicodeBytes = unicode.GetBytes(myCA);
                            //tmp_i = unicodeBytes.Length;
                            //      byte[] asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);       
                            /*
                            if (dest_kix_codepage == "zOS")
                            {
                                byte[] ibm037Bytes = Encoding.Convert(unicode, ibm037, unicodeBytes);
                                tmp_i = ibm037Bytes.Length;
                                Array.Resize(ref b_myCA, CAL);
                                Array.Copy(ibm037Bytes, b_myCA, CAL);
                                tmp_i = b_myCA.Length;
                            }
                             */

                            /*
                            //eciReq.CommareaLength = CAL; // can not do this
                            eciReq.CommareaOutboundLength = CAL;
                            eciReq.CommareaInboundLength = CAL;
                            Console.WriteLine("Sending myCA string length:" + myCA.Length + "<<");
                            Console.WriteLine("Sending myCA string:" + myCA + "<<");
                            //           eciReq.SetCommareaData(ascii.GetBytes(myCA));
                            //           b_myCA = ascii.GetBytes(myCA.PadRight(CAL,'\0'));
                            Console.WriteLine("b_myCA Length is:" + b_myCA.Length + "<<");
                            eciReq.SetCommareaData(b_myCA);
                            Console.WriteLine("Invoking Commarea FlowRequest()... ");
                             */ 
                            // repeat loop logic		
                            // note - sending ca is b_myCA byte array of length(CAL)
                            //         - which is copied to the eciApp request Commarea variable;
                            //         - subsequntly can be reused
                            CA_cnt = rep_ct = 0;

                            do
                            {
                                //eciReq.CommareaLength = CAL; // can not do this
                                eciReq.CommareaOutboundLength = CAL;
                                eciReq.CommareaInboundLength = CAL;
                                Console.WriteLine("Sending myCA string length:" + myCA.Length + "<<");
                                Console.WriteLine("Sending myCA string:" + myCA + "<<");
                                //           eciReq.SetCommareaData(ascii.GetBytes(myCA));
                                //           b_myCA = ascii.GetBytes(myCA.PadRight(CAL,'\0'));
                                Console.WriteLine("b_myCA Length is:" + b_myCA.Length + "<<");
                                eciReq.SetCommareaData(b_myCA);
                                Console.WriteLine("Invoking Commarea FlowRequest()... ");

                                Console.WriteLine("Iteration {0} of {1}...", (rep_ct +1), (this.rep_txn + 1));
                                ST_mydt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                                if (FlowRequest(gwyConnection, eciReq))
                                {
                                    errmsg = "FlowRequest Normal: " + eciReq.EciReturnCode.ToString();
                                    SP_mydt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                                    Console.WriteLine("\n\nReturned from FlowRequest {0} for Region:{1}", rep_ct, cicsServer);
                                    a = eciReq.CommareaInboundLength;
                                    bAry_CA[rep_ct] = new byte[CAL];
                                    if (a > 0)
                                    {
                            //            Array.Resize(ref bAry_CA[rep_ct], a);
                                        Array.Copy(eciReq.GetCommareaData(), 0, bAry_CA[rep_ct], 0, a);
                                        CA_fmt_data_encode = 'E';
                                    }
                                    else
                                    {
                                        errmsg = "FlowRequest Normal: Empty Commarea!: ";
                                        SP_mydt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                                        a = errmsg.Length;
                            //            Array.Resize(ref bAry_CA[rep_ct], a);
                                        Array.Copy(Encoding.ASCII.GetBytes(errmsg), 0, bAry_CA[rep_ct], 0, a);
                                        CA_fmt_data_encode = 'A';
                                    }
                                    iAry_ca_cal[rep_ct] = eciReq.CommareaLength;
                                    iAry_ca_cail[rep_ct] = eciReq.CommareaInboundLength;

                                }
                                else
                                {
                                    int eci_rc = (int)eciReq.EciReturnCode;
                                    errmsg = "FlowRequest error:" + eci_rc.ToString() + "::" + eciReq.EciReturnCode.ToString();
                                    SP_mydt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                                    Console.WriteLine(errmsg);
                                    a = errmsg.Length;
                                    if (a > CAL) CAL = a;
                                    bAry_CA[rep_ct] = new byte[CAL];
//                                    bAry_CA[rep_ct] = new byte[] { 20 };
//                                    Array.Resize(ref bAry_CA[rep_ct], a);
                                    Array.Copy(Encoding.ASCII.GetBytes(errmsg), 0, bAry_CA[rep_ct], 0, a);
                                    CA_fmt_data_encode = 'A';
                                    iAry_ca_cal[rep_ct] = eciReq.CommareaLength;
                                    iAry_ca_cail[rep_ct] = 0; //eciReq.CommareaInboundLength;	
                                    rc = 9;
                                }
                                src_data new_src_data_resp = new src_data();
                                new_src_data_resp.src_type = 'c';
                                new_src_data_resp.src_fmt_data_encode = CA_fmt_data_encode;
                                new_src_data_resp.src_repeat_ct = rep_ct.ToString();
                                new_src_data_resp.src_l = iAry_ca_cal[rep_ct];
                                new_src_data_resp.src_name = "DFHCOMMAREA";
                                new_src_data_resp.src_startTM = ST_mydt;
                                new_src_data_resp.src_endTM = SP_mydt;
                                new_src_data_resp.b_src_ary = bAry_CA[rep_ct];
                                new_src_data_resp.src_eci_retcd = errmsg;
                                eci_resp_data_list.Add(new_src_data_resp);
                                rep_ct++;
                                CA_cnt++;
                                if (this.wt_txn > 0)
                                {
                                    Console.WriteLine("Sleeping {0} sec.", this.wt_txn);
                                    System.Threading.Thread.Sleep((this.wt_txn * 1000));
                                }
                                if (rc > maxrc)
                                {
                                    maxrc = rc;
                                    rc = 0;
                                }
                            } while (rep_ct <= this.rep_txn);
                            /*
                            if (CA_cnt > 0)
                            {
                                Console.WriteLine("Display CA(s) for Region {0}...", RegionName);
                                DisplayCommarea(RegionName, eci_req_data_list, eci_resp_data_list);
                                Console.WriteLine("Done Display CA...");
                            }
                             */ 
                            cur_ca++;
                        } while (cur_ca < ca_ct);
                    }
                        // End CA
                        // Beg CnC
                    else
                    {
                    Console.WriteLine("Using Channel and Container(s) Data request. ");
                    string[] req_cn_ary = new string[1];
                    string[] resp_cn_ary = new string[1];
                    //The 'using' C# construct ensures the Channel is
                    //correctly disposed of when it goes out of scope, even if
                    //an exception is thrown.
                    int cn_ct = eci_req_data_list.Count;  // list of cn via get_CnC
                    rep_ct = 0;
                    Console.WriteLine("Invoking cNc FlowRequest()... ");
                    do  // loop rep_ct
                    {
                        // each primary and repeated request will create and dispose channel
                        using (Channel channel = CreateChannel(eci_req_data_list, rep_ct))
                        {
                            req_cn_ary = channel.GetContainerNames();
                            if (cn_ct != req_cn_ary.Length)
                            {
                                Console.WriteLine("\nUnEqual: EciRequest count:{0} containers in channel count:{1}", cn_ct, req_cn_ary.Length);
                            }

                            //Set the Channel on the ECIRequest
                            eciReq.Channel = channel;
                            //Flow the request call to FlowRequest method
                            Console.WriteLine("Using cNc Data request. ");
                            Console.WriteLine("Repeat:{0} Wait:{1} Extend:{2} ", this.rep_txn, this.wt_txn, this.Xtnd_txn);

                            Console.WriteLine("Iteration cNc {0} of {1}...", rep_ct, this.rep_txn);
                            // if (FlowRequest(gwyConnection, eciReq)) 
                            ST_mydt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                            bool cn_flow_resp = false;
                            cn_flow_resp = FlowRequest(gwyConnection, eciReq);
                            SP_mydt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                            Console.WriteLine("\n\nReturned from FlowRequest {0} for Region:{1}", rep_ct, cicsServer);
                            Container[] containers = channel.GetContainers();
                            resp_cn_ary = channel.GetContainerNames();
                            cn_ct = containers.Count();
                            if (cn_flow_resp)
                            {
                                if (cn_ct > 0)
                                {
                                    foreach (string cn_nm in resp_cn_ary)
                                    {
                                        Container cn = channel.GetContainer(cn_nm);
                                        src_data new_src_data_resp = new src_data();
                                        new_src_data_resp.src_name = cn_nm;
                                        new_src_data_resp.src_repeat_ct = string.Format("{0,-2}",rep_ct.ToString());
                                        new_src_data_resp.src_startTM = ST_mydt;
                                        new_src_data_resp.src_endTM = SP_mydt;
                                        new_src_data_resp.src_eci_retcd = errmsg;
                                        //                            eci_resp_data_list.Add(new_src_data_resp);
                                        if (cn.Type == ContainerType.BIT)
                                        {
                                            new_src_data_resp.src_type = 'n';
                                            new_src_data_resp.src_fmt_data_encode = 'X';
                                            new_src_data_resp.b_src_ary = cn.GetBitData();
                                        }
                                        else
                                        {
                                            new_src_data_resp.src_type = 'N';
                                            new_src_data_resp.src_fmt_data_encode = 'A';
                                            string cNc_tmp = cn.GetCharData();
                                            a = cNc_tmp.Length;
                                            byte[] bAry_CN = new byte[a];
                                            Array.Copy(Encoding.ASCII.GetBytes(cNc_tmp), 0, bAry_CN, 0, a);
                                            new_src_data_resp.b_src_ary = bAry_CN;
                                        }
                                        new_src_data_resp.src_l = new_src_data_resp.b_src_ary.Length;
                                        eci_resp_data_list.Add(new_src_data_resp);
//                                        channel.DeleteContainer(cn_nm);
                                    }
                                }
                            }
                            else
                            {
                                int eci_rc = (int)eciReq.EciReturnCode;
                                errmsg = "FlowRequest error:" + eci_rc.ToString() + "::" + eciReq.EciReturnCode.ToString();

                                rc = 8;
                                if (cn_ct > 0)
                                {
                                    rc = 12;
                                }
                                Console.WriteLine("Region:{0}::{1}", cicsServer, errmsg);
                                src_data new_src_data_resp = new src_data();
                                new_src_data_resp.src_fmt_data_encode = 'A';
                                new_src_data_resp.src_name = "!ECIError!";
                                new_src_data_resp.src_repeat_ct = string.Format("{0,-2}",rep_ct.ToString());
                                new_src_data_resp.src_startTM = ST_mydt;
                                new_src_data_resp.src_endTM = SP_mydt;
                                new_src_data_resp.src_eci_retcd = eci_rc.ToString();
                                new_src_data_resp.src_type = 'N';
                                new_src_data_resp.src_fmt_data_encode = 'A';
                                string cNc_tmp = errmsg;
                                a = cNc_tmp.Length;
                                byte[] bAry_CN = new byte[a];
                                Array.Copy(Encoding.ASCII.GetBytes(cNc_tmp), 0, bAry_CN, 0, a);
                                new_src_data_resp.b_src_ary = bAry_CN;
                                new_src_data_resp.src_l = new_src_data_resp.b_src_ary.Length;
                                eci_resp_data_list.Add(new_src_data_resp);
                            }
                            channel.Dispose();
                            if (rc > maxrc) maxrc = rc;
                            rep_ct++;
                            if (this.wt_txn > 0)
                            {
                                Console.WriteLine("Sleeping {0} sec.", this.wt_txn);
                                System.Threading.Thread.Sleep((this.wt_txn * 1000));
                            }
                       }
                      
                    } while (rep_ct <= this.rep_txn);
                            /*
                            if (CA_cnt > 0)
                            {
                                Console.WriteLine("Display CA...");
                                DisplayCommarea(RegionName, eci_req_data_list, eci_resp_data_list);
                                Console.WriteLine("Done Display CA...");
                            }
                            else
                            {

                                Console.WriteLine("Display cNc... ");
                                DisplayChannelContents(eciReq.Channel);
                                Console.WriteLine("Done Display cNc...done with cNc flowrequest");
                            }
                             */ 
                        }  // done with cNc logic
                        Console.WriteLine("end 4 cNc (channel using) scope ");
                    }    // end using gatewaqy connection
                    Console.WriteLine("end 3 done (else) cNc end ");
                }    // end try gateway connection
            catch (SocketException ex)
            {
                int errorCode = ex.ErrorCode;
                string exmsg = ex.Message;
                maxrc = 12;
                string s = string.Format("Gateway Error: {0}: RC:{1}::{2}", RegionName, errorCode.ToString(), exmsg);
                Console.WriteLine(s);
 //               MessageBox.Show("!ECI Error!:{0}", s);
                MessageBox.Show("!ECI Error!:" + s, "!ECI Error!");
            }
            catch (Exception ex)
            {
                string exmsg = ex.Message;
                maxrc = 16;
                string s = string.Format("Gateway Error: {0}:{1}: RC:{2}::{3}", RegionName, errmsg, maxrc.ToString(), exmsg);
                Console.WriteLine(s);
                MessageBox.Show("!ECI Error!:" + s, "!ECI Error!");

            }

            Console.WriteLine("end 3 end using gateway connection");
            return maxrc;
        }
        
        private string SelectServer(GatewayConnection gwyConnection)
        {

            IList<CicsServer> servers;
            string chosenServer = null;

            //Retrieve list of CICS servers from the Gateway

            //ListSystems throws a System.Net.SocketException if a connection
            //failure occurs, or an IBM.CTG.GatewayException if an error occurs
            //in the Gateway daemon
            servers = gwyConnection.ListSystems();

            if (servers.Count == 0)
            {
                //There are no servers defined in the Gateway
                Console.WriteLine("No CICS servers have been defined in the Gateway");
                return null;
            }

            //List<string[]> svr_list=  new List<string[]>();
            Dictionary<string, string> svr_dict = new Dictionary<string, string>();

            foreach (CicsServer s in servers)
            {
                errmsg = s.Name.PadRight(9) + "::" + s.Description;
                svr_dict.Add(s.Name, string.Concat(s.Name.PadRight(9), s.Description));
            }

            gtwyServer get_rgn = new gtwyServer(RegionName, svr_dict);
            var tmp = get_rgn.ShowDialog();

            if (get_rgn.DialogResult == DialogResult.OK)
            {
                chosenServer = get_rgn.selt_cics;
            }
            return chosenServer;
        }

        private bool FlowRequest(GatewayConnection gwyConnection, EciRequest eciReq)
        {
            Object mpassword = "";
            int attempts = 0;
            while (attempts < MaxFlowAttempts)
            {

                //Flow throws a System.Net.SocketException if a connection
                //failure occurs, or an IBM.CTG.GatewayException if an error
                //occurs in the Gateway daemon
                Console.WriteLine("In FlowRequest() attempt#:{0}", attempts);
                gwyConnection.Flow(eciReq);
                Console.WriteLine("Eci RC:{0}", eciReq.EciReturnCode.ToString());

                //Test return code
                switch (eciReq.EciReturnCode)
                {
                    case EciReturnCode.EciNoError:
                        Console.WriteLine("FlowRequest Success! ");
                        //Flow succeeded
                        return true;

                    case EciReturnCode.EciErrSecurityError:
                        //Security error, prompt for CICS logon credentials
                        GetUIDnPW rd_uidpw = new GetUIDnPW();
                        var tmp = rd_uidpw.ShowDialog();
                        if (tmp == DialogResult.OK)
                        {
                            hld_uid = rd_uidpw.h_uid;
                            hld_pw = rd_uidpw.h_pw;
                            eciReq.UserId = hld_uid;
                            eciReq.Password = hld_pw;

                        }
                        else
                        {
                            return false;
                        }
                        // Console.WriteLine(" PW={0}",eciReq.Password);               
                        //               eciReq.Password = Console.ReadLine();
                        break;

                    case EciReturnCode.EciErrTransactionAbend:
                        //Transaction abended
                        Console.WriteLine("The transaction abended: {0}", eciReq.AbendCode);
                        return false;

                    case EciReturnCode.EciErrNoCics:
                        //CICS server not found
                        Console.WriteLine("CICS server not found");
                        return false;

                    default:
                        //Other error return code
                        Console.WriteLine("(default)ECI return code: {0} ({1})", eciReq.EciReturnCode.ToString(), (int)eciReq.EciReturnCode);
                        return false;
                }

                //Increment number of attempts
                attempts++;
            }
            Console.WriteLine("Number of attempts exceeded MaxFlowAttempts:{0}", attempts);
            //Number of attempts exceeded MaxFlowAttempts
            return false;
        }

        /// <summary>
        /// Creates a Channel with one CHAR Container to pass to the EC03 program
        /// </summary>
        /// <returns>A Channel object to be used for the ECI request</returns>
        private Channel CreateChannel(List<src_data> eci_src_data_req, int rep_ct)
        {
            /*
                Console.WriteLine("Enter text to send to the CICS program:");
                String text = Console.ReadLine();
                StringBuilder sb_cont = new StringBuilder();
            DateTime now = DateTime.Now;
            sb_cont.Append(now.ToString("G")).Append("::");
            sb_cont.Append(Environment.MachineName).Append(Environment.Version.ToString()).Append(text).Append("<");
            */
            Channel channel = new Channel(CHANNEL_NAME);
            int cn_ct = eci_src_data_req.Count;
            if (cn_ct < 1) {
                Console.WriteLine("Create Channel, but no request Containers: Create 1 default.");
	            StringBuilder sb_cont = new StringBuilder();
	            DateTime now = DateTime.Now;
	            sb_cont.Append(now.ToString("G")).Append("::Start:: ");
	            sb_cont.Append(Environment.MachineName).Append(";.NetVer:").Append(Environment.Version.ToString()).Append("::").Append("|");
                channel.CreateContainer(CONTAINER_NAME, sb_cont.ToString());
                } else {
                int Bcreate_cn_ct = 0, Ccreate_cn_ct = 0;
                foreach(src_data cn_data in eci_src_data_req) {
                    string cn_nm = cn_data.src_name;
                    if (cn_data.src_type == 'n') {
                    channel.CreateContainer(cn_nm, cn_data.b_src_ary);
                    Bcreate_cn_ct++;
                    } else {
//                    string tmp_str = cn_data.b_src_ary.ToString();
                      string tmp_str = Encoding.ASCII.GetString(cn_data.b_src_ary, 0, cn_data.b_src_ary.Length);

                    channel.CreateContainer(cn_nm, tmp_str);
                    Ccreate_cn_ct++;
                    }
                }
                Console.WriteLine("Create Channel:{0} BIT Containers, {1} Char Containers:", Bcreate_cn_ct, Ccreate_cn_ct);
            }
            return channel;
        }

        private void reCreateChannel(List<src_data> eci_src_data_req, int rep_ct, Channel channel)
        {
            /*
                Console.WriteLine("Enter text to send to the CICS program:");
                String text = Console.ReadLine();
                StringBuilder sb_cont = new StringBuilder();
            DateTime now = DateTime.Now;
            sb_cont.Append(now.ToString("G")).Append("::");
            sb_cont.Append(Environment.MachineName).Append(Environment.Version.ToString()).Append(text).Append("<");
            */
            int cn_ct = eci_src_data_req.Count;
            if (cn_ct < 1)
            {
                Console.WriteLine("Create Channel, but no request Containers: Create 1 default.");
                StringBuilder sb_cont = new StringBuilder();
                DateTime now = DateTime.Now;
                sb_cont.Append(now.ToString("G")).Append("::Start:: ");
                sb_cont.Append(Environment.MachineName).Append(";.NetVer:").Append(Environment.Version.ToString()).Append("::").Append("|");
                channel.CreateContainer(CONTAINER_NAME, sb_cont.ToString());
            }
            else
            {
                foreach (src_data cn_data in eci_src_data_req)
                {
                    string cn_nm = cn_data.src_name;
                    if (cn_data.src_type == 'n')
                    {
                        channel.CreateContainer(cn_nm, cn_data.b_src_ary);
                    }
                    else
                    {
                        string tmp_str = cn_data.b_src_ary.ToString();
                        channel.CreateContainer(cn_nm, tmp_str);
                    }
                }
            }
            return ;
        }

        private void DisplayCommarea(string rgn_name, List<src_data> eci_req_data_list, List<src_data> eci_resp_data_list)
        {
            Encoding ascii = Encoding.ASCII;
            Encoding unicode = Encoding.Unicode;
            Encoding ibm037 = Encoding.GetEncoding(037);

            int ca_req_ct = eci_req_data_list.Count;
            int ca_resp_ct = eci_resp_data_list.Count;
            if (ca_req_ct == 0 & ca_req_ct == 0) return;
            List<string> ca_req_list = new List<string>();
            List<string> ca_resp_list = new List<string>();
            foreach (src_data tmp in eci_req_data_list)
            {
                ca_req_list.Add(tmp.src_name);
            }
            foreach (src_data tmp in eci_resp_data_list)
            {
                ca_resp_list.Add(tmp.src_name);
            }

            string viewed_items = "";
            get_disp_ca_entry show_ca = new get_disp_ca_entry(RegionName, ca_req_list, ca_resp_list);
            do
            {
                show_ca.ShowDialog();
                if (show_ca.DialogResult != DialogResult.Cancel)
                {
                    string req_resp = show_ca.req_resp;
                    int item_num = show_ca.item_num;
                    string tmp_item = string.Concat(req_resp, show_ca.req_resp_nm);
                    if (viewed_items.IndexOf(tmp_item) == -1) viewed_items = string.Concat(viewed_items, " ", tmp_item);
                    src_data disp_data = new src_data();
                    if (req_resp == "req")
                    {
                        disp_data = eci_req_data_list[item_num];
                    }
                    else
                    {
                        disp_data = eci_resp_data_list[item_num];
                    }
                    DispData(disp_data, RegionName, tmp_item, dest_kix_codepage); 
                }

            } while (show_ca.DialogResult != DialogResult.Cancel);
            return;
            }

        /// <summary>
        /// Prints a list of Containers in the Channel and the contents of each Container
        /// </summary>
        private void DisplayChannelContents(Channel channel)
        {
            Console.WriteLine("Program " + ProgramName + " returned containers:");
            Container[] containers = channel.GetContainers();

            foreach (Container aContainer in containers)
            {
                if (aContainer.Type == ContainerType.BIT)
                {
                    Console.Write("    [BIT] {0,-16} = ", aContainer.Name);
                    Console.WriteLine(BitConverter.ToString(aContainer.GetBitData()));
                }
                else
                {
                    Console.Write("   [CHAR] {0,-16} = ", aContainer.Name);
                    Console.WriteLine(aContainer.GetCharData());
                }
            }
        }

        public void DispData(src_data disp_data, string RegionName, string tmp_item, string dest_kix_codepage)
        {
            Encoding ascii = Encoding.ASCII;
            Encoding ibm037 = Encoding.GetEncoding(037);
            //Display returned COMMAREA
            //   byte[] Ncommarea = eciReq.GetCommareaData();
            Console.WriteLine("eciCommarea CommareaLength:{0}<<", disp_data.src_l);
            int CAL = disp_data.src_l;
            //     Console.WriteLine("eciCommarea CommareaInboundLength:{0}<<", eciReq.CommareaInboundLength);
            byte[] NasciiBytes = new byte[CAL];
            if (dest_kix_codepage == "zOS")
            {
                byte[] n_ibm037Bytes = new byte[CAL];
                Array.Copy(disp_data.b_src_ary, n_ibm037Bytes, CAL);
                NasciiBytes = Encoding.Convert(ibm037, ascii, disp_data.b_src_ary);
            }
            else
            {
                NasciiBytes =  disp_data.b_src_ary;
            }
            char[] NasciiChars = new char[ascii.GetCharCount(NasciiBytes, 0, NasciiBytes.Length)];
                //         Console.WriteLine("\nibm037 to asciiChars length is {0}", NasciiChars.Length);
            ascii.GetChars(NasciiBytes, 0, NasciiBytes.Length, NasciiChars, 0);
                //         Console.WriteLine("asciiChars to asciiBytes length is {0}", NasciiBytes.Length);
                //         Console.WriteLine("\nasciiBytes Hex:");
            // show the form
            
        }
    }
}?using System;
using System.Collections.Generic;
//using System.Environment;
//using System.ComponentModel;
//using System.Data;
//using System.Drawing;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class Form1 : Form
    {
        private string proc_rgns_allorone = null;  // all regions w/ same request or one - each regions has own specific request
 //       public string result = null;
        private List<string> rgns_selt = new List<string>();
        private Dictionary<string, string[]> rgns_dict = new Dictionary<string, string[]>();
        private string phase = "0";
        public string uid;
        public string pw;
        public string[] Formargs;
        public static string OurVer = "RunECI::1.0.0.18";
        private string ctgpath;
        private string ctgfile = "";
        private bool ignr_init = true;
        public Form1()
        {
            InitializeComponent();
            Console.WriteLine("Starting:" + DateTime.Now.ToString("yyyy -MM-dd HH:mm:ss.fff"));
            Console.WriteLine("ECI_DATA_CAPTURE_LENGTH:" + Environment.GetEnvironmentVariable(
             "ECI_DATA_CAPTURE_LENGTH"));
            this.Text = OurVer;
            Formargs = Environment.GetCommandLineArgs();
            ctgpath = Properties.Settings.Default.CTGPATH;
            tb_choose_file.Text = ctgpath;
            ignr_init = false;

        }

        private void btn_cancel_Click(object sender, EventArgs e)
        {
            Console.WriteLine("Cancel selected. Good Bye."); // <-- For debugging use.
            this.Close();
        }

        private void btn_continue_Click(object sender, EventArgs e)
        {
            switch (phase)
            {
                case "1":   //pw
                    {
                        try
                        {
                            GetUIDnPW rd_uidpw = new GetUIDnPW();
                            var tmp = rd_uidpw.ShowDialog();
                            if (tmp == DialogResult.OK)
                            {
                                this.uid = rd_uidpw.h_uid;
                                this.pw = rd_uidpw.h_pw;
                                Console.WriteLine("runreq.ShowDialog():btn_continue:phase 1: UID:{0}", rd_uidpw.h_uid);
                                phase = "2";  // choice of processing all the same or different
                                lbl_phase.Text = "Select from above";
                                gb_oneoftw.Visible = true;
/*
* rbtn1_2_opt1.Text = "Process Rgns w/ Same Request"; proc_rgns_allorone = "all";
*  all means every ctg rgn is driven with the same request - no stops btwn regions
* rbtn1_2_opt2.Text = "Process Rgns w/ Indiv Request"; proc_rgns_allorone = "one";
*  one means every ctg rgn will get to have a unique request - stopping for request
*  capture for each new ctg rgn
* rbtn1_3_opt3.Text = "Process Each Rgn 1 by 1"; proc_rgns_allorone = "all_single";
*  all_single means that all ctg rgns driven with the same request - 
*    stopping btwn regions to allow for Cancel
*/
                                rbtn1_2_opt1.Text = "Process Rgns w/ Same Request";
                                rbtn1_2_opt2.Text = "Process Rgns w/ Indiv Request";
                                rbtn1_3_opt3.Text = "Process Each Rgn 1 by 1, Same Request";
                                rbtn1_2_opt1.Visible = true;
                                rbtn1_2_opt2.Visible = true;
                                rbtn1_3_opt3.Visible = true;
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error GetCTGRegions:" + ex.Message);
                        }
                        break;
                    } // end case phase 1
                case "2":   // process all or one radio
                    {
                        if (proc_rgns_allorone == null)
                        {
                            break;
                        }
                        Console.WriteLine("runreq.ShowDialog():btn_continue:phase 2: proc_rgns_allorone:{0}", proc_rgns_allorone);

                        phase = "3";  // choice of processing all the same or different

                        lbl_phase.Text = "Press Continue to Confirm Selection.";
                        gb_oneoftw.Visible = false;
                        /*
                        rbtn1_2_opt1.Text = "";
                        rbtn1_2_opt2.Text = "";
                        rbtn1_3_opt3.Text = "";
                        rbtn1_2_opt1.Visible = false;
                        rbtn1_2_opt2.Visible = false;
                        rbtn1_3_opt3.Visible = false;
                         */ 
                        break;
                    } // end case phase 2
                case "3":   // process all or one radio
                    {
                        if (proc_rgns_allorone == null)
                        {
                            break;
                        }
                        phase = "2";  // choice of processing all the same or different
                        lbl_phase.Text = "Press Continue to Restart Processing";
                        IterateSeltRgns runreq = new IterateSeltRgns(rgns_dict, proc_rgns_allorone, uid, pw);
                        var tmp = runreq.ShowDialog();

                        if (runreq.DialogResult == DialogResult.OK)
                        {
                            Console.WriteLine("runreq.ShowDialog() OK. Good Bye."); // <-- For debugging use.
                            gb_oneoftw.Visible = true;
/*
                            rbtn1_2_opt1.Text = "Process Rgns w/ Same Request";
                            rbtn1_2_opt2.Text = "Process Rgns w/ Indiv Request";
                            rbtn1_3_opt3.Text = "Process Each Rgn 1 by 1, Same Request";
                            rbtn1_2_opt1.Visible = true;
                            rbtn1_2_opt2.Visible = true;
                            rbtn1_3_opt3.Visible = true;
*/
                        }
                        else
                        {
                            Console.WriteLine("runreq.ShowDialog() Not OK. Good Bye."); // <-- For debugging use.
                            this.Close();
                        }
                        break;
                    } // end case phase 3
                default:
                    {
                    MessageBox.Show("Phase error in btn_continue: We should never get here.");
                    this.Close();
                    break;
                    }
                } // end switch
            }

        private void radioButtons_CheckedChanged(object sender, EventArgs e)
        {
//            RadioButton radioButton = sender as RadioButton;

            if (rbtn1_2_opt1.Checked)
            {
                proc_rgns_allorone = "all"; 
            }
            else if (rbtn1_2_opt2.Checked)
            {
                proc_rgns_allorone = "one";
            }
            else if (rbtn1_3_opt3.Checked)
            {
                proc_rgns_allorone = "all_single";
            }

        }

        private void btn_chose_file_Click(object sender, EventArgs e)
        {
            //            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            //            string result = null;
 //           string ctgpath = "c:\\RunCtg\\TestZOS";

            string[] argwords;
            if (ctgfile == "") ctgfile = ctgpath;
  //          string ctgfile = ctgpath;
            foreach (string arg in Formargs)
            {
                Console.WriteLine("Arg:{0}", arg);
                argwords = arg.Split('=');
                string t2 = "!missing!";
                if (argwords.Length > 1)
                {
                    t2 = argwords[1];
                    if (argwords[0].ToUpper() == "CTGPATH")
                    {
                        Console.WriteLine("Got CTGPATH:{0}", t2);
                        ctgfile = t2;
                    }
                }
                Console.WriteLine("word1:{0}\tword2:{1}", argwords[0], t2);
            }

//            this.openFileDialog1.InitialDirectory = "c:\\RunCtg\\TestZOS";
            this.openFileDialog1.InitialDirectory = ctgfile; 
            this.openFileDialog1.Filter = "txt files (*.txt)|*.txt";
            this.openFileDialog1.FilterIndex = 2;
            this.openFileDialog1.RestoreDirectory = true;

            DialogResult dr = this.openFileDialog1.ShowDialog();

            if (dr == DialogResult.OK)
            {
                try
                {
                    string file = openFileDialog1.FileName;

                    {
                        try
                        {
                            GetCTGRegions rd_rgns = new GetCTGRegions(file);
                            var tmp = rd_rgns.ShowDialog();
                            if (tmp == DialogResult.OK)
                            {
                                rgns_selt = rd_rgns.selt;
                                foreach (KeyValuePair<string, string[]> rgnD in rd_rgns.selt_dict)
                                {
                                    rgns_dict.Add(rgnD.Key, rgnD.Value);
                                }
                            }
                            ctgpath = Path.GetFullPath(file);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error GetCTGRegions:" + ex.Message);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message);
                }
            }
            /*
             *If you are not concerned about opening a console on-command, you can go into the properties for your 
             *project and change it to Console Application.  This will still show your form as well as popping up
             *a console window. You can't close the console window, but it works as an excellent logger for debugging.
             Just remember to turn it back off before you deploy the program.

             */
            if (rgns_selt.Count == 0)
            {
                Console.WriteLine("No Regions Selected. Good Bye."); // <-- For debugging use.
                this.Close();
            }
            else
            {
                lbl_chose_file.Text = "Secected Regions";
                btn_chose_file.Visible = false;
                tb_choose_file.Visible = false;
                lb_chose_rgns.DataSource = rgns_selt;
                lb_chose_rgns.Visible = true;
                btn_continue.Visible = true;
                lbl_phase.Visible = true;
                phase = "1";
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            Properties.Settings.Default.CTGPATH = ctgpath;
            Properties.Settings.Default.Save();
        }

        private void tb_choose_file_Validating(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (ignr_init) return;
            if (tb_choose_file.Text == "")
            {
                tb_choose_file.Text = ctgpath;
                e.Cancel = true;
                return;
            }
            else
            {
                ctgfile = tb_choose_file.Text;
            }
        }


        private void tb_choose_file_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                btn_chose_file_Click(sender, e);

        }
     }
  }

?namespace RunCTG_ECI
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();
            this.btn_chose_file = new System.Windows.Forms.Button();
            this.lbl_chose_file = new System.Windows.Forms.Label();
            this.lb_chose_rgns = new System.Windows.Forms.ListBox();
            this.btn_continue = new System.Windows.Forms.Button();
            this.btn_cancel = new System.Windows.Forms.Button();
            this.lbl_phase = new System.Windows.Forms.Label();
            this.gb_oneoftw = new System.Windows.Forms.GroupBox();
            this.rbtn1_3_opt3 = new System.Windows.Forms.RadioButton();
            this.rbtn1_2_opt2 = new System.Windows.Forms.RadioButton();
            this.rbtn1_2_opt1 = new System.Windows.Forms.RadioButton();
            this.tb_choose_file = new System.Windows.Forms.TextBox();
            this.gb_oneoftw.SuspendLayout();
            this.SuspendLayout();
            // 
            // openFileDialog1
            // 
            this.openFileDialog1.DefaultExt = "txt";
            this.openFileDialog1.FileName = Properties.Settings.Default.CTGPATH;
            this.openFileDialog1.Filter = " \"Text files (*.txt)|*.txt\"";
            this.openFileDialog1.InitialDirectory = "\"C:\\runctg\"";
            this.openFileDialog1.Title = "Choose Ports file ";
            // 
            // btn_chose_file
            // 
            this.btn_chose_file.AllowDrop = true;
            this.btn_chose_file.DialogResult = System.Windows.Forms.DialogResult.Yes;
            this.btn_chose_file.Location = new System.Drawing.Point(24, 29);
            this.btn_chose_file.Name = "btn_chose_file";
            this.btn_chose_file.Size = new System.Drawing.Size(29, 23);
            this.btn_chose_file.TabIndex = 0;
            this.btn_chose_file.Text = "....";
            this.btn_chose_file.UseVisualStyleBackColor = true;
            this.btn_chose_file.UseWaitCursor = true;
            this.btn_chose_file.Click += new System.EventHandler(this.btn_chose_file_Click);
            // 
            // lbl_chose_file
            // 
            this.lbl_chose_file.AutoSize = true;
            this.lbl_chose_file.Location = new System.Drawing.Point(21, 9);
            this.lbl_chose_file.Name = "lbl_chose_file";
            this.lbl_chose_file.Size = new System.Drawing.Size(129, 13);
            this.lbl_chose_file.TabIndex = 2;
            this.lbl_chose_file.Tag = "";
            this.lbl_chose_file.Text = "Choose PORTS Input File";
            // 
            // lb_chose_rgns
            // 
            this.lb_chose_rgns.BackColor = System.Drawing.SystemColors.Control;
            this.lb_chose_rgns.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.lb_chose_rgns.FormattingEnabled = true;
            this.lb_chose_rgns.Location = new System.Drawing.Point(27, 33);
            this.lb_chose_rgns.Name = "lb_chose_rgns";
            this.lb_chose_rgns.Size = new System.Drawing.Size(75, 91);
            this.lb_chose_rgns.TabIndex = 3;
            this.lb_chose_rgns.Visible = false;
            // 
            // btn_continue
            // 
            this.btn_continue.Location = new System.Drawing.Point(24, 172);
            this.btn_continue.Name = "btn_continue";
            this.btn_continue.Size = new System.Drawing.Size(75, 23);
            this.btn_continue.TabIndex = 4;
            this.btn_continue.Text = "Continue";
            this.btn_continue.UseVisualStyleBackColor = true;
            this.btn_continue.Visible = false;
            this.btn_continue.Click += new System.EventHandler(this.btn_continue_Click);
            // 
            // btn_cancel
            // 
            this.btn_cancel.Location = new System.Drawing.Point(195, 172);
            this.btn_cancel.Name = "btn_cancel";
            this.btn_cancel.Size = new System.Drawing.Size(75, 23);
            this.btn_cancel.TabIndex = 5;
            this.btn_cancel.Text = "Cancel";
            this.btn_cancel.UseVisualStyleBackColor = true;
            this.btn_cancel.Click += new System.EventHandler(this.btn_cancel_Click);
            // 
            // lbl_phase
            // 
            this.lbl_phase.AutoSize = true;
            this.lbl_phase.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_phase.Location = new System.Drawing.Point(24, 153);
            this.lbl_phase.Name = "lbl_phase";
            this.lbl_phase.Size = new System.Drawing.Size(130, 13);
            this.lbl_phase.TabIndex = 6;
            this.lbl_phase.Text = "Gather UID and Password";
            this.lbl_phase.Visible = false;
            // 
            // gb_oneoftw
            // 
            this.gb_oneoftw.Controls.Add(this.rbtn1_3_opt3);
            this.gb_oneoftw.Controls.Add(this.rbtn1_2_opt2);
            this.gb_oneoftw.Controls.Add(this.rbtn1_2_opt1);
            this.gb_oneoftw.Location = new System.Drawing.Point(124, 29);
            this.gb_oneoftw.Name = "gb_oneoftw";
            this.gb_oneoftw.Size = new System.Drawing.Size(246, 95);
            this.gb_oneoftw.TabIndex = 8;
            this.gb_oneoftw.TabStop = false;
            this.gb_oneoftw.Text = "Select one of three options";
            this.gb_oneoftw.Visible = false;
            // 
            // rbtn1_3_opt3
            // 
            this.rbtn1_3_opt3.AutoSize = true;
            this.rbtn1_3_opt3.Location = new System.Drawing.Point(6, 42);
            this.rbtn1_3_opt3.Name = "rbtn1_3_opt3";
            this.rbtn1_3_opt3.Size = new System.Drawing.Size(102, 17);
            this.rbtn1_3_opt3.TabIndex = 2;
            this.rbtn1_3_opt3.Text = "rbtn1_3_option3";
            this.rbtn1_3_opt3.UseVisualStyleBackColor = true;
            this.rbtn1_3_opt3.Visible = false;
            this.rbtn1_3_opt3.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // rbtn1_2_opt2
            // 
            this.rbtn1_2_opt2.AutoSize = true;
            this.rbtn1_2_opt2.Location = new System.Drawing.Point(6, 65);
            this.rbtn1_2_opt2.Name = "rbtn1_2_opt2";
            this.rbtn1_2_opt2.Size = new System.Drawing.Size(102, 17);
            this.rbtn1_2_opt2.TabIndex = 1;
            this.rbtn1_2_opt2.Text = "rbtn1_2_option2";
            this.rbtn1_2_opt2.UseVisualStyleBackColor = true;
            this.rbtn1_2_opt2.Visible = false;
            this.rbtn1_2_opt2.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // rbtn1_2_opt1
            // 
            this.rbtn1_2_opt1.AutoSize = true;
            this.rbtn1_2_opt1.Location = new System.Drawing.Point(6, 19);
            this.rbtn1_2_opt1.Name = "rbtn1_2_opt1";
            this.rbtn1_2_opt1.Size = new System.Drawing.Size(102, 17);
            this.rbtn1_2_opt1.TabIndex = 0;
            this.rbtn1_2_opt1.Text = "rbtn1_2_option1";
            this.rbtn1_2_opt1.UseVisualStyleBackColor = true;
            this.rbtn1_2_opt1.Visible = false;
            this.rbtn1_2_opt1.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // tb_choose_file
            // 
            this.tb_choose_file.AcceptsReturn = true;
            this.tb_choose_file.Location = new System.Drawing.Point(70, 29);
            this.tb_choose_file.Name = "tb_choose_file";
            this.tb_choose_file.Size = new System.Drawing.Size(228, 20);
            this.tb_choose_file.TabIndex = 9;
            this.tb_choose_file.KeyDown += new System.Windows.Forms.KeyEventHandler(this.tb_choose_file_KeyDown);
            this.tb_choose_file.Validating += new System.ComponentModel.CancelEventHandler(this.tb_choose_file_Validating);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(382, 223);
            this.Controls.Add(this.tb_choose_file);
            this.Controls.Add(this.gb_oneoftw);
            this.Controls.Add(this.lbl_phase);
            this.Controls.Add(this.btn_cancel);
            this.Controls.Add(this.btn_continue);
            this.Controls.Add(this.lb_chose_rgns);
            this.Controls.Add(this.lbl_chose_file);
            this.Controls.Add(this.btn_chose_file);
            this.Name = "Form1";
            this.Text = "RunECI";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.Form1_FormClosing);
            this.gb_oneoftw.ResumeLayout(false);
            this.gb_oneoftw.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.OpenFileDialog openFileDialog1;
        private System.Windows.Forms.Button btn_chose_file;
        private System.Windows.Forms.Label lbl_chose_file;
        private System.Windows.Forms.ListBox lb_chose_rgns;
        private System.Windows.Forms.Button btn_continue;
        private System.Windows.Forms.Button btn_cancel;
        private System.Windows.Forms.Label lbl_phase;
        private System.Windows.Forms.GroupBox gb_oneoftw;
        private System.Windows.Forms.RadioButton rbtn1_2_opt2;
        private System.Windows.Forms.RadioButton rbtn1_2_opt1;
        private System.Windows.Forms.RadioButton rbtn1_3_opt3;
        private System.Windows.Forms.TextBox tb_choose_file;
    }
}

?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>?using System;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class GetCTGRegions : Form
    {
        List<string> avail = new List<string>();
        public List<string> selt = new List<string>();
        public Dictionary<string, string[]> avail_dict = new Dictionary<string, string[]>();  // hold file records (0 is empty)
        public Dictionary<string, string[]> selt_dict = new Dictionary<string, string[]>();  // hold file records (0 is empty)
        List<string> availAll = new List<string>();
        string add_item = null;
        string rem_item = null;
        string updt_XMessage = "NO";

        public GetCTGRegions(string fileName)
        {
            InitializeComponent();
            ReadPorts rp = new ReadPorts();
            rp.ReadPortsFile(fileName);
            int rgn_ct = rp.rgns_displist.Count;
            if (rgn_ct < 2)
            {
                lbl_XMessage.Text = "ZERO Valid Regions Found on File";
            }
            else
            {
                rp.rgns.ForEach(rgnX => avail.Add(rgnX));
                foreach (KeyValuePair<string, string[]> rgnD in rp.port_records_list)
                {
                    avail_dict.Add(rgnD.Key, rgnD.Value);
                }
                //                avail_dict = rp.port_records_list;
                availAll = avail.ToList();   // save copy of available regions using linq
                lb_avail_rgns.DataSource = avail;
                lb_selt_rgns.DataSource = selt;
                string tmp = rgn_ct.ToString();
                lbl_XMessage.Text = (tmp + "Valid Regions Found on File");
                updt_XMessage = "YES";
            }

        }

        private void lb_avail_rgns_SelectedValueChanged(object sender, EventArgs e)
        {
            if (lb_avail_rgns.SelectedIndex != -1)
            {
                if (updt_XMessage != "NO")  // initialize causes the XMessage to be refreshed for no reason
                {
                    add_item = (string)lb_avail_rgns.SelectedItem;
                    rem_item = null;
                    lbl_XMessage.Text = ("Available region to ADD:" + add_item);

                }
            }
        }

        private void lb_selt_rgns_SelectedValueChanged(object sender, EventArgs e)
        {
            if (lb_selt_rgns.SelectedIndex != -1)
            {
                if (updt_XMessage != "NO")  // initialize causes the XMessage to be refreshed for no reason
                {
                    rem_item = (string)lb_selt_rgns.SelectedItem;
                    add_item = null;
                    lbl_XMessage.Text = ("Selected region to REMove:" + rem_item);
                }
            }
        }

        private void btn_add_Click(object sender, EventArgs e)
        {
            if (add_item != null)
            {
                selt.Add(add_item);
                avail.Remove(add_item);
                updt_XMessage = "NO";
                lb_avail_rgns.DataSource = null;
                lb_avail_rgns.DataSource = avail;
                lb_selt_rgns.DataSource = null;
                lb_selt_rgns.DataSource = selt;
                updt_XMessage = "YES";
                add_item = null;
            }
        }
        private void btn_rem_Click(object sender, EventArgs e)
        {
            if (rem_item != null)
            {
                selt.Remove(rem_item);
                avail.Add(rem_item);
                updt_XMessage = "NO";
                lb_avail_rgns.DataSource = null;
                lb_avail_rgns.DataSource = avail;
                lb_selt_rgns.DataSource = null;
                lb_selt_rgns.DataSource = selt;
                updt_XMessage = "YES";
                rem_item = null;
            }
        }

        private void btn_reset_Click(object sender, EventArgs e)
        {
            avail.Clear();
            selt.Clear();
            lbl_XMessage.Text = null;
            avail = availAll.ToList();
            updt_XMessage = "NO";
            lb_avail_rgns.DataSource = null;
            lb_avail_rgns.DataSource = avail;
            lb_selt_rgns.DataSource = null;
            lb_selt_rgns.DataSource = selt;
            updt_XMessage = "YES";
        }

        private void btn_cancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_fin_Click(object sender, EventArgs e)
        {
            if (selt.Count < 1)
            {
                this.btn_fin.DialogResult = DialogResult.Cancel;
            }
            else
            {
                string[] regX_rec = null;
                foreach (string regX in selt)
                {
                    regX_rec = avail_dict[regX];
                    selt_dict.Add(regX, regX_rec);
                }
                this.Close();
            }
        }
    }
}?namespace RunCTG_ECI
{
    partial class GetCTGRegions
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.label3 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.btn_fin = new System.Windows.Forms.Button();
            this.btn_cancel = new System.Windows.Forms.Button();
            this.btn_reset = new System.Windows.Forms.Button();
            this.btn_remv = new System.Windows.Forms.Button();
            this.btn_add = new System.Windows.Forms.Button();
            this.lb_selt_rgns = new System.Windows.Forms.ListBox();
            this.lb_avail_rgns = new System.Windows.Forms.ListBox();
            this.lbl_XMessage = new System.Windows.Forms.Label();
            this.groupBox1.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.lbl_XMessage);
            this.groupBox1.Controls.Add(this.label3);
            this.groupBox1.Controls.Add(this.label2);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Controls.Add(this.btn_fin);
            this.groupBox1.Controls.Add(this.btn_cancel);
            this.groupBox1.Controls.Add(this.btn_reset);
            this.groupBox1.Controls.Add(this.btn_remv);
            this.groupBox1.Controls.Add(this.btn_add);
            this.groupBox1.Controls.Add(this.lb_selt_rgns);
            this.groupBox1.Controls.Add(this.lb_avail_rgns);
            this.groupBox1.Location = new System.Drawing.Point(18, 3);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(262, 322);
            this.groupBox1.TabIndex = 1;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Select Regions";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(153, 29);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(91, 13);
            this.label3.TabIndex = 9;
            this.label3.Text = "Selected Regions";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(28, 29);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(92, 13);
            this.label2.TabIndex = 8;
            this.label2.Text = "Available Regions";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(14, 16);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(184, 13);
            this.label1.TabIndex = 7;
            this.label1.Text = "Select Regions in  Order of Execution";
            // 
            // btn_fin
            // 
            this.btn_fin.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.btn_fin.Location = new System.Drawing.Point(154, 281);
            this.btn_fin.Name = "btn_fin";
            this.btn_fin.Size = new System.Drawing.Size(80, 23);
            this.btn_fin.TabIndex = 6;
            this.btn_fin.Text = "Finish/Go";
            this.btn_fin.UseVisualStyleBackColor = true;
            this.btn_fin.Click += new System.EventHandler(this.btn_fin_Click);
            // 
            // btn_cancel
            // 
            this.btn_cancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_cancel.Location = new System.Drawing.Point(31, 283);
            this.btn_cancel.Name = "btn_cancel";
            this.btn_cancel.Size = new System.Drawing.Size(80, 23);
            this.btn_cancel.TabIndex = 5;
            this.btn_cancel.Text = "Cancel/Abort";
            this.btn_cancel.UseVisualStyleBackColor = true;
            this.btn_cancel.Click += new System.EventHandler(this.btn_cancel_Click);
            // 
            // btn_reset
            // 
            this.btn_reset.Location = new System.Drawing.Point(31, 254);
            this.btn_reset.Name = "btn_reset";
            this.btn_reset.Size = new System.Drawing.Size(80, 23);
            this.btn_reset.TabIndex = 4;
            this.btn_reset.Text = "RESET All";
            this.btn_reset.UseVisualStyleBackColor = true;
            this.btn_reset.Click += new System.EventHandler(this.btn_reset_Click);
            // 
            // btn_remv
            // 
            this.btn_remv.Location = new System.Drawing.Point(155, 206);
            this.btn_remv.Name = "btn_remv";
            this.btn_remv.Size = new System.Drawing.Size(79, 23);
            this.btn_remv.TabIndex = 3;
            this.btn_remv.Text = "RemSelected";
            this.btn_remv.UseVisualStyleBackColor = true;
            this.btn_remv.Click += new System.EventHandler(this.btn_rem_Click);
            // 
            // btn_add
            // 
            this.btn_add.Location = new System.Drawing.Point(31, 206);
            this.btn_add.Name = "btn_add";
            this.btn_add.Size = new System.Drawing.Size(80, 23);
            this.btn_add.TabIndex = 1;
            this.btn_add.Text = "AddSelected";
            this.btn_add.UseVisualStyleBackColor = true;
            this.btn_add.Click += new System.EventHandler(this.btn_add_Click);
            // 
            // lb_selt_rgns
            // 
            this.lb_selt_rgns.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.lb_selt_rgns.FormattingEnabled = true;
            this.lb_selt_rgns.Location = new System.Drawing.Point(139, 44);
            this.lb_selt_rgns.Name = "lb_selt_rgns";
            this.lb_selt_rgns.Size = new System.Drawing.Size(112, 156);
            this.lb_selt_rgns.TabIndex = 0;
            this.lb_selt_rgns.SelectedValueChanged += new System.EventHandler(this.lb_selt_rgns_SelectedValueChanged);
            // 
            // lb_avail_rgns
            // 
            this.lb_avail_rgns.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.lb_avail_rgns.FormattingEnabled = true;
            this.lb_avail_rgns.Location = new System.Drawing.Point(17, 44);
            this.lb_avail_rgns.Name = "lb_avail_rgns";
            this.lb_avail_rgns.Size = new System.Drawing.Size(112, 156);
            this.lb_avail_rgns.TabIndex = 0;
            this.lb_avail_rgns.SelectedValueChanged += new System.EventHandler(this.lb_avail_rgns_SelectedValueChanged);
            // 
            // lbl_XMessage
            // 
            this.lbl_XMessage.AutoSize = true;
            this.lbl_XMessage.Location = new System.Drawing.Point(19, 232);
            this.lbl_XMessage.Name = "lbl_XMessage";
            this.lbl_XMessage.Size = new System.Drawing.Size(31, 13);
            this.lbl_XMessage.TabIndex = 10;
            this.lbl_XMessage.Text = "Initial";
            // 
            // GetCTGRegions
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(292, 337);
            this.Controls.Add(this.groupBox1);
            this.Name = "GetCTGRegions";
            this.Text = "GetCTGRegions";
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.Button btn_remv;
        private System.Windows.Forms.Button btn_add;
        private System.Windows.Forms.ListBox lb_selt_rgns;
        private System.Windows.Forms.ListBox lb_avail_rgns;
        private System.Windows.Forms.Button btn_fin;
        private System.Windows.Forms.Button btn_cancel;
        private System.Windows.Forms.Button btn_reset;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label lbl_XMessage;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class GetUIDnPW : Form
    {
        public string h_uid {get; private set;} 
        public string h_pw {get; private set;} 
        public GetUIDnPW(string uid, string pw)
        {
            InitializeComponent();
            h_uid = uid;
            h_pw = pw;
            tb_getuid.Text = uid;
            tb_getpw.Text = pw;
        }
        public GetUIDnPW()
        {
            InitializeComponent();
            h_uid = "";
            h_pw = "";
            tb_getuid.Text = h_uid;
            tb_getpw.Text = h_pw;
        }
        private void cb_seepw_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_seepw.Checked)
            {
                tb_getpw.PasswordChar = '\0';
            }
            else
            {
                tb_getpw.PasswordChar = '*'; 
            }
        }

        private void btn_getidpwfin_Click(object sender, EventArgs e)
        {
            this.h_uid = tb_getuid.Text;
            this.h_pw = tb_getpw.Text;
            this.Close();
        }

        private void btn_getidpwcan_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void tb_getuid_Leave(object sender, EventArgs e)
        {
            tb_getuid.Text = tb_getuid.Text.ToUpper();
        }

        private void tb_getpw_Leave(object sender, EventArgs e)
        {
            tb_getpw.Text = tb_getpw.Text.ToUpper();
        }
    }
}
?namespace RunCTG_ECI
{
    partial class GetUIDnPW
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_getuidnpw = new System.Windows.Forms.Label();
            this.tb_getuid = new System.Windows.Forms.TextBox();
            this.tb_getpw = new System.Windows.Forms.TextBox();
            this.lbl_getuid = new System.Windows.Forms.Label();
            this.lbl_getpw = new System.Windows.Forms.Label();
            this.cb_seepw = new System.Windows.Forms.CheckBox();
            this.btn_getidpwfin = new System.Windows.Forms.Button();
            this.btn_getidpwcan = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // lbl_getuidnpw
            // 
            this.lbl_getuidnpw.AutoSize = true;
            this.lbl_getuidnpw.Location = new System.Drawing.Point(20, 9);
            this.lbl_getuidnpw.Name = "lbl_getuidnpw";
            this.lbl_getuidnpw.Size = new System.Drawing.Size(124, 13);
            this.lbl_getuidnpw.TabIndex = 0;
            this.lbl_getuidnpw.Text = "Enter UID and Password";
            // 
            // tb_getuid
            // 
            this.tb_getuid.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_getuid.Location = new System.Drawing.Point(24, 46);
            this.tb_getuid.MaxLength = 8;
            this.tb_getuid.Name = "tb_getuid";
            this.tb_getuid.Size = new System.Drawing.Size(100, 23);
            this.tb_getuid.TabIndex = 1;
            this.tb_getuid.Tag = "Enter User ID";
            this.tb_getuid.Leave += new System.EventHandler(this.tb_getuid_Leave);
            // 
            // tb_getpw
            // 
            this.tb_getpw.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_getpw.Location = new System.Drawing.Point(24, 88);
            this.tb_getpw.MaxLength = 8;
            this.tb_getpw.Name = "tb_getpw";
            this.tb_getpw.PasswordChar = '*';
            this.tb_getpw.Size = new System.Drawing.Size(100, 23);
            this.tb_getpw.TabIndex = 2;
            this.tb_getpw.Tag = "EnterPassword";
            this.tb_getpw.Leave += new System.EventHandler(this.tb_getpw_Leave);
            // 
            // lbl_getuid
            // 
            this.lbl_getuid.AutoSize = true;
            this.lbl_getuid.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_getuid.Location = new System.Drawing.Point(21, 30);
            this.lbl_getuid.Name = "lbl_getuid";
            this.lbl_getuid.Size = new System.Drawing.Size(39, 13);
            this.lbl_getuid.TabIndex = 3;
            this.lbl_getuid.Text = "UserID";
            // 
            // lbl_getpw
            // 
            this.lbl_getpw.AutoSize = true;
            this.lbl_getpw.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_getpw.Location = new System.Drawing.Point(21, 72);
            this.lbl_getpw.Name = "lbl_getpw";
            this.lbl_getpw.Size = new System.Drawing.Size(56, 13);
            this.lbl_getpw.TabIndex = 4;
            this.lbl_getpw.Text = " Password";
            // 
            // cb_seepw
            // 
            this.cb_seepw.AutoSize = true;
            this.cb_seepw.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.cb_seepw.Location = new System.Drawing.Point(131, 88);
            this.cb_seepw.Name = "cb_seepw";
            this.cb_seepw.Size = new System.Drawing.Size(136, 17);
            this.cb_seepw.TabIndex = 5;
            this.cb_seepw.Text = "Check to see Password";
            this.cb_seepw.UseVisualStyleBackColor = true;
            this.cb_seepw.CheckedChanged += new System.EventHandler(this.cb_seepw_CheckedChanged);
            // 
            // btn_getidpwfin
            // 
            this.btn_getidpwfin.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.btn_getidpwfin.Location = new System.Drawing.Point(24, 142);
            this.btn_getidpwfin.Name = "btn_getidpwfin";
            this.btn_getidpwfin.Size = new System.Drawing.Size(75, 23);
            this.btn_getidpwfin.TabIndex = 6;
            this.btn_getidpwfin.Text = "Finish/Go";
            this.btn_getidpwfin.UseVisualStyleBackColor = true;
            this.btn_getidpwfin.Click += new System.EventHandler(this.btn_getidpwfin_Click);
            // 
            // btn_getidpwcan
            // 
            this.btn_getidpwcan.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_getidpwcan.Location = new System.Drawing.Point(160, 142);
            this.btn_getidpwcan.Name = "btn_getidpwcan";
            this.btn_getidpwcan.Size = new System.Drawing.Size(75, 23);
            this.btn_getidpwcan.TabIndex = 7;
            this.btn_getidpwcan.Text = "Cancel";
            this.btn_getidpwcan.UseVisualStyleBackColor = true;
            this.btn_getidpwcan.Click += new System.EventHandler(this.btn_getidpwcan_Click);
            // 
            // GetUIDnPW
            // 
            this.AcceptButton = this.btn_getidpwfin;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(293, 199);
            this.Controls.Add(this.btn_getidpwcan);
            this.Controls.Add(this.btn_getidpwfin);
            this.Controls.Add(this.cb_seepw);
            this.Controls.Add(this.lbl_getpw);
            this.Controls.Add(this.lbl_getuid);
            this.Controls.Add(this.tb_getpw);
            this.Controls.Add(this.tb_getuid);
            this.Controls.Add(this.lbl_getuidnpw);
            this.Name = "GetUIDnPW";
            this.Text = "getUIDnPW";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_getuidnpw;
        private System.Windows.Forms.TextBox tb_getuid;
        private System.Windows.Forms.TextBox tb_getpw;
        private System.Windows.Forms.Label lbl_getuid;
        private System.Windows.Forms.Label lbl_getpw;
        private System.Windows.Forms.CheckBox cb_seepw;
        private System.Windows.Forms.Button btn_getidpwfin;
        private System.Windows.Forms.Button btn_getidpwcan;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
//using System.ComponentModel;
//using System.Data;
//using System.Drawing;
using System.Text.RegularExpressions;
using System.Linq;
using System.Text;      //Encoding utility
//using System.Threading.Tasks;
using System.Windows.Forms;
using RunCTG_ECI;

namespace RunCTG_ECI
{
    public partial class get_CA : Form
    {
        public string get_ca_data {get; set;}   
        public int get_ca_l { get; set; }
        public int get_data_count { get; set; }
        private int h_cal = 0;
        private string h_ca = "";
        private src_hdr h_src_hdr = new src_hdr();  // hold ref to src_hdr new in iterateseltrgns
        private List<src_data> h_src_list;          // hold ref to iterateseltrgns src_list
//        private src_data cur_src_data = new src_data();  // our working src_data instance
//                                                          which we will add to src_list and
//                                                          pass back to iterateseltrgns
        private string b4_tb_chg = "";
        private bool ok_leave = true;
        private bool ok_X_val = false;
        private bool tb_chg = false;
        private char data_encode = 'a'; //request: 'a' 'x' enter data as text or hex
        private char sv_encode = 'e'; // save request: 'a' 'e' 'x' save as (CP conv for e)
        private bool rb_trigger = false;
        private cvt_x_A_E cvt_x_txt = new cvt_x_A_E();


        public get_CA(string rgn_cur, List<src_data> src_list, src_hdr rgn_hdr)
        {
            InitializeComponent();
            get_data_count = 0;  // keep track of individual request/response CA or CnC items
            //                   // append to the 'key' of the each region when used by
            //                   // IterateSelnRgns - src_data_req and resp items
            //                   // making each unique. 
            //                   // subsequently, the 'key' is rgn||repeat_cnt||get_data_count
            //                   //   where the repeat_cnt and get_data_count are converted to 
            //                   //   string data and concat with the rgn.
            lbl_get_rgn.Text = rgn_cur;
            h_src_hdr = rgn_hdr;       // set ref to src_hdr passed from  iterateseltrgns
            h_src_list = src_list;     // set ref to src_list passed from iterateseltrgns
            lbl_emsg.Text = "Enter Commarea Data and Transaction properties";
        }

        private void btn_cancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_reset_Click(object sender, EventArgs e)
        {
            get_ca_l = h_cal;
            get_ca_data = h_ca;
 //           tb_get_ca.MaxLength = h_cal;
            tb_get_ca.Text = h_ca;
            spin_cal.Value = h_cal;
            lbl_emsg.Text = "Reset:Enter CA data and Trans Properties";
        }

        private void btn_continue_Click(object sender, EventArgs e)
        {
            bool btn_err = false;
            byte[] ca_b_ary = new byte[1] {0};
            string s = tb_get_ca.Text;
            int s_l = s.Length;
            if (data_encode == 'x') s_l /= 2;
            int p_l = decimal.ToInt32(spin_cal.Value);
            if (p_l < s_l)
            {
                lbl_emsg.Text = "Select CAL must be GE Actual CAL";
                btn_err = true;
            }
            else
            {
                get_ca_l = p_l;
                switch (sv_encode) {
                    case 'a': 
                        {
                        get_ca_data = cvt_x_txt.A_str.PadRight('\0');
                        Array.Resize(ref ca_b_ary, get_ca_data.Length); 
                        ca_b_ary = Encoding.ASCII.GetBytes(get_ca_data);
                        break;
                        }
                    case 'e': 
                        {
                        get_ca_data = cvt_x_txt.E_str.PadRight('\0');
                        Array.Resize(ref ca_b_ary, get_ca_data.Length);
                        ca_b_ary = RunECI_utils.ToBytes(get_ca_data);
//                        ca_b_ary = Encoding.GetEncoding(037).GetBytes(get_ca_data);

                        break;
                        }
                    case 'x': 
                        {
                        get_ca_data = cvt_x_txt.X_str;
                        byte[] t_ca_b_ary = RunECI_utils.ToBytes(cvt_x_txt.X_str);
                        Array.Resize(ref ca_b_ary, t_ca_b_ary.Length);
                        Array.Copy(t_ca_b_ary, ca_b_ary, t_ca_b_ary.Length);
                        break;
                        }
                    default:
                        {
                        lbl_emsg.Text = "RadioBtn SaveAs not 'a','e','x'...???";
                        btn_err = true;
                        break;
                        }
                    }
            }
            if (tb_pgm_nm.Text.TrimEnd(' ').Length == 0)
            {
                lbl_emsg.Text = "Program Name CANNOT be blank";
                btn_err = true;
            }
            else
            {
                h_src_hdr.src_hdr_pgm_nm = tb_pgm_nm.Text.ToUpper();
            }
            if (tb_tranid.Text.TrimEnd(' ').Length == 0)
            {
                lbl_emsg.Text = "Transid CANNOT be blank";
                btn_err = true;
            }
            else
            {
                h_src_hdr.src_hdr_tranid = tb_tranid.Text;
            }
            if (!btn_err)
            {
                src_data cur_src_data = new src_data();
                cur_src_data.src_type = 'c';
                cur_src_data.src_fmt_data_encode = sv_encode;
                cur_src_data.src_repeat_ct = "00";
                cur_src_data.src_name = "DFHCOMMAREA";
                cur_src_data.src_l = get_ca_l;
                cur_src_data.src_eci_retcd = "0";
                cur_src_data.b_src_ary = ca_b_ary;
                if (get_ca_l > cur_src_data.b_src_ary.Length)
                {
                    Array.Resize(ref cur_src_data.b_src_ary, get_ca_l);
                }
                else
                {
                    if (get_ca_l < cur_src_data.b_src_ary.Length)
                    {
                        cur_src_data.src_l = cur_src_data.b_src_ary.Length;
                    }
                }

                h_src_list.Add(cur_src_data);

                h_src_hdr.src_hdr_repeat = decimal.ToInt32(spin_repeat.Value);
                h_src_hdr.src_hdr_wait = decimal.ToInt32(spin_wait.Value);
                h_src_hdr.src_hdr_eci_flow = decimal.ToInt32(spin_mxflow.Value);
                h_src_hdr.src_hdr_eci_to = decimal.ToInt32(spin_eci_to.Value);
                if (this.chk_Xtrn.Checked)
                {
                    h_src_hdr.src_hdr_eci_X_tran = 'Y';
                }
                else
                {
                    h_src_hdr.src_hdr_eci_X_tran = 'N';
                }
                this.DialogResult = System.Windows.Forms.DialogResult.OK;
                this.Close();
            }
        }

        private void spin_cal_ValueChanged(object sender, EventArgs e)
        {
            int tmp = decimal.ToInt32(spin_cal.Value);
            string s = tb_get_ca.Text;
            int s_l = s.Length;
            lbl_act_cal.Text = string.Concat("Actual CAL:", s_l.ToString());
            if (s_l > tmp)
            {
                lbl_emsg.Text = string.Concat("Warning: Actual Text length:", s_l.ToString(),  ":GT CA specified Length.");
            } else {
                lbl_emsg.Text = "";
            }
        }

        private void get_CA_Shown(object sender, EventArgs e)
        {
            h_cal = get_ca_l;           // set in parent xx.get_ca_data="";
            h_ca = get_ca_data;         // set in parent xx.get_ca_l=0;
            //           tb_get_ca.MaxLength = h_cal;    // initial setting
            tb_get_ca.Text = h_ca;
            spin_cal.Value = h_cal;
        }

        private void tb_pgm_nm_Leave(object sender, EventArgs e)
        {
            tb_pgm_nm.Text = tb_pgm_nm.Text.ToUpper();
        }

        private void tb_tranid_Leave(object sender, EventArgs e)
        {
            tb_tranid.Text = tb_tranid.Text.ToUpper();
        }

        private void sv_radioButtons_CheckedChanged(object sender, EventArgs e)
        {
           if (rbtn_sv_A.Checked)
            {
                sv_encode = 'a';
            }
            else if (rbtn_sv_E.Checked)
            {
                sv_encode = 'e';
            }
            else if (rbtn_sv_X.Checked)
            {
                sv_encode = 'x';
            }
        }

        private void radioButtons_CheckedChanged(object sender, EventArgs e)
        {
            // chg status of either rb causes (inline) two iterations of this method
            //  and the first pass does cause a chg to the tb
            //  but the second pass does not trigger a real chg in value
            //  so the rb_trigger is only useful on the first pass
            // subsequently, reset it to false at exit from this
            rb_trigger = true;
            if (rbtn_A.Checked)
            {
                data_encode = 'a';
                tb_get_ca.Text = cvt_x_txt.A_str;
                tb_A_X_ca.Text = cvt_x_txt.X_str;
                lbl_emsg.Text = "Enter Text values in TextBox";
                //                tb_Avals.Visible = true;
                //                tb_get_ca.Visible = false;
            }
            else if (rbtn_X.Checked)
            {
                data_encode = 'x';
                tb_get_ca.Text = cvt_x_txt.X_str;
                tb_A_X_ca.Text = cvt_x_txt.A_str;
                lbl_emsg.Text = "Enter Hex values in TextBox";
                //                tb_get_ca.Visible = true;
                //                tb_Avals.Visible = false;
            }
            // this will allow the 
            rb_trigger = false;
        }

        private void tb_get_ca_KeyDown(object sender, KeyEventArgs e)
        {
            //Using Regular Expressions
            //           if (!System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[0123456789abcdef]"))
            //             e.Handled = true;            //Allow navigation keyboard arrows
            if (data_encode == 'a')
            {
                e.SuppressKeyPress = false;
                return;
            }

            b4_tb_chg = tb_get_ca.Text;
            ok_X_val = false;
            switch (e.KeyCode)
            {
                case Keys.Up:
                case Keys.Down:
                case Keys.Left:
                case Keys.Right:
                case Keys.Tab:
                case Keys.Back:
                case Keys.Delete:
                case Keys.EraseEof:

                    //     case Keys.PageUp:
                    //     case Keys.PageDown:
                    e.SuppressKeyPress = false;
                    return;
                default:
                    break;
            }
            //Block non-number characters
            char currentKey = (char)e.KeyCode;
            bool modifier = e.Control || e.Alt || e.Shift;
            bool nonNumber = char.IsLetter(currentKey) || char.IsSymbol(currentKey) || char.IsWhiteSpace(currentKey) || char.IsPunctuation(currentKey);
            string h_cur_key = currentKey.ToString();
            if (data_encode == 'x')
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(h_cur_key, "[0123456789ABCDEF]"))
                {
                    lbl_emsg.Text = string.Concat("Invalid hex value:(", h_cur_key, ") ignored.");
                    e.SuppressKeyPress = true;
                    e.Handled = true;
                    return;
                }
            }

            //Handle pasted Text
            if (e.Control && e.KeyCode == Keys.V)
            {
                //Preview paste data (removing non-number characters)
                string pasteText = Clipboard.GetText();
                string strippedText = "";
                string s = "";
                int i = 0;
                for (i = 0; i < pasteText.Length; i++)
                {
                    s = pasteText.Substring(i, 1);
                    if (!System.Text.RegularExpressions.Regex.IsMatch(s, "[/r/n]"))
                    {
                        strippedText += s;
                    }
                }
                pasteText = strippedText;
                if (data_encode == 'x')
                {
                    strippedText = "";
                    for (i = 0; i < pasteText.Length; i++)
                    {
                        s = pasteText.Substring(i, 1);
                        if (!System.Text.RegularExpressions.Regex.IsMatch(s, "[0123456789ABCDEF]"))
                        {
                            lbl_emsg.Text = "Invalid hex value paste attempt.";
                            e.SuppressKeyPress = true;
                            e.Handled = true;
                            return;
                        }
                        strippedText += s;
                        //                    if (char.IsDigit(pasteText[i]))
                        //                      strippedText += pasteText[i].ToString();
                    }
                }
                if (strippedText != pasteText)
                {
                    //There were non-numbers in the pasted text
                    e.SuppressKeyPress = true;
                    /*
                    //OPTIONAL: Manually insert text stripped of non-numbers
                    TextBox me = (TextBox)sender;
                    int start = me.SelectionStart;
                    string newTxt = me.Text;
                    newTxt = newTxt.Remove(me.SelectionStart, me.SelectionLength); //remove highlighted text
                    newTxt = newTxt.Insert(me.SelectionStart, strippedText); //paste
                    me.Text = newTxt;
                    me.SelectionStart = start + strippedText.Length;
                    */
                }
                else
                {
                    e.SuppressKeyPress = false;
                    TextBox me = (TextBox)sender;
                    int start = me.SelectionStart;
                    string newTxt = me.Text;
                    newTxt = newTxt.Remove(me.SelectionStart, me.SelectionLength); //remove highlighted text
                    newTxt = newTxt.Insert(me.SelectionStart, strippedText); //paste
                    me.Text = newTxt;
                    me.SelectionStart = start + strippedText.Length;

                }
            }
            ok_X_val = true;
            lbl_emsg.Text = "---";
        }

        private void tb_get_ca_TextChanged(object sender, EventArgs e)
        {
            if (rb_trigger)  // rb_trigger donotes that this change event due to 
            //               switch view to x or a - we ignore event
            {
                rb_trigger = false; // reset so real chg event is processed
                return;
            }
            if (tb_chg)  // 
            {
                return;
            }
            else
            {

                tb_chg = true;
                string pattern = "\r\n";
                string replacement = "";
                Regex rgx = new Regex(pattern);
                string tmp = rgx.Replace(tb_get_ca.Text, replacement);
                if (tmp != tb_get_ca.Text)
                {
                    ok_X_val = true;
                    tb_get_ca.Text = tmp;
                }
                tb_chg = false;
            }
            //            cvt_x_A_E cvt_x_txt = new cvt_x_A_E();
            int rc = 0;
            if (data_encode == 'x')
            {
                if (ok_X_val)
                {
                    //                    // lbl_Xtb.Text = tb_get_ca.Text;
                    // lbl_Xtb.Text = tb_get_ca.Text;
                    b4_tb_chg = tb_get_ca.Text;
                    ok_X_val = false;
                    if ((b4_tb_chg.Length % 2) != 0) return;
                    cvt_x_txt.X_str = b4_tb_chg;
                    rc = RunECI_utils.cvt_x2A_E(cvt_x_txt);
                    if (rc == 0)
                    {
                        tb_A_X_ca.Text = cvt_x_txt.A_str;
                        tb_E_ca.Text = cvt_x_txt.E_str;
                    }
                    return;
                }
                string s = tb_get_ca.Text;
                if (s == b4_tb_chg) return;
                string t = "";
                for (int i = 0; i < s.Length; i++)
                {
                    t = s.Substring(i, 1).ToUpper();
                    if (!System.Text.RegularExpressions.Regex.IsMatch(t, "[0123456789ABCDEF\r\n]"))
                    {
                        tb_get_ca.Text = b4_tb_chg;
                        lbl_emsg.Text = "Invalid hex value paste attempt. Resetting";
                        return;
                    }
                }
                // lbl_Xtb.Text = tb_get_ca.Text;
               b4_tb_chg = tb_get_ca.Text;
                lbl_emsg.Text = "---";
                if ((b4_tb_chg.Length % 2) != 0) return;
                cvt_x_txt.X_str = b4_tb_chg;
                rc = RunECI_utils.cvt_x2A_E(cvt_x_txt);
                if (rc == 0)
                {
                    tb_A_X_ca.Text = cvt_x_txt.A_str;
                    tb_E_ca.Text = cvt_x_txt.E_str;
                }
            }
            else   // ASCII mode
            {
                tb_A_X_ca.Text = tb_get_ca.Text;
                b4_tb_chg = tb_get_ca.Text;
                //                ok_X_val = false;
                cvt_x_txt.A_str = b4_tb_chg;
                byte[] b_x_ary = Encoding.ASCII.GetBytes(b4_tb_chg);
                cvt_x_txt.X_str = RunECI_utils.ToHexStr(b_x_ary);
                byte[] bE_x_ary = Encoding.GetEncoding(037).GetBytes(b4_tb_chg);
                cvt_x_txt.E_str = RunECI_utils.ToHexStr(bE_x_ary);
                tb_A_X_ca.Text = cvt_x_txt.X_str;
                tb_E_ca.Text = cvt_x_txt.E_str;
                // lbl_Xtb.Text = cvt_x_txt.X_str;
                tb_chg = false;
                return;

            }

        }

        private void tb_get_ca_Leave(object sender, EventArgs e)
        {
            if (data_encode == 'x')
            {
                int s_l = tb_get_ca.Text.Length;
                if ((s_l % 2) != 0)
                {
                    lbl_emsg.Text = string.Concat("Hex String of length:", s_l.ToString(), " is not even and can not hold x'00' pairs.");
                    ok_leave = false;

                }
                else
                {
                    lbl_emsg.Text = "Hex:Validated hex x'00' pairs";
                    ok_leave = true;
                }
            }
            else
            {
                lbl_emsg.Text = "ASCII: contains Valid hex x'00' pairs";
                ok_leave = true;

            }

        }

        private void tb_get_ca_Validating(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (!ok_leave)
            {
                e.Cancel = true;
            }

        }

        private void get_CA_Load(object sender, EventArgs e)
        {

        }
    }
}
?namespace RunCTG_ECI
{
    partial class get_CA
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_get_CA = new System.Windows.Forms.Label();
            this.lbl_get_rgn = new System.Windows.Forms.Label();
            this.lbl_cal = new System.Windows.Forms.Label();
            this.tb_get_ca = new System.Windows.Forms.TextBox();
            this.btn_continue = new System.Windows.Forms.Button();
            this.btn_reset = new System.Windows.Forms.Button();
            this.btn_cancel = new System.Windows.Forms.Button();
            this.lbl_emsg = new System.Windows.Forms.Label();
            this.spin_cal = new System.Windows.Forms.NumericUpDown();
            this.tb_pgm_nm = new System.Windows.Forms.TextBox();
            this.lbl_pgm_nm = new System.Windows.Forms.Label();
            this.lbl_tranid = new System.Windows.Forms.Label();
            this.tb_tranid = new System.Windows.Forms.TextBox();
            this.spin_mxflow = new System.Windows.Forms.NumericUpDown();
            this.lbl_mxflow = new System.Windows.Forms.Label();
            this.lbl_repeat = new System.Windows.Forms.Label();
            this.spin_repeat = new System.Windows.Forms.NumericUpDown();
            this.lbl_wait = new System.Windows.Forms.Label();
            this.spin_wait = new System.Windows.Forms.NumericUpDown();
            this.lbl_eci_to = new System.Windows.Forms.Label();
            this.spin_eci_to = new System.Windows.Forms.NumericUpDown();
            this.lbl_Xtrn = new System.Windows.Forms.Label();
            this.chk_Xtrn = new System.Windows.Forms.CheckBox();
            this.lbl_act_cal = new System.Windows.Forms.Label();
            this.tb_A_X_ca = new System.Windows.Forms.TextBox();
            this.tb_E_ca = new System.Windows.Forms.TextBox();
            this.gb_sv_A_E_X = new System.Windows.Forms.GroupBox();
            this.rbtn_sv_X = new System.Windows.Forms.RadioButton();
            this.rbtn_sv_E = new System.Windows.Forms.RadioButton();
            this.rbtn_sv_A = new System.Windows.Forms.RadioButton();
            this.gb_A_X = new System.Windows.Forms.GroupBox();
            this.rbtn_X = new System.Windows.Forms.RadioButton();
            this.rbtn_A = new System.Windows.Forms.RadioButton();
            ((System.ComponentModel.ISupportInitialize)(this.spin_cal)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_mxflow)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_repeat)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_wait)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_eci_to)).BeginInit();
            this.gb_sv_A_E_X.SuspendLayout();
            this.gb_A_X.SuspendLayout();
            this.SuspendLayout();
            // 
            // lbl_get_CA
            // 
            this.lbl_get_CA.AutoSize = true;
            this.lbl_get_CA.Location = new System.Drawing.Point(13, 13);
            this.lbl_get_CA.Name = "lbl_get_CA";
            this.lbl_get_CA.Size = new System.Drawing.Size(200, 13);
            this.lbl_get_CA.TabIndex = 0;
            this.lbl_get_CA.Text = "Enter the source COMMAREA for region:";
            // 
            // lbl_get_rgn
            // 
            this.lbl_get_rgn.AutoSize = true;
            this.lbl_get_rgn.Location = new System.Drawing.Point(43, 26);
            this.lbl_get_rgn.Name = "lbl_get_rgn";
            this.lbl_get_rgn.Size = new System.Drawing.Size(49, 13);
            this.lbl_get_rgn.TabIndex = 1;
            this.lbl_get_rgn.Text = "REGION";
            // 
            // lbl_cal
            // 
            this.lbl_cal.AutoEllipsis = true;
            this.lbl_cal.AutoSize = true;
            this.lbl_cal.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_cal.Location = new System.Drawing.Point(13, 121);
            this.lbl_cal.MaximumSize = new System.Drawing.Size(100, 0);
            this.lbl_cal.Name = "lbl_cal";
            this.lbl_cal.Size = new System.Drawing.Size(69, 13);
            this.lbl_cal.TabIndex = 3;
            this.lbl_cal.Text = "Selet CA Lng";
            // 
            // tb_get_ca
            // 
            this.tb_get_ca.AllowDrop = true;
            this.tb_get_ca.Font = new System.Drawing.Font("Consolas", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_get_ca.Location = new System.Drawing.Point(17, 238);
            this.tb_get_ca.MaxLength = 32400;
            this.tb_get_ca.Multiline = true;
            this.tb_get_ca.Name = "tb_get_ca";
            this.tb_get_ca.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_get_ca.Size = new System.Drawing.Size(331, 101);
            this.tb_get_ca.TabIndex = 4;
            this.tb_get_ca.TextChanged += new System.EventHandler(this.tb_get_ca_TextChanged);
            this.tb_get_ca.KeyDown += new System.Windows.Forms.KeyEventHandler(this.tb_get_ca_KeyDown);
            this.tb_get_ca.Leave += new System.EventHandler(this.tb_get_ca_Leave);
            this.tb_get_ca.Validating += new System.ComponentModel.CancelEventHandler(this.tb_get_ca_Validating);
            // 
            // btn_continue
            // 
            this.btn_continue.Location = new System.Drawing.Point(17, 558);
            this.btn_continue.Name = "btn_continue";
            this.btn_continue.Size = new System.Drawing.Size(75, 23);
            this.btn_continue.TabIndex = 5;
            this.btn_continue.Text = "Continue";
            this.btn_continue.UseVisualStyleBackColor = true;
            this.btn_continue.Click += new System.EventHandler(this.btn_continue_Click);
            // 
            // btn_reset
            // 
            this.btn_reset.Location = new System.Drawing.Point(98, 558);
            this.btn_reset.Name = "btn_reset";
            this.btn_reset.Size = new System.Drawing.Size(75, 23);
            this.btn_reset.TabIndex = 6;
            this.btn_reset.Text = "Reset";
            this.btn_reset.UseVisualStyleBackColor = true;
            this.btn_reset.Click += new System.EventHandler(this.btn_reset_Click);
            // 
            // btn_cancel
            // 
            this.btn_cancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_cancel.Location = new System.Drawing.Point(186, 558);
            this.btn_cancel.Name = "btn_cancel";
            this.btn_cancel.Size = new System.Drawing.Size(75, 23);
            this.btn_cancel.TabIndex = 7;
            this.btn_cancel.Text = "Cancel";
            this.btn_cancel.UseVisualStyleBackColor = true;
            this.btn_cancel.Click += new System.EventHandler(this.btn_cancel_Click);
            // 
            // lbl_emsg
            // 
            this.lbl_emsg.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_emsg.Location = new System.Drawing.Point(18, 535);
            this.lbl_emsg.MaximumSize = new System.Drawing.Size(330, 20);
            this.lbl_emsg.MinimumSize = new System.Drawing.Size(20, 20);
            this.lbl_emsg.Name = "lbl_emsg";
            this.lbl_emsg.Size = new System.Drawing.Size(330, 20);
            this.lbl_emsg.TabIndex = 8;
            this.lbl_emsg.Text = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
            // 
            // spin_cal
            // 
            this.spin_cal.Location = new System.Drawing.Point(97, 119);
            this.spin_cal.Maximum = new decimal(new int[] {
            32765,
            0,
            0,
            0});
            this.spin_cal.Name = "spin_cal";
            this.spin_cal.Size = new System.Drawing.Size(79, 20);
            this.spin_cal.TabIndex = 9;
            this.spin_cal.ValueChanged += new System.EventHandler(this.spin_cal_ValueChanged);
            // 
            // tb_pgm_nm
            // 
            this.tb_pgm_nm.Location = new System.Drawing.Point(97, 40);
            this.tb_pgm_nm.MaxLength = 8;
            this.tb_pgm_nm.Name = "tb_pgm_nm";
            this.tb_pgm_nm.Size = new System.Drawing.Size(75, 20);
            this.tb_pgm_nm.TabIndex = 10;
            this.tb_pgm_nm.Text = "UCEMPINR";
            this.tb_pgm_nm.Leave += new System.EventHandler(this.tb_pgm_nm_Leave);
            // 
            // lbl_pgm_nm
            // 
            this.lbl_pgm_nm.AutoSize = true;
            this.lbl_pgm_nm.Location = new System.Drawing.Point(18, 46);
            this.lbl_pgm_nm.Name = "lbl_pgm_nm";
            this.lbl_pgm_nm.Size = new System.Drawing.Size(74, 13);
            this.lbl_pgm_nm.TabIndex = 11;
            this.lbl_pgm_nm.Text = "ProgramName";
            // 
            // lbl_tranid
            // 
            this.lbl_tranid.AutoSize = true;
            this.lbl_tranid.Location = new System.Drawing.Point(45, 65);
            this.lbl_tranid.Name = "lbl_tranid";
            this.lbl_tranid.Size = new System.Drawing.Size(45, 13);
            this.lbl_tranid.TabIndex = 12;
            this.lbl_tranid.Text = "TransID";
            // 
            // tb_tranid
            // 
            this.tb_tranid.Location = new System.Drawing.Point(97, 62);
            this.tb_tranid.MaxLength = 4;
            this.tb_tranid.Name = "tb_tranid";
            this.tb_tranid.Size = new System.Drawing.Size(40, 20);
            this.tb_tranid.TabIndex = 13;
            this.tb_tranid.Text = "UXXX";
            this.tb_tranid.Leave += new System.EventHandler(this.tb_tranid_Leave);
            // 
            // spin_mxflow
            // 
            this.spin_mxflow.Location = new System.Drawing.Point(97, 88);
            this.spin_mxflow.Maximum = new decimal(new int[] {
            5,
            0,
            0,
            0});
            this.spin_mxflow.Name = "spin_mxflow";
            this.spin_mxflow.Size = new System.Drawing.Size(40, 20);
            this.spin_mxflow.TabIndex = 14;
            this.spin_mxflow.Value = new decimal(new int[] {
            3,
            0,
            0,
            0});
            // 
            // lbl_mxflow
            // 
            this.lbl_mxflow.AutoSize = true;
            this.lbl_mxflow.Location = new System.Drawing.Point(18, 95);
            this.lbl_mxflow.Name = "lbl_mxflow";
            this.lbl_mxflow.Size = new System.Drawing.Size(72, 13);
            this.lbl_mxflow.TabIndex = 15;
            this.lbl_mxflow.Text = "MaxFlows 0-5";
            // 
            // lbl_repeat
            // 
            this.lbl_repeat.AutoSize = true;
            this.lbl_repeat.Location = new System.Drawing.Point(187, 40);
            this.lbl_repeat.Name = "lbl_repeat";
            this.lbl_repeat.Size = new System.Drawing.Size(66, 13);
            this.lbl_repeat.TabIndex = 16;
            this.lbl_repeat.Text = "Repeat 0-99";
            // 
            // spin_repeat
            // 
            this.spin_repeat.Location = new System.Drawing.Point(267, 35);
            this.spin_repeat.Maximum = new decimal(new int[] {
            99,
            0,
            0,
            0});
            this.spin_repeat.Name = "spin_repeat";
            this.spin_repeat.Size = new System.Drawing.Size(43, 20);
            this.spin_repeat.TabIndex = 17;
            // 
            // lbl_wait
            // 
            this.lbl_wait.AutoSize = true;
            this.lbl_wait.Location = new System.Drawing.Point(187, 62);
            this.lbl_wait.Name = "lbl_wait";
            this.lbl_wait.Size = new System.Drawing.Size(70, 13);
            this.lbl_wait.TabIndex = 18;
            this.lbl_wait.Text = "Wait 0-9(sec)";
            // 
            // spin_wait
            // 
            this.spin_wait.Location = new System.Drawing.Point(267, 62);
            this.spin_wait.Maximum = new decimal(new int[] {
            9,
            0,
            0,
            0});
            this.spin_wait.Name = "spin_wait";
            this.spin_wait.Size = new System.Drawing.Size(34, 20);
            this.spin_wait.TabIndex = 19;
            // 
            // lbl_eci_to
            // 
            this.lbl_eci_to.AutoSize = true;
            this.lbl_eci_to.Location = new System.Drawing.Point(182, 88);
            this.lbl_eci_to.Name = "lbl_eci_to";
            this.lbl_eci_to.Size = new System.Drawing.Size(75, 13);
            this.lbl_eci_to.TabIndex = 20;
            this.lbl_eci_to.Text = "ECI TOut 0-60";
            // 
            // spin_eci_to
            // 
            this.spin_eci_to.Location = new System.Drawing.Point(267, 88);
            this.spin_eci_to.Maximum = new decimal(new int[] {
            60,
            0,
            0,
            0});
            this.spin_eci_to.Name = "spin_eci_to";
            this.spin_eci_to.Size = new System.Drawing.Size(43, 20);
            this.spin_eci_to.TabIndex = 21;
            // 
            // lbl_Xtrn
            // 
            this.lbl_Xtrn.AutoSize = true;
            this.lbl_Xtrn.Location = new System.Drawing.Point(182, 118);
            this.lbl_Xtrn.Name = "lbl_Xtrn";
            this.lbl_Xtrn.Size = new System.Drawing.Size(75, 13);
            this.lbl_Xtrn.TabIndex = 22;
            this.lbl_Xtrn.Text = "Extended Y/N";
            // 
            // chk_Xtrn
            // 
            this.chk_Xtrn.AutoSize = true;
            this.chk_Xtrn.Location = new System.Drawing.Point(267, 114);
            this.chk_Xtrn.Name = "chk_Xtrn";
            this.chk_Xtrn.Size = new System.Drawing.Size(87, 17);
            this.chk_Xtrn.TabIndex = 24;
            this.chk_Xtrn.Text = "(checked=Y)";
            this.chk_Xtrn.UseVisualStyleBackColor = true;
            // 
            // lbl_act_cal
            // 
            this.lbl_act_cal.AutoSize = true;
            this.lbl_act_cal.Location = new System.Drawing.Point(182, 131);
            this.lbl_act_cal.Name = "lbl_act_cal";
            this.lbl_act_cal.Size = new System.Drawing.Size(63, 13);
            this.lbl_act_cal.TabIndex = 25;
            this.lbl_act_cal.Text = "Actual CAL:";
            // 
            // tb_A_X_ca
            // 
            this.tb_A_X_ca.BackColor = System.Drawing.SystemColors.Control;
            this.tb_A_X_ca.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.tb_A_X_ca.Font = new System.Drawing.Font("Consolas", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_A_X_ca.Location = new System.Drawing.Point(16, 345);
            this.tb_A_X_ca.MaxLength = 32400;
            this.tb_A_X_ca.Multiline = true;
            this.tb_A_X_ca.Name = "tb_A_X_ca";
            this.tb_A_X_ca.ReadOnly = true;
            this.tb_A_X_ca.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_A_X_ca.Size = new System.Drawing.Size(331, 90);
            this.tb_A_X_ca.TabIndex = 27;
            // 
            // tb_E_ca
            // 
            this.tb_E_ca.BackColor = System.Drawing.SystemColors.Control;
            this.tb_E_ca.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.tb_E_ca.Font = new System.Drawing.Font("Consolas", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_E_ca.Location = new System.Drawing.Point(17, 441);
            this.tb_E_ca.MaxLength = 32400;
            this.tb_E_ca.Multiline = true;
            this.tb_E_ca.Name = "tb_E_ca";
            this.tb_E_ca.ReadOnly = true;
            this.tb_E_ca.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_E_ca.Size = new System.Drawing.Size(331, 90);
            this.tb_E_ca.TabIndex = 28;
            // 
            // gb_sv_A_E_X
            // 
            this.gb_sv_A_E_X.Controls.Add(this.rbtn_sv_X);
            this.gb_sv_A_E_X.Controls.Add(this.rbtn_sv_E);
            this.gb_sv_A_E_X.Controls.Add(this.rbtn_sv_A);
            this.gb_sv_A_E_X.Location = new System.Drawing.Point(21, 147);
            this.gb_sv_A_E_X.Name = "gb_sv_A_E_X";
            this.gb_sv_A_E_X.Size = new System.Drawing.Size(326, 37);
            this.gb_sv_A_E_X.TabIndex = 29;
            this.gb_sv_A_E_X.TabStop = false;
            this.gb_sv_A_E_X.Text = "Save CA as:";
            // 
            // rbtn_sv_X
            // 
            this.rbtn_sv_X.AutoSize = true;
            this.rbtn_sv_X.Location = new System.Drawing.Point(215, 14);
            this.rbtn_sv_X.Name = "rbtn_sv_X";
            this.rbtn_sv_X.Size = new System.Drawing.Size(44, 17);
            this.rbtn_sv_X.TabIndex = 2;
            this.rbtn_sv_X.Text = "Hex";
            this.rbtn_sv_X.UseVisualStyleBackColor = true;
            this.rbtn_sv_X.CheckedChanged += new System.EventHandler(this.sv_radioButtons_CheckedChanged);
            // 
            // rbtn_sv_E
            // 
            this.rbtn_sv_E.AutoSize = true;
            this.rbtn_sv_E.Checked = true;
            this.rbtn_sv_E.Location = new System.Drawing.Point(111, 14);
            this.rbtn_sv_E.Name = "rbtn_sv_E";
            this.rbtn_sv_E.Size = new System.Drawing.Size(64, 17);
            this.rbtn_sv_E.TabIndex = 1;
            this.rbtn_sv_E.TabStop = true;
            this.rbtn_sv_E.Text = "EBCDIC";
            this.rbtn_sv_E.UseVisualStyleBackColor = true;
            this.rbtn_sv_E.CheckedChanged += new System.EventHandler(this.sv_radioButtons_CheckedChanged);
            // 
            // rbtn_sv_A
            // 
            this.rbtn_sv_A.AutoSize = true;
            this.rbtn_sv_A.Location = new System.Drawing.Point(20, 14);
            this.rbtn_sv_A.Name = "rbtn_sv_A";
            this.rbtn_sv_A.Size = new System.Drawing.Size(52, 17);
            this.rbtn_sv_A.TabIndex = 0;
            this.rbtn_sv_A.Text = "ASCII";
            this.rbtn_sv_A.UseVisualStyleBackColor = true;
            this.rbtn_sv_A.CheckedChanged += new System.EventHandler(this.sv_radioButtons_CheckedChanged);
            // 
            // gb_A_X
            // 
            this.gb_A_X.Controls.Add(this.rbtn_X);
            this.gb_A_X.Controls.Add(this.rbtn_A);
            this.gb_A_X.Location = new System.Drawing.Point(21, 190);
            this.gb_A_X.Name = "gb_A_X";
            this.gb_A_X.Size = new System.Drawing.Size(327, 35);
            this.gb_A_X.TabIndex = 30;
            this.gb_A_X.TabStop = false;
            this.gb_A_X.Text = "Enter Text or Hex";
            // 
            // rbtn_X
            // 
            this.rbtn_X.AutoSize = true;
            this.rbtn_X.Location = new System.Drawing.Point(215, 13);
            this.rbtn_X.Name = "rbtn_X";
            this.rbtn_X.Size = new System.Drawing.Size(72, 17);
            this.rbtn_X.TabIndex = 1;
            this.rbtn_X.Text = "Enter Hex";
            this.rbtn_X.UseVisualStyleBackColor = true;
            this.rbtn_X.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // rbtn_A
            // 
            this.rbtn_A.AutoSize = true;
            this.rbtn_A.Checked = true;
            this.rbtn_A.Location = new System.Drawing.Point(111, 12);
            this.rbtn_A.Name = "rbtn_A";
            this.rbtn_A.Size = new System.Drawing.Size(74, 17);
            this.rbtn_A.TabIndex = 0;
            this.rbtn_A.TabStop = true;
            this.rbtn_A.Text = "Enter Text";
            this.rbtn_A.UseVisualStyleBackColor = true;
            this.rbtn_A.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // get_CA
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(359, 589);
            this.Controls.Add(this.gb_A_X);
            this.Controls.Add(this.gb_sv_A_E_X);
            this.Controls.Add(this.tb_E_ca);
            this.Controls.Add(this.tb_A_X_ca);
            this.Controls.Add(this.lbl_act_cal);
            this.Controls.Add(this.chk_Xtrn);
            this.Controls.Add(this.lbl_Xtrn);
            this.Controls.Add(this.spin_eci_to);
            this.Controls.Add(this.lbl_eci_to);
            this.Controls.Add(this.spin_wait);
            this.Controls.Add(this.lbl_wait);
            this.Controls.Add(this.spin_repeat);
            this.Controls.Add(this.lbl_repeat);
            this.Controls.Add(this.lbl_mxflow);
            this.Controls.Add(this.spin_mxflow);
            this.Controls.Add(this.tb_tranid);
            this.Controls.Add(this.lbl_tranid);
            this.Controls.Add(this.lbl_pgm_nm);
            this.Controls.Add(this.tb_pgm_nm);
            this.Controls.Add(this.spin_cal);
            this.Controls.Add(this.lbl_emsg);
            this.Controls.Add(this.btn_cancel);
            this.Controls.Add(this.btn_reset);
            this.Controls.Add(this.btn_continue);
            this.Controls.Add(this.tb_get_ca);
            this.Controls.Add(this.lbl_cal);
            this.Controls.Add(this.lbl_get_rgn);
            this.Controls.Add(this.lbl_get_CA);
            this.Name = "get_CA";
            this.Text = "get_CA";
            this.Load += new System.EventHandler(this.get_CA_Load);
            this.Shown += new System.EventHandler(this.get_CA_Shown);
            ((System.ComponentModel.ISupportInitialize)(this.spin_cal)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_mxflow)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_repeat)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_wait)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_eci_to)).EndInit();
            this.gb_sv_A_E_X.ResumeLayout(false);
            this.gb_sv_A_E_X.PerformLayout();
            this.gb_A_X.ResumeLayout(false);
            this.gb_A_X.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_get_CA;
        private System.Windows.Forms.Label lbl_get_rgn;
        private System.Windows.Forms.Label lbl_cal;
        private System.Windows.Forms.TextBox tb_get_ca;
        private System.Windows.Forms.Button btn_continue;
        private System.Windows.Forms.Button btn_reset;
        private System.Windows.Forms.Button btn_cancel;
        private System.Windows.Forms.Label lbl_emsg;
        private System.Windows.Forms.NumericUpDown spin_cal;
        private System.Windows.Forms.TextBox tb_pgm_nm;
        private System.Windows.Forms.Label lbl_pgm_nm;
        private System.Windows.Forms.Label lbl_tranid;
        private System.Windows.Forms.TextBox tb_tranid;
        private System.Windows.Forms.NumericUpDown spin_mxflow;
        private System.Windows.Forms.Label lbl_mxflow;
        private System.Windows.Forms.Label lbl_repeat;
        private System.Windows.Forms.NumericUpDown spin_repeat;
        private System.Windows.Forms.Label lbl_wait;
        private System.Windows.Forms.NumericUpDown spin_wait;
        private System.Windows.Forms.Label lbl_eci_to;
        private System.Windows.Forms.NumericUpDown spin_eci_to;
        private System.Windows.Forms.Label lbl_Xtrn;
        private System.Windows.Forms.CheckBox chk_Xtrn;
        private System.Windows.Forms.Label lbl_act_cal;
        private System.Windows.Forms.TextBox tb_A_X_ca;
        private System.Windows.Forms.TextBox tb_E_ca;
        private System.Windows.Forms.GroupBox gb_sv_A_E_X;
        private System.Windows.Forms.RadioButton rbtn_sv_X;
        private System.Windows.Forms.RadioButton rbtn_sv_E;
        private System.Windows.Forms.RadioButton rbtn_sv_A;
        private System.Windows.Forms.GroupBox gb_A_X;
        private System.Windows.Forms.RadioButton rbtn_X;
        private System.Windows.Forms.RadioButton rbtn_A;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
//using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class get_CnC : Form
    {
        public string ch_nm = "";
        private string cn_nm = "";
 //       private int rc = 0;
        private string hld_cn_nm = "";
        private string b4_tb_chg = "";
        private bool ok_leave = true;
        private bool ok_X_val = false;
        private bool tb_chg = false;
        private bool rb_trigger = false;


        public string data_src = null;
        private char data_encode = 'a'; //ASCII is mandatory for CHAR CN, 'a', 'e' or 'x' for BIT
        private char cn_type = 'N';   // N is CHAR, n is BIT
        private char sv_encode = 'a'; // bit cn save request: 'a' 'e' 'x' save as (CP conv for e)

        private byte[] cn_data = new byte[] { 0 };
        private string hld_pgm_nm = "";
        private string hld_transid = "";
        private decimal hld_mxflow = 0;
        private decimal hld_repeat = 0;
        private decimal hld_wait = 0;
        private decimal hld_eci_to = 0;
        private bool hld_Xtrn = false;

        private cvt_x_A_E cvt_x_txt = new cvt_x_A_E();

        private Dictionary<string, src_data> cn_dict = new Dictionary<string, src_data>();
        string rem_CN = null;
        string updt_XMessage = "NO";

        private src_hdr h_src_hdr = new src_hdr();  // hold ref to src_hdr new in iterateseltrgns
        private List<src_data> h_src_list;          // hold ref to iterateseltrgns src_list

        public get_CnC(string rgn_cur, List<src_data> src_list, src_hdr rgn_hdr)
        {
            InitializeComponent();
            h_src_hdr = rgn_hdr;       // set ref to src_hdr passed from  iterateseltrgns
            lbl_get_rgn.Text = h_src_hdr.src_hdr_rgn;
            ch_nm = h_src_hdr.src_hdr_ch_nm;
            lbl_ch_nm.Text = ch_nm;
            h_src_list = src_list;     // set ref to src_list passed from iterateseltrgns
            lbl_emsg.Text = "Enter Channel/Container and Transaction properties";
            //lb_cn_lst.DataSource = new BindingSource(cn_dict, null);
//            form_reset();
            
            if (cn_type == 'N')
            {
                rbtn_X.Visible = false;
                rbtn_sv_E.Visible = false;
                rbtn_sv_X.Visible = false;
            }

            // GET THE INITIAL VALUES FROM THE FORM 
            hld_cn_nm = tb_cn_nm.Text;
            hld_pgm_nm = tb_pgm_nm.Text;
            hld_transid = tb_tranid.Text;
            hld_mxflow = spin_mxflow.Value;
            hld_repeat = spin_repeat.Value;
            hld_eci_to = spin_eci_to.Value;
            hld_wait = spin_wait.Value;
            hld_Xtrn = false;

            cn_dict.Clear();
            lb_cn_lst.ClearSelected();
            updt_XMessage = "YES";

        }

        private void radioButtons_B_C_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtn_cn_bit.Checked)
            {
                cn_type = 'n';
                rbtn_X.Visible = true;
                rbtn_sv_E.Visible = true;
                rbtn_sv_X.Visible = true;
                btn_add_cn.Text = "Add Bit CN";

            }
            else if (rbtn_cn_char.Checked)
            {
                cn_type = 'N';
                sv_encode = 'a';       // force save cn as ASCII
                rbtn_sv_A.Checked = true;
                rbtn_X.Visible = false;
                rbtn_sv_E.Visible = false;
                rbtn_sv_X.Visible = false;
                btn_add_cn.Text = "Add Char CN";
            }
        }

        private void btn_cancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_reset_Click(object sender, EventArgs e)
        {
            form_reset();
        }

        private void form_reset()
        {
            if (cn_type == 'N')
            {
                rbtn_X.Visible = false;
                rbtn_sv_E.Visible = false;
                rbtn_sv_X.Visible = false;
            }
            tb_cn_nm.Text = hld_cn_nm;
//            tb_cn_nm.Text = "";
            tb_pgm_nm.Text = hld_pgm_nm;
            tb_tranid.Text = hld_transid;
            spin_mxflow.Value = hld_mxflow;
            spin_repeat.Value = hld_repeat;
            spin_eci_to.Value = hld_eci_to;
            spin_wait.Value = hld_wait;
            chk_Xtrn.Checked = hld_Xtrn;
            tb_get_cn.Text = "";
            ch_nm = "";
            cn_data = new byte[] { 0 };
        }

        private void tb_pgm_nm_Leave(object sender, EventArgs e)
        {
            tb_pgm_nm.Text = tb_pgm_nm.Text.ToUpper();
        }

        private void tb_tranid_Leave(object sender, EventArgs e)
        {
            tb_tranid.Text = tb_tranid.Text.ToUpper();
        }

        private void sv_radioButtons_CheckedChanged(object sender, EventArgs e)
        {
            //  if data_type is 'N' CHAR CN, then only sv_encode is visible and checked
            if (rbtn_sv_A.Checked)
            {
                sv_encode = 'a';
            }
            else if (rbtn_sv_E.Checked)
            {
                sv_encode = 'e';
            }
            else if (rbtn_sv_X.Checked)
            {
                sv_encode = 'x';
            }
        }

        private void tb_cn_nm_Validating(object sender, CancelEventArgs e)
        {
            string s = tb_cn_nm.Text.TrimEnd(' ');
            if (s == "")
            {
                lbl_emsg.Text = "Container Name Required";
                e.Cancel = true;
                return;
            }
            string compare = s.Substring(0, 1);
            Regex regex = new Regex(@"[\d]");
            if (regex.IsMatch(compare))
            {
                lbl_emsg.Text = "Container Name Invalid (leading char)";
                e.Cancel = true;
                return;
            }
            Regex regexS = new Regex(@"[\s]");
            if (regexS.IsMatch(s))
            {
                lbl_emsg.Text = "Container Name Invalid (spaces)";
                e.Cancel = true;
                return;
            }

            if (cn_dict.ContainsKey(s))
                {
                lbl_emsg.Text = "Container Name Already Exists";
                e.Cancel = true;
                return;
            }
            cn_nm = s;
            e.Cancel = false;
            }

        private void tb_get_cn_Validating(object sender, CancelEventArgs e)
        {
            if (!ok_leave)
            {
                e.Cancel = true;
            }
        }

        private void tb_get_cn_KeyDown(object sender, KeyEventArgs e)
        {
            if (cn_type == 'N')  // char data
            {
                e.SuppressKeyPress = false;
                return;
            }
            //Using Regular Expressions
            //           if (!System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[0123456789abcdef]"))
            //             e.Handled = true;            //Allow navigation keyboard arrows

            b4_tb_chg = tb_get_cn.Text;
            ok_X_val = false;
            switch (e.KeyCode)
            {
                case Keys.Up:
                case Keys.Down:
                case Keys.Left:
                case Keys.Right:
                case Keys.Tab:
                case Keys.Back:
                case Keys.Delete:
                case Keys.EraseEof:

                    //     case Keys.PageUp:
                    //     case Keys.PageDown:
                    e.SuppressKeyPress = false;
                    return;
                default:
                    break;
            }
            //Block non-number characters
            char currentKey = (char)e.KeyCode;
            bool modifier = e.Control || e.Alt || e.Shift;
            bool nonNumber = char.IsLetter(currentKey) || char.IsSymbol(currentKey) || char.IsWhiteSpace(currentKey) || char.IsPunctuation(currentKey);
            string h_cur_key = currentKey.ToString();
            if (data_encode == 'x')
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(h_cur_key, "[0123456789ABCDEF]"))
                {
                    lbl_emsg.Text = string.Concat("Invalid hex value:(", h_cur_key, ") ignored.");
                    e.SuppressKeyPress = true;
                    e.Handled = true;
                    return;
                }
            }
            //Handle pasted Text
            if (e.Control && e.KeyCode == Keys.V)
            {
                //Preview paste data (removing non-number characters)
                string pasteText = Clipboard.GetText();
                string strippedText = "";
                string s = "";
                int i = 0;
                for (i = 0; i < pasteText.Length; i++)
                {
                    s = pasteText.Substring(i, 1);
                    if (!System.Text.RegularExpressions.Regex.IsMatch(s, "[/r/n]"))
                    {
                        strippedText += s;
                    }
                }
                pasteText = strippedText;
                if (data_encode == 'x')
                {
                    strippedText = "";
                    for (i = 0; i < pasteText.Length; i++)
                    {
                        s = pasteText.Substring(i, 1);
                        if (!System.Text.RegularExpressions.Regex.IsMatch(s, "[0123456789ABCDEF]"))
                        {
                            lbl_emsg.Text = "Invalid hex value paste attempt.";
                            e.SuppressKeyPress = true;
                            e.Handled = true;
                            return;
                        }
                        strippedText += s;
                        //                    if (char.IsDigit(pasteText[i]))
                        //                      strippedText += pasteText[i].ToString();
                    }
                }
                if (strippedText != pasteText)
                {
                    //There were non-numbers in the pasted text
                    e.SuppressKeyPress = true;
                    /*
                    //OPTIONAL: Manually insert text stripped of non-numbers
                    TextBox me = (TextBox)sender;
                    int start = me.SelectionStart;
                    string newTxt = me.Text;
                    newTxt = newTxt.Remove(me.SelectionStart, me.SelectionLength); //remove highlighted text
                    newTxt = newTxt.Insert(me.SelectionStart, strippedText); //paste
                    me.Text = newTxt;
                    me.SelectionStart = start + strippedText.Length;
                    */
                }
                else
                {
                    e.SuppressKeyPress = false;
                    TextBox me = (TextBox)sender;
                    int start = me.SelectionStart;
                    string newTxt = me.Text;
                    newTxt = newTxt.Remove(me.SelectionStart, me.SelectionLength); //remove highlighted text
                    newTxt = newTxt.Insert(me.SelectionStart, strippedText); //paste
                    me.Text = newTxt;
                    me.SelectionStart = start + strippedText.Length;

                }
            }
            ok_X_val = true;
            lbl_emsg.Text = "---";
        }

        private void tb_get_cn_TextChanged(object sender, EventArgs e)
        {
            if (rb_trigger)  // rb_trigger donotes that this change event due to 
            //               switch view to x or a - we ignore event
            {
                rb_trigger = false; // reset so real chg event is processed
                return;
            }
            if (tb_chg)  // 
            {
                return;
            }
            else
            {
                tb_chg = true;     // set this on so recursion stops here
                string pattern = "\r\n";
                string replacement = "";
                Regex rgx = new Regex(pattern);
                string tmp = rgx.Replace(tb_get_cn.Text, replacement);
                if (tmp != tb_get_cn.Text)
                {
                    ok_X_val = true;
                    tb_get_cn.Text = tmp;
                }
                tb_chg = false;
            }
            //            cvt_x_A_E cvt_x_txt = new cvt_x_A_E();
            int rc = 0;
            if (data_encode == 'x')
            {
                if (ok_X_val)
                {
                    //                    // lbl_Xtb.Text = tb_get_ca.Text;
                    // lbl_Xtb.Text = tb_get_ca.Text;
                    b4_tb_chg = tb_get_cn.Text;
                    ok_X_val = false;
                    if ((b4_tb_chg.Length % 2) != 0) return;
                    cvt_x_txt.X_str = b4_tb_chg;
                    rc = RunECI_utils.cvt_x2A_E(cvt_x_txt);
                    if (rc == 0)
                    {
                        tb_A_X_cn.Text = cvt_x_txt.A_str;
                        tb_E_cn.Text = cvt_x_txt.E_str;
                    }
                    return;
                }
                string s = tb_get_cn.Text;
                if (s == b4_tb_chg) return;
                string t = "";
                for (int i = 0; i < s.Length; i++)
                {
                    t = s.Substring(i, 1).ToUpper();
                    if (!System.Text.RegularExpressions.Regex.IsMatch(t, "[0123456789ABCDEF\r\n]"))
                    {
                        tb_get_cn.Text = b4_tb_chg;
                        lbl_emsg.Text = "Invalid hex value paste attempt. Resetting";
                        return;
                    }
                }
                // lbl_Xtb.Text = tb_get_ca.Text;
                b4_tb_chg = tb_get_cn.Text;
                lbl_emsg.Text = "---";
                if ((b4_tb_chg.Length % 2) != 0) return;
                cvt_x_txt.X_str = b4_tb_chg;
                rc = RunECI_utils.cvt_x2A_E(cvt_x_txt);
                if (rc == 0)
                {
                    tb_A_X_cn.Text = cvt_x_txt.A_str;
                    tb_E_cn.Text = cvt_x_txt.E_str;
                }
            }
            else   // ASCII mode
            {
                tb_A_X_cn.Text = tb_get_cn.Text;
                b4_tb_chg = tb_get_cn.Text;
                //                ok_X_val = false;
                cvt_x_txt.A_str = b4_tb_chg;
                byte[] b_x_ary = Encoding.ASCII.GetBytes(b4_tb_chg);
                cvt_x_txt.X_str = RunECI_utils.ToHexStr(b_x_ary);
                byte[] bE_x_ary = Encoding.GetEncoding(037).GetBytes(b4_tb_chg);
                cvt_x_txt.E_str = RunECI_utils.ToHexStr(bE_x_ary);
                tb_A_X_cn.Text = cvt_x_txt.X_str;
                tb_E_cn.Text = cvt_x_txt.E_str;
                // lbl_Xtb.Text = cvt_x_txt.X_str;
                tb_chg = false;
                return;
            }
        }

        private void rbtn_A_CheckedChanged(object sender, EventArgs e)
        {
            // chg status of either rb causes (inline) two iterations of this method
            //  and the first pass does cause a chg to the tb
            //  but the second pass does not trigger a real chg in value
            //  so the rb_trigger is only useful on the first pass
            // subsequently, reset it to false at exit from this
            rb_trigger = true;
            if (rbtn_A.Checked)
            {
                data_encode = 'a';
                tb_get_cn.Text = cvt_x_txt.A_str;
                tb_A_X_cn.Text = cvt_x_txt.X_str;
                lbl_emsg.Text = "Enter Text values in TextBox";
                //                tb_Avals.Visible = true;
                //                tb_get_ca.Visible = false;
            }
            else if (rbtn_X.Checked)
            {
                data_encode = 'x';
                tb_get_cn.Text = cvt_x_txt.X_str;
                tb_A_X_cn.Text = cvt_x_txt.A_str;
                lbl_emsg.Text = "Enter Hex values in TextBox";
                //                tb_get_ca.Visible = true;
                //                tb_Avals.Visible = false;
            }
            // this will allow the 
            rb_trigger = false;

        }

        private void tb_get_cn_Leave(object sender, EventArgs e)
        {
            if (data_encode == 'x')
            {
                int s_l = tb_get_cn.Text.Length;
                if ((s_l % 2) != 0)
                {
                    lbl_emsg.Text = string.Concat("Hex String of length:", s_l.ToString(), " is not even and can not hold x'00' pairs.");
                    ok_leave = false;

                }
                else
                {
                    lbl_emsg.Text = "Hex:Validated hex x'00' pairs";
                    ok_leave = true;
                }
            }
            else
            {
                lbl_emsg.Text = "ASCII: contains Valid hex x'00' pairs";
                ok_leave = true;

            }

        }

        private void btn_add_cn_Click(object sender, EventArgs e)
        {
            bool btn_err = false;
            byte[] ca_b_ary = new byte[1] { 0 };
            string get_cn_data = "";
            if (cn_nm.Length == 0)
            {
                lbl_emsg.Text = "Container Name CANNOT be blank";
                btn_err = true;
            }
            else
            {
                bool cn_dict_ok = cn_dict.ContainsKey(cn_nm);
                if (cn_dict_ok)
                {
                    lbl_emsg.Text = "Container Name Already Exists";
                    btn_err = true;
                }
            }

            if (tb_pgm_nm.Text.TrimEnd(' ').Length == 0)
            {
                lbl_emsg.Text = "Program Name CANNOT be blank";
                btn_err = true;
            }
            else
            {
                h_src_hdr.src_hdr_pgm_nm = tb_pgm_nm.Text.ToUpper();
            }
            if (tb_tranid.Text.TrimEnd(' ').Length == 0)
            {
                lbl_emsg.Text = "Transid CANNOT be blank";
                btn_err = true;
            }
            else
            {
                h_src_hdr.src_hdr_tranid = tb_tranid.Text;
            }
            if (!btn_err)
            {
                h_src_hdr.src_hdr_eci_flow = (int)spin_mxflow.Value;
                h_src_hdr.src_hdr_eci_to = (int)spin_eci_to.Value;
                h_src_hdr.src_hdr_wait = (int)spin_wait.Value;
                h_src_hdr.src_hdr_repeat = (int)spin_repeat.Value;
                if (chk_Xtrn.Checked)
                {
                    h_src_hdr.src_hdr_eci_X_tran = 'Y';
                }
                else
                {
                    h_src_hdr.src_hdr_eci_X_tran = 'N';
                }
                src_data cur_src_data = new src_data();
                cur_src_data.src_type = cn_type;  // 'n' BIT, 'N' CHAR
                cur_src_data.src_fmt_data_encode = data_encode; //'a' 'x' 'e' request
                //'A' 'X' 'e' response
                // note - you can enter either data as text (ascii) or hex
                //  - you can choose to save any above as BIT
                //  - but you can only save text data as CHAR
                cur_src_data.src_repeat_ct = "00";
                cur_src_data.src_name = cn_nm;
                cur_src_data.src_eci_retcd = "0";
                //cur_src_data.b_src_ary = cn_data;
                switch (sv_encode)
                {
                    case 'a':
                        {
                            get_cn_data = cvt_x_txt.A_str.PadRight('\0');
                            Array.Resize(ref ca_b_ary, get_cn_data.Length);
                            ca_b_ary = Encoding.ASCII.GetBytes(get_cn_data);
                            break;
                        }
                    case 'e':
                        {
                            get_cn_data = cvt_x_txt.E_str.PadRight('\0');
                            Array.Resize(ref ca_b_ary, get_cn_data.Length);
                            ca_b_ary = RunECI_utils.ToBytes(get_cn_data);
                            //                        ca_b_ary = Encoding.GetEncoding(037).GetBytes(get_ca_data);

                            break;
                        }
                    case 'x':
                        {
                            get_cn_data = cvt_x_txt.X_str;
                            byte[] t_ca_b_ary = RunECI_utils.ToBytes(cvt_x_txt.X_str);
                            Array.Resize(ref ca_b_ary, t_ca_b_ary.Length);
                            Array.Copy(t_ca_b_ary, ca_b_ary, t_ca_b_ary.Length);
                            break;
                        }
                    default:
                        {
                            lbl_emsg.Text = "RadioBtn SaveAs not 'a','e','x'...???";
                            btn_err = true;
                            break;
                        }
                }
                // cur_src_data.b_src_ary is a byte array; if cur_src_data.src_type is 'N' CHAR
                //   then the byte array is cvt to a ascii str and used
                //   otherwise 'n' BIT cn are written to the CN as 'x' data
                cur_src_data.b_src_ary = ca_b_ary;
                cur_src_data.src_l = ca_b_ary.Length;
                //h_src_list.Add(cur_src_data);
                updt_XMessage = "NO";

                lb_cn_lst.DataSource = null;
                cn_dict.Add(cn_nm, cur_src_data); // item number in h_src_list
                lb_cn_lst.DataSource = new BindingSource(cn_dict, null);
                lb_cn_lst.DisplayMember = "Key";  // displayed in lb
                lb_cn_lst.ValueMember = "Value";    // returned as SelectedValue
                btn_rem_cn.Visible = true;
                updt_XMessage = "YES";

            }

        }

        private void btn_finish_Click(object sender, EventArgs e)
        {
            if (cn_dict.Count < 1)
            {
                this.DialogResult = System.Windows.Forms.DialogResult.No;
            }
            else {
                foreach (src_data new_src_data in cn_dict.Values) h_src_list.Add(new_src_data);

                this.DialogResult = System.Windows.Forms.DialogResult.Yes;

            }
            this.Close();

        }

        private void btn_rem_cn_Click(object sender, EventArgs e)
        {
            if (rem_CN != null)
            {
                cn_dict.Remove(rem_CN);
                if (cn_dict.Count < 1) btn_rem_cn.Visible = false;
                updt_XMessage = "NO";
                lb_cn_lst.DataSource = null;
                lb_cn_lst.DataSource = new BindingSource(cn_dict, null);
                lb_cn_lst.DisplayMember = "Key";  // displayed in lb
                lb_cn_lst.ValueMember = "Value";    // returned as SelectedValue
                lb_cn_lst.ClearSelected();
                updt_XMessage = "YES";
                rem_CN = null;
            }
            else
            {
                lbl_emsg.Text = "Select CN from List to Remove.";
            }
        }

        private void lb_cn_lst_SelectedValueChanged(object sender, EventArgs e)
        {
            if (lb_cn_lst.SelectedIndex != -1)
            {
                if (updt_XMessage != "NO")  // initialize causes the XMessage to be refreshed for no reason
                {
 //                   rem_CN = (string)lb_cn_lst.SelectedItem;
                    var keyValue = (KeyValuePair<string, src_data>)lb_cn_lst.SelectedItem;
                    rem_CN = keyValue.Key;

                    lbl_emsg.Text = "Selected Container to REMove:" + rem_CN;
                }
            }

        }
    }
}?namespace RunCTG_ECI
{
    partial class get_CnC
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_act_cnl = new System.Windows.Forms.Label();
            this.chk_Xtrn = new System.Windows.Forms.CheckBox();
            this.lbl_Xtrn = new System.Windows.Forms.Label();
            this.spin_eci_to = new System.Windows.Forms.NumericUpDown();
            this.lbl_eci_to = new System.Windows.Forms.Label();
            this.spin_wait = new System.Windows.Forms.NumericUpDown();
            this.lbl_wait = new System.Windows.Forms.Label();
            this.spin_repeat = new System.Windows.Forms.NumericUpDown();
            this.lbl_repeat = new System.Windows.Forms.Label();
            this.lbl_mxflow = new System.Windows.Forms.Label();
            this.spin_mxflow = new System.Windows.Forms.NumericUpDown();
            this.tb_tranid = new System.Windows.Forms.TextBox();
            this.lbl_tranid = new System.Windows.Forms.Label();
            this.lbl_pgm_nm = new System.Windows.Forms.Label();
            this.tb_pgm_nm = new System.Windows.Forms.TextBox();
            this.lbl_get_rgn = new System.Windows.Forms.Label();
            this.lbl_get_CnC = new System.Windows.Forms.Label();
            this.lbl_cn = new System.Windows.Forms.Label();
            this.tb_cn_nm = new System.Windows.Forms.TextBox();
            this.lbl_ch = new System.Windows.Forms.Label();
            this.gb_cn_type = new System.Windows.Forms.GroupBox();
            this.rbtn_cn_char = new System.Windows.Forms.RadioButton();
            this.rbtn_cn_bit = new System.Windows.Forms.RadioButton();
            this.lbl_emsg = new System.Windows.Forms.Label();
            this.btn_cancel = new System.Windows.Forms.Button();
            this.btn_reset = new System.Windows.Forms.Button();
            this.btn_finish = new System.Windows.Forms.Button();
            this.tb_get_cn = new System.Windows.Forms.TextBox();
            this.lbl_ch_nm = new System.Windows.Forms.Label();
            this.lb_cn_lst = new System.Windows.Forms.ListBox();
            this.gb_A_E = new System.Windows.Forms.GroupBox();
            this.rbtn_X = new System.Windows.Forms.RadioButton();
            this.rbtn_A = new System.Windows.Forms.RadioButton();
            this.btn_add_cn = new System.Windows.Forms.Button();
            this.tb_A_X_cn = new System.Windows.Forms.TextBox();
            this.tb_E_cn = new System.Windows.Forms.TextBox();
            this.gb_sv_A_E_X = new System.Windows.Forms.GroupBox();
            this.rbtn_sv_X = new System.Windows.Forms.RadioButton();
            this.rbtn_sv_E = new System.Windows.Forms.RadioButton();
            this.rbtn_sv_A = new System.Windows.Forms.RadioButton();
            this.gbox_cn_list = new System.Windows.Forms.GroupBox();
            this.btn_rem_cn = new System.Windows.Forms.Button();
            ((System.ComponentModel.ISupportInitialize)(this.spin_eci_to)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_wait)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_repeat)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_mxflow)).BeginInit();
            this.gb_cn_type.SuspendLayout();
            this.gb_A_E.SuspendLayout();
            this.gb_sv_A_E_X.SuspendLayout();
            this.gbox_cn_list.SuspendLayout();
            this.SuspendLayout();
            // 
            // lbl_act_cnl
            // 
            this.lbl_act_cnl.AutoSize = true;
            this.lbl_act_cnl.Location = new System.Drawing.Point(12, 136);
            this.lbl_act_cnl.Name = "lbl_act_cnl";
            this.lbl_act_cnl.Size = new System.Drawing.Size(70, 13);
            this.lbl_act_cnl.TabIndex = 44;
            this.lbl_act_cnl.Text = "Actual CN_L:";
            // 
            // chk_Xtrn
            // 
            this.chk_Xtrn.AutoSize = true;
            this.chk_Xtrn.Cursor = System.Windows.Forms.Cursors.AppStarting;
            this.chk_Xtrn.Location = new System.Drawing.Point(260, 132);
            this.chk_Xtrn.Name = "chk_Xtrn";
            this.chk_Xtrn.Size = new System.Drawing.Size(87, 17);
            this.chk_Xtrn.TabIndex = 7;
            this.chk_Xtrn.Text = "(checked=Y)";
            this.chk_Xtrn.UseVisualStyleBackColor = true;
            // 
            // lbl_Xtrn
            // 
            this.lbl_Xtrn.AutoSize = true;
            this.lbl_Xtrn.Location = new System.Drawing.Point(175, 136);
            this.lbl_Xtrn.Name = "lbl_Xtrn";
            this.lbl_Xtrn.Size = new System.Drawing.Size(75, 13);
            this.lbl_Xtrn.TabIndex = 42;
            this.lbl_Xtrn.Text = "Extended Y/N";
            // 
            // spin_eci_to
            // 
            this.spin_eci_to.Location = new System.Drawing.Point(260, 106);
            this.spin_eci_to.Maximum = new decimal(new int[] {
            60,
            0,
            0,
            0});
            this.spin_eci_to.Name = "spin_eci_to";
            this.spin_eci_to.Size = new System.Drawing.Size(43, 20);
            this.spin_eci_to.TabIndex = 6;
            // 
            // lbl_eci_to
            // 
            this.lbl_eci_to.AutoSize = true;
            this.lbl_eci_to.Location = new System.Drawing.Point(163, 108);
            this.lbl_eci_to.Name = "lbl_eci_to";
            this.lbl_eci_to.Size = new System.Drawing.Size(75, 13);
            this.lbl_eci_to.TabIndex = 40;
            this.lbl_eci_to.Text = "ECI TOut 0-60";
            // 
            // spin_wait
            // 
            this.spin_wait.Location = new System.Drawing.Point(260, 80);
            this.spin_wait.Maximum = new decimal(new int[] {
            9,
            0,
            0,
            0});
            this.spin_wait.Name = "spin_wait";
            this.spin_wait.Size = new System.Drawing.Size(34, 20);
            this.spin_wait.TabIndex = 5;
            // 
            // lbl_wait
            // 
            this.lbl_wait.AutoSize = true;
            this.lbl_wait.Location = new System.Drawing.Point(191, 83);
            this.lbl_wait.Name = "lbl_wait";
            this.lbl_wait.Size = new System.Drawing.Size(70, 13);
            this.lbl_wait.TabIndex = 38;
            this.lbl_wait.Text = "Wait 0-9(sec)";
            // 
            // spin_repeat
            // 
            this.spin_repeat.Location = new System.Drawing.Point(260, 53);
            this.spin_repeat.Maximum = new decimal(new int[] {
            99,
            0,
            0,
            0});
            this.spin_repeat.Name = "spin_repeat";
            this.spin_repeat.Size = new System.Drawing.Size(43, 20);
            this.spin_repeat.TabIndex = 4;
            // 
            // lbl_repeat
            // 
            this.lbl_repeat.AutoSize = true;
            this.lbl_repeat.Location = new System.Drawing.Point(175, 61);
            this.lbl_repeat.Name = "lbl_repeat";
            this.lbl_repeat.Size = new System.Drawing.Size(66, 13);
            this.lbl_repeat.TabIndex = 36;
            this.lbl_repeat.Text = "Repeat 0-99";
            // 
            // lbl_mxflow
            // 
            this.lbl_mxflow.AutoSize = true;
            this.lbl_mxflow.Location = new System.Drawing.Point(11, 113);
            this.lbl_mxflow.Name = "lbl_mxflow";
            this.lbl_mxflow.Size = new System.Drawing.Size(72, 13);
            this.lbl_mxflow.TabIndex = 35;
            this.lbl_mxflow.Text = "MaxFlows 0-5";
            // 
            // spin_mxflow
            // 
            this.spin_mxflow.Location = new System.Drawing.Point(90, 106);
            this.spin_mxflow.Maximum = new decimal(new int[] {
            5,
            0,
            0,
            0});
            this.spin_mxflow.Name = "spin_mxflow";
            this.spin_mxflow.Size = new System.Drawing.Size(40, 20);
            this.spin_mxflow.TabIndex = 3;
            this.spin_mxflow.Value = new decimal(new int[] {
            3,
            0,
            0,
            0});
            // 
            // tb_tranid
            // 
            this.tb_tranid.Location = new System.Drawing.Point(90, 80);
            this.tb_tranid.MaxLength = 4;
            this.tb_tranid.Name = "tb_tranid";
            this.tb_tranid.Size = new System.Drawing.Size(40, 20);
            this.tb_tranid.TabIndex = 2;
            this.tb_tranid.Text = "UXXX";
            this.tb_tranid.Leave += new System.EventHandler(this.tb_tranid_Leave);
            // 
            // lbl_tranid
            // 
            this.lbl_tranid.AutoSize = true;
            this.lbl_tranid.Location = new System.Drawing.Point(38, 83);
            this.lbl_tranid.Name = "lbl_tranid";
            this.lbl_tranid.Size = new System.Drawing.Size(45, 13);
            this.lbl_tranid.TabIndex = 32;
            this.lbl_tranid.Text = "TransID";
            // 
            // lbl_pgm_nm
            // 
            this.lbl_pgm_nm.AutoSize = true;
            this.lbl_pgm_nm.Location = new System.Drawing.Point(11, 64);
            this.lbl_pgm_nm.Name = "lbl_pgm_nm";
            this.lbl_pgm_nm.Size = new System.Drawing.Size(74, 13);
            this.lbl_pgm_nm.TabIndex = 31;
            this.lbl_pgm_nm.Text = "ProgramName";
            // 
            // tb_pgm_nm
            // 
            this.tb_pgm_nm.Location = new System.Drawing.Point(90, 58);
            this.tb_pgm_nm.MaxLength = 8;
            this.tb_pgm_nm.Name = "tb_pgm_nm";
            this.tb_pgm_nm.Size = new System.Drawing.Size(75, 20);
            this.tb_pgm_nm.TabIndex = 1;
            this.tb_pgm_nm.Text = "UCEMPINR";
            this.tb_pgm_nm.Leave += new System.EventHandler(this.tb_pgm_nm_Leave);
            // 
            // lbl_get_rgn
            // 
            this.lbl_get_rgn.AutoSize = true;
            this.lbl_get_rgn.Location = new System.Drawing.Point(229, 9);
            this.lbl_get_rgn.Name = "lbl_get_rgn";
            this.lbl_get_rgn.Size = new System.Drawing.Size(49, 13);
            this.lbl_get_rgn.TabIndex = 27;
            this.lbl_get_rgn.Text = "REGION";
            // 
            // lbl_get_CnC
            // 
            this.lbl_get_CnC.AutoSize = true;
            this.lbl_get_CnC.Location = new System.Drawing.Point(37, 9);
            this.lbl_get_CnC.Name = "lbl_get_CnC";
            this.lbl_get_CnC.Size = new System.Drawing.Size(183, 13);
            this.lbl_get_CnC.TabIndex = 26;
            this.lbl_get_CnC.Text = "Enter the source Container for region:";
            // 
            // lbl_cn
            // 
            this.lbl_cn.AutoSize = true;
            this.lbl_cn.Location = new System.Drawing.Point(229, 31);
            this.lbl_cn.Name = "lbl_cn";
            this.lbl_cn.Size = new System.Drawing.Size(80, 13);
            this.lbl_cn.TabIndex = 45;
            this.lbl_cn.Text = "ContainerName";
            // 
            // tb_cn_nm
            // 
            this.tb_cn_nm.Location = new System.Drawing.Point(317, 28);
            this.tb_cn_nm.MaxLength = 16;
            this.tb_cn_nm.Name = "tb_cn_nm";
            this.tb_cn_nm.Size = new System.Drawing.Size(119, 20);
            this.tb_cn_nm.TabIndex = 0;
            this.tb_cn_nm.WordWrap = false;
            this.tb_cn_nm.Validating += new System.ComponentModel.CancelEventHandler(this.tb_cn_nm_Validating);
            // 
            // lbl_ch
            // 
            this.lbl_ch.AutoSize = true;
            this.lbl_ch.Location = new System.Drawing.Point(4, 31);
            this.lbl_ch.Name = "lbl_ch";
            this.lbl_ch.Size = new System.Drawing.Size(77, 13);
            this.lbl_ch.TabIndex = 47;
            this.lbl_ch.Text = "Channel Name";
            this.lbl_ch.TextAlign = System.Drawing.ContentAlignment.TopRight;
            // 
            // gb_cn_type
            // 
            this.gb_cn_type.Controls.Add(this.rbtn_cn_char);
            this.gb_cn_type.Controls.Add(this.rbtn_cn_bit);
            this.gb_cn_type.Location = new System.Drawing.Point(351, 159);
            this.gb_cn_type.Name = "gb_cn_type";
            this.gb_cn_type.Size = new System.Drawing.Size(91, 56);
            this.gb_cn_type.TabIndex = 49;
            this.gb_cn_type.TabStop = false;
            this.gb_cn_type.Text = "CN Bit or Char";
            // 
            // rbtn_cn_char
            // 
            this.rbtn_cn_char.AutoSize = true;
            this.rbtn_cn_char.Checked = true;
            this.rbtn_cn_char.Location = new System.Drawing.Point(15, 14);
            this.rbtn_cn_char.Name = "rbtn_cn_char";
            this.rbtn_cn_char.Size = new System.Drawing.Size(65, 17);
            this.rbtn_cn_char.TabIndex = 1;
            this.rbtn_cn_char.TabStop = true;
            this.rbtn_cn_char.Text = "CN Char";
            this.rbtn_cn_char.UseVisualStyleBackColor = true;
            this.rbtn_cn_char.CheckedChanged += new System.EventHandler(this.radioButtons_B_C_CheckedChanged);
            // 
            // rbtn_cn_bit
            // 
            this.rbtn_cn_bit.AutoSize = true;
            this.rbtn_cn_bit.Location = new System.Drawing.Point(15, 33);
            this.rbtn_cn_bit.Name = "rbtn_cn_bit";
            this.rbtn_cn_bit.Size = new System.Drawing.Size(55, 17);
            this.rbtn_cn_bit.TabIndex = 0;
            this.rbtn_cn_bit.Text = "CN Bit";
            this.rbtn_cn_bit.UseVisualStyleBackColor = true;
            this.rbtn_cn_bit.CheckedChanged += new System.EventHandler(this.radioButtons_B_C_CheckedChanged);
            // 
            // lbl_emsg
            // 
            this.lbl_emsg.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_emsg.Location = new System.Drawing.Point(15, 542);
            this.lbl_emsg.MaximumSize = new System.Drawing.Size(427, 20);
            this.lbl_emsg.MinimumSize = new System.Drawing.Size(20, 20);
            this.lbl_emsg.Name = "lbl_emsg";
            this.lbl_emsg.Size = new System.Drawing.Size(427, 20);
            this.lbl_emsg.TabIndex = 53;
            this.lbl_emsg.Text = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
            // 
            // btn_cancel
            // 
            this.btn_cancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_cancel.Location = new System.Drawing.Point(295, 565);
            this.btn_cancel.Name = "btn_cancel";
            this.btn_cancel.Size = new System.Drawing.Size(75, 23);
            this.btn_cancel.TabIndex = 12;
            this.btn_cancel.Text = "Cancel";
            this.btn_cancel.UseVisualStyleBackColor = true;
            this.btn_cancel.Click += new System.EventHandler(this.btn_cancel_Click);
            // 
            // btn_reset
            // 
            this.btn_reset.Location = new System.Drawing.Point(193, 565);
            this.btn_reset.Name = "btn_reset";
            this.btn_reset.Size = new System.Drawing.Size(75, 23);
            this.btn_reset.TabIndex = 11;
            this.btn_reset.Text = "Reset";
            this.btn_reset.UseVisualStyleBackColor = true;
            this.btn_reset.Click += new System.EventHandler(this.btn_reset_Click);
            // 
            // btn_finish
            // 
            this.btn_finish.Location = new System.Drawing.Point(102, 565);
            this.btn_finish.Name = "btn_finish";
            this.btn_finish.Size = new System.Drawing.Size(75, 23);
            this.btn_finish.TabIndex = 10;
            this.btn_finish.Text = "Finish CN";
            this.btn_finish.UseVisualStyleBackColor = true;
            this.btn_finish.Click += new System.EventHandler(this.btn_finish_Click);
            // 
            // tb_get_cn
            // 
            this.tb_get_cn.Font = new System.Drawing.Font("HE_TERMINAL", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_get_cn.Location = new System.Drawing.Point(15, 249);
            this.tb_get_cn.MaxLength = 2000000;
            this.tb_get_cn.Multiline = true;
            this.tb_get_cn.Name = "tb_get_cn";
            this.tb_get_cn.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_get_cn.Size = new System.Drawing.Size(331, 99);
            this.tb_get_cn.TabIndex = 8;
            this.tb_get_cn.TextChanged += new System.EventHandler(this.tb_get_cn_TextChanged);
            this.tb_get_cn.KeyDown += new System.Windows.Forms.KeyEventHandler(this.tb_get_cn_KeyDown);
            this.tb_get_cn.Leave += new System.EventHandler(this.tb_get_cn_Leave);
            this.tb_get_cn.Validating += new System.ComponentModel.CancelEventHandler(this.tb_get_cn_Validating);
            // 
            // lbl_ch_nm
            // 
            this.lbl_ch_nm.AutoSize = true;
            this.lbl_ch_nm.Location = new System.Drawing.Point(87, 31);
            this.lbl_ch_nm.Name = "lbl_ch_nm";
            this.lbl_ch_nm.Size = new System.Drawing.Size(77, 13);
            this.lbl_ch_nm.TabIndex = 55;
            this.lbl_ch_nm.Text = "Channel Name";
            this.lbl_ch_nm.TextAlign = System.Drawing.ContentAlignment.TopRight;
            // 
            // lb_cn_lst
            // 
            this.lb_cn_lst.BackColor = System.Drawing.SystemColors.Control;
            this.lb_cn_lst.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.lb_cn_lst.Font = new System.Drawing.Font("HE_TERMINAL", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lb_cn_lst.FormattingEnabled = true;
            this.lb_cn_lst.ItemHeight = 16;
            this.lb_cn_lst.Location = new System.Drawing.Point(6, 19);
            this.lb_cn_lst.Name = "lb_cn_lst";
            this.lb_cn_lst.Size = new System.Drawing.Size(79, 192);
            this.lb_cn_lst.TabIndex = 56;
            this.lb_cn_lst.TabStop = false;
            this.lb_cn_lst.UseTabStops = false;
            this.lb_cn_lst.SelectedValueChanged += new System.EventHandler(this.lb_cn_lst_SelectedValueChanged);
            // 
            // gb_A_E
            // 
            this.gb_A_E.Controls.Add(this.rbtn_X);
            this.gb_A_E.Controls.Add(this.rbtn_A);
            this.gb_A_E.Location = new System.Drawing.Point(15, 152);
            this.gb_A_E.Name = "gb_A_E";
            this.gb_A_E.Size = new System.Drawing.Size(330, 36);
            this.gb_A_E.TabIndex = 57;
            this.gb_A_E.TabStop = false;
            this.gb_A_E.Text = "Enter Text or Hex";
            // 
            // rbtn_X
            // 
            this.rbtn_X.AutoSize = true;
            this.rbtn_X.Location = new System.Drawing.Point(215, 14);
            this.rbtn_X.Name = "rbtn_X";
            this.rbtn_X.Size = new System.Drawing.Size(44, 17);
            this.rbtn_X.TabIndex = 1;
            this.rbtn_X.Text = "Hex";
            this.rbtn_X.UseVisualStyleBackColor = true;
            // 
            // rbtn_A
            // 
            this.rbtn_A.AutoSize = true;
            this.rbtn_A.Checked = true;
            this.rbtn_A.Location = new System.Drawing.Point(111, 14);
            this.rbtn_A.Name = "rbtn_A";
            this.rbtn_A.Size = new System.Drawing.Size(46, 17);
            this.rbtn_A.TabIndex = 0;
            this.rbtn_A.TabStop = true;
            this.rbtn_A.Text = "Text";
            this.rbtn_A.UseVisualStyleBackColor = true;
            this.rbtn_A.CheckedChanged += new System.EventHandler(this.rbtn_A_CheckedChanged);
            // 
            // btn_add_cn
            // 
            this.btn_add_cn.Location = new System.Drawing.Point(21, 565);
            this.btn_add_cn.Name = "btn_add_cn";
            this.btn_add_cn.Size = new System.Drawing.Size(75, 23);
            this.btn_add_cn.TabIndex = 9;
            this.btn_add_cn.Text = "Add CN";
            this.btn_add_cn.UseVisualStyleBackColor = true;
            this.btn_add_cn.Click += new System.EventHandler(this.btn_add_cn_Click);
            // 
            // tb_A_X_cn
            // 
            this.tb_A_X_cn.BackColor = System.Drawing.SystemColors.Control;
            this.tb_A_X_cn.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.tb_A_X_cn.Font = new System.Drawing.Font("HE_TERMINAL", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_A_X_cn.Location = new System.Drawing.Point(15, 354);
            this.tb_A_X_cn.MaxLength = 32400;
            this.tb_A_X_cn.Multiline = true;
            this.tb_A_X_cn.Name = "tb_A_X_cn";
            this.tb_A_X_cn.ReadOnly = true;
            this.tb_A_X_cn.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_A_X_cn.Size = new System.Drawing.Size(331, 90);
            this.tb_A_X_cn.TabIndex = 59;
            // 
            // tb_E_cn
            // 
            this.tb_E_cn.BackColor = System.Drawing.SystemColors.Control;
            this.tb_E_cn.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.tb_E_cn.Font = new System.Drawing.Font("HE_TERMINAL", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_E_cn.Location = new System.Drawing.Point(15, 449);
            this.tb_E_cn.MaxLength = 32400;
            this.tb_E_cn.Multiline = true;
            this.tb_E_cn.Name = "tb_E_cn";
            this.tb_E_cn.ReadOnly = true;
            this.tb_E_cn.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.tb_E_cn.Size = new System.Drawing.Size(331, 90);
            this.tb_E_cn.TabIndex = 60;
            // 
            // gb_sv_A_E_X
            // 
            this.gb_sv_A_E_X.Controls.Add(this.rbtn_sv_X);
            this.gb_sv_A_E_X.Controls.Add(this.rbtn_sv_E);
            this.gb_sv_A_E_X.Controls.Add(this.rbtn_sv_A);
            this.gb_sv_A_E_X.Location = new System.Drawing.Point(15, 195);
            this.gb_sv_A_E_X.Name = "gb_sv_A_E_X";
            this.gb_sv_A_E_X.Size = new System.Drawing.Size(330, 37);
            this.gb_sv_A_E_X.TabIndex = 61;
            this.gb_sv_A_E_X.TabStop = false;
            this.gb_sv_A_E_X.Text = "Save Bit CN as:";
            // 
            // rbtn_sv_X
            // 
            this.rbtn_sv_X.AutoSize = true;
            this.rbtn_sv_X.Location = new System.Drawing.Point(215, 14);
            this.rbtn_sv_X.Name = "rbtn_sv_X";
            this.rbtn_sv_X.Size = new System.Drawing.Size(44, 17);
            this.rbtn_sv_X.TabIndex = 2;
            this.rbtn_sv_X.Text = "Hex";
            this.rbtn_sv_X.UseVisualStyleBackColor = true;
            // 
            // rbtn_sv_E
            // 
            this.rbtn_sv_E.AutoSize = true;
            this.rbtn_sv_E.Location = new System.Drawing.Point(111, 14);
            this.rbtn_sv_E.Name = "rbtn_sv_E";
            this.rbtn_sv_E.Size = new System.Drawing.Size(64, 17);
            this.rbtn_sv_E.TabIndex = 1;
            this.rbtn_sv_E.Text = "EBCDIC";
            this.rbtn_sv_E.UseVisualStyleBackColor = true;
            // 
            // rbtn_sv_A
            // 
            this.rbtn_sv_A.AutoSize = true;
            this.rbtn_sv_A.Checked = true;
            this.rbtn_sv_A.Location = new System.Drawing.Point(20, 14);
            this.rbtn_sv_A.Name = "rbtn_sv_A";
            this.rbtn_sv_A.Size = new System.Drawing.Size(52, 17);
            this.rbtn_sv_A.TabIndex = 0;
            this.rbtn_sv_A.TabStop = true;
            this.rbtn_sv_A.Text = "ASCII";
            this.rbtn_sv_A.UseVisualStyleBackColor = true;
            // 
            // gbox_cn_list
            // 
            this.gbox_cn_list.Controls.Add(this.btn_rem_cn);
            this.gbox_cn_list.Controls.Add(this.lb_cn_lst);
            this.gbox_cn_list.Location = new System.Drawing.Point(352, 221);
            this.gbox_cn_list.Name = "gbox_cn_list";
            this.gbox_cn_list.Size = new System.Drawing.Size(90, 281);
            this.gbox_cn_list.TabIndex = 62;
            this.gbox_cn_list.TabStop = false;
            this.gbox_cn_list.Text = "Containers";
            // 
            // btn_rem_cn
            // 
            this.btn_rem_cn.Location = new System.Drawing.Point(6, 252);
            this.btn_rem_cn.Name = "btn_rem_cn";
            this.btn_rem_cn.Size = new System.Drawing.Size(75, 23);
            this.btn_rem_cn.TabIndex = 57;
            this.btn_rem_cn.Text = "RemoveCN";
            this.btn_rem_cn.UseVisualStyleBackColor = true;
            this.btn_rem_cn.Visible = false;
            this.btn_rem_cn.Click += new System.EventHandler(this.btn_rem_cn_Click);
            // 
            // get_CnC
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(457, 591);
            this.Controls.Add(this.gbox_cn_list);
            this.Controls.Add(this.gb_sv_A_E_X);
            this.Controls.Add(this.tb_E_cn);
            this.Controls.Add(this.tb_A_X_cn);
            this.Controls.Add(this.btn_add_cn);
            this.Controls.Add(this.gb_A_E);
            this.Controls.Add(this.lbl_ch_nm);
            this.Controls.Add(this.tb_get_cn);
            this.Controls.Add(this.lbl_emsg);
            this.Controls.Add(this.btn_cancel);
            this.Controls.Add(this.btn_reset);
            this.Controls.Add(this.btn_finish);
            this.Controls.Add(this.gb_cn_type);
            this.Controls.Add(this.lbl_ch);
            this.Controls.Add(this.tb_cn_nm);
            this.Controls.Add(this.lbl_cn);
            this.Controls.Add(this.lbl_act_cnl);
            this.Controls.Add(this.chk_Xtrn);
            this.Controls.Add(this.lbl_Xtrn);
            this.Controls.Add(this.spin_eci_to);
            this.Controls.Add(this.lbl_eci_to);
            this.Controls.Add(this.spin_wait);
            this.Controls.Add(this.lbl_wait);
            this.Controls.Add(this.spin_repeat);
            this.Controls.Add(this.lbl_repeat);
            this.Controls.Add(this.lbl_mxflow);
            this.Controls.Add(this.spin_mxflow);
            this.Controls.Add(this.tb_tranid);
            this.Controls.Add(this.lbl_tranid);
            this.Controls.Add(this.lbl_pgm_nm);
            this.Controls.Add(this.tb_pgm_nm);
            this.Controls.Add(this.lbl_get_rgn);
            this.Controls.Add(this.lbl_get_CnC);
            this.Name = "get_CnC";
            this.Text = "get_CnC";
            ((System.ComponentModel.ISupportInitialize)(this.spin_eci_to)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_wait)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_repeat)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.spin_mxflow)).EndInit();
            this.gb_cn_type.ResumeLayout(false);
            this.gb_cn_type.PerformLayout();
            this.gb_A_E.ResumeLayout(false);
            this.gb_A_E.PerformLayout();
            this.gb_sv_A_E_X.ResumeLayout(false);
            this.gb_sv_A_E_X.PerformLayout();
            this.gbox_cn_list.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_act_cnl;
        private System.Windows.Forms.CheckBox chk_Xtrn;
        private System.Windows.Forms.Label lbl_Xtrn;
        private System.Windows.Forms.NumericUpDown spin_eci_to;
        private System.Windows.Forms.Label lbl_eci_to;
        private System.Windows.Forms.NumericUpDown spin_wait;
        private System.Windows.Forms.Label lbl_wait;
        private System.Windows.Forms.NumericUpDown spin_repeat;
        private System.Windows.Forms.Label lbl_repeat;
        private System.Windows.Forms.Label lbl_mxflow;
        private System.Windows.Forms.NumericUpDown spin_mxflow;
        private System.Windows.Forms.TextBox tb_tranid;
        private System.Windows.Forms.Label lbl_tranid;
        private System.Windows.Forms.Label lbl_pgm_nm;
        private System.Windows.Forms.TextBox tb_pgm_nm;
        private System.Windows.Forms.Label lbl_get_rgn;
        private System.Windows.Forms.Label lbl_get_CnC;
        private System.Windows.Forms.Label lbl_cn;
        private System.Windows.Forms.TextBox tb_cn_nm;
        private System.Windows.Forms.Label lbl_ch;
        private System.Windows.Forms.GroupBox gb_cn_type;
        private System.Windows.Forms.RadioButton rbtn_cn_char;
        private System.Windows.Forms.RadioButton rbtn_cn_bit;
        private System.Windows.Forms.Label lbl_emsg;
        private System.Windows.Forms.Button btn_cancel;
        private System.Windows.Forms.Button btn_reset;
        private System.Windows.Forms.Button btn_finish;
        private System.Windows.Forms.TextBox tb_get_cn;
        private System.Windows.Forms.Label lbl_ch_nm;
        private System.Windows.Forms.ListBox lb_cn_lst;
        private System.Windows.Forms.GroupBox gb_A_E;
        private System.Windows.Forms.RadioButton rbtn_X;
        private System.Windows.Forms.RadioButton rbtn_A;
        private System.Windows.Forms.Button btn_add_cn;
        private System.Windows.Forms.TextBox tb_A_X_cn;
        private System.Windows.Forms.TextBox tb_E_cn;
        private System.Windows.Forms.GroupBox gb_sv_A_E_X;
        private System.Windows.Forms.RadioButton rbtn_sv_X;
        private System.Windows.Forms.RadioButton rbtn_sv_E;
        private System.Windows.Forms.RadioButton rbtn_sv_A;
        private System.Windows.Forms.GroupBox gbox_cn_list;
        private System.Windows.Forms.Button btn_rem_cn;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class get_disp_ca_entry : Form
    {
        public string req_resp = null;
        public string req_resp_nm = null;
        public int item_num = -1;
        public string viewed = null;
        public bool isloaded = false;

        public get_disp_ca_entry(string rgn_nm, List<string> req_list, List<string> resp_list)
        {
            InitializeComponent();
            lbl_rgn_nm.Text = string.Concat("CICS Region:", rgn_nm);
            lb_req.DataSource = req_list;
            lb_resp.DataSource = resp_list;
            if (viewed != null) lbl_viewed.Text = viewed;
        }

        private void get_disp_ca_entry_Load(object sender, EventArgs e)
        {
            isloaded = true;
            if (viewed != null) lbl_viewed.Text = viewed;
        }

        private void lb_req_SelectedValueChanged(object sender, EventArgs e)
        {
            if (isloaded)
            {
                if (lb_req.SelectedIndex != -1)
                {
                    req_resp = "req";
                    req_resp_nm = (string)lb_req.Text;
                    lbl_req.Text = req_resp_nm;
                    lbl_req.Visible = true;
                    lbl_resp.Text = "";
                    lbl_resp.Visible = false;
                    item_num = lb_req.SelectedIndex;
                    btn_view.Visible = true;
                }
            }
        }

        private void lb_resp_SelectedValueChanged(object sender, EventArgs e)
        {
            if (isloaded)
            {
                if (lb_req.SelectedIndex != -1)
                {
                    req_resp = "resp";
                    req_resp_nm = (string)lb_resp.Text;
                    lbl_resp.Text = req_resp_nm;
                    lbl_resp.Visible = true;
                    lbl_req.Text = "";
                    lbl_req.Visible = false;
                    item_num = lb_resp.SelectedIndex;
                    btn_view.Visible = true;

                }
            }

        }

        private void btn_view_Click(object sender, EventArgs e)
        {
    //        this.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.Close();
        }

        private void btn_fin_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
?namespace RunCTG_ECI
{
    partial class get_disp_ca_entry
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_rgn_nm = new System.Windows.Forms.Label();
            this.lbl_viewed = new System.Windows.Forms.Label();
            this.lb_req = new System.Windows.Forms.ListBox();
            this.lb_resp = new System.Windows.Forms.ListBox();
            this.btn_view = new System.Windows.Forms.Button();
            this.btn_fin = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.lbl_req = new System.Windows.Forms.Label();
            this.lbl_resp = new System.Windows.Forms.Label();
            this.btn_can = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // lbl_rgn_nm
            // 
            this.lbl_rgn_nm.AutoSize = true;
            this.lbl_rgn_nm.Location = new System.Drawing.Point(22, 14);
            this.lbl_rgn_nm.Name = "lbl_rgn_nm";
            this.lbl_rgn_nm.Size = new System.Drawing.Size(71, 13);
            this.lbl_rgn_nm.TabIndex = 0;
            this.lbl_rgn_nm.Text = "CICS Region:";
            // 
            // lbl_viewed
            // 
            this.lbl_viewed.AutoSize = true;
            this.lbl_viewed.Location = new System.Drawing.Point(22, 251);
            this.lbl_viewed.Name = "lbl_viewed";
            this.lbl_viewed.Size = new System.Drawing.Size(16, 13);
            this.lbl_viewed.TabIndex = 1;
            this.lbl_viewed.Text = "---";
            // 
            // lb_req
            // 
            this.lb_req.FormattingEnabled = true;
            this.lb_req.Location = new System.Drawing.Point(12, 67);
            this.lb_req.Name = "lb_req";
            this.lb_req.Size = new System.Drawing.Size(163, 95);
            this.lb_req.TabIndex = 2;
            this.lb_req.SelectedValueChanged += new System.EventHandler(this.lb_req_SelectedValueChanged);
            // 
            // lb_resp
            // 
            this.lb_resp.FormattingEnabled = true;
            this.lb_resp.Location = new System.Drawing.Point(194, 67);
            this.lb_resp.Name = "lb_resp";
            this.lb_resp.Size = new System.Drawing.Size(164, 95);
            this.lb_resp.TabIndex = 3;
            this.lb_resp.SelectedValueChanged += new System.EventHandler(this.lb_resp_SelectedValueChanged);
            // 
            // btn_view
            // 
            this.btn_view.DialogResult = System.Windows.Forms.DialogResult.Yes;
            this.btn_view.Location = new System.Drawing.Point(12, 220);
            this.btn_view.Name = "btn_view";
            this.btn_view.Size = new System.Drawing.Size(75, 23);
            this.btn_view.TabIndex = 4;
            this.btn_view.Text = "Select";
            this.btn_view.UseVisualStyleBackColor = true;
            this.btn_view.Visible = false;
            this.btn_view.Click += new System.EventHandler(this.btn_view_Click);
            // 
            // btn_fin
            // 
            this.btn_fin.DialogResult = System.Windows.Forms.DialogResult.No;
            this.btn_fin.Location = new System.Drawing.Point(99, 220);
            this.btn_fin.Name = "btn_fin";
            this.btn_fin.Size = new System.Drawing.Size(75, 23);
            this.btn_fin.TabIndex = 5;
            this.btn_fin.Text = "NextRgn";
            this.btn_fin.UseVisualStyleBackColor = true;
            this.btn_fin.Click += new System.EventHandler(this.btn_fin_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(22, 40);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(186, 13);
            this.label1.TabIndex = 6;
            this.label1.Text = "Select One Request or One Response";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.Location = new System.Drawing.Point(44, 53);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(49, 13);
            this.label2.TabIndex = 7;
            this.label2.Text = " Request";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label3.Location = new System.Drawing.Point(219, 53);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(57, 13);
            this.label3.TabIndex = 8;
            this.label3.Text = " Response";
            // 
            // lbl_req
            // 
            this.lbl_req.AutoSize = true;
            this.lbl_req.Location = new System.Drawing.Point(33, 178);
            this.lbl_req.Name = "lbl_req";
            this.lbl_req.Size = new System.Drawing.Size(16, 13);
            this.lbl_req.TabIndex = 9;
            this.lbl_req.Text = "---";
            this.lbl_req.Visible = false;
            // 
            // lbl_resp
            // 
            this.lbl_resp.AutoSize = true;
            this.lbl_resp.Location = new System.Drawing.Point(191, 178);
            this.lbl_resp.Name = "lbl_resp";
            this.lbl_resp.Size = new System.Drawing.Size(16, 13);
            this.lbl_resp.TabIndex = 10;
            this.lbl_resp.Text = "---";
            this.lbl_resp.Visible = false;
            // 
            // btn_can
            // 
            this.btn_can.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_can.Location = new System.Drawing.Point(283, 220);
            this.btn_can.Name = "btn_can";
            this.btn_can.Size = new System.Drawing.Size(75, 23);
            this.btn_can.TabIndex = 11;
            this.btn_can.Text = "Cancel";
            this.btn_can.UseVisualStyleBackColor = true;
            // 
            // get_disp_ca_entry
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(380, 273);
            this.Controls.Add(this.btn_can);
            this.Controls.Add(this.lbl_resp);
            this.Controls.Add(this.lbl_req);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.btn_fin);
            this.Controls.Add(this.btn_view);
            this.Controls.Add(this.lb_resp);
            this.Controls.Add(this.lb_req);
            this.Controls.Add(this.lbl_viewed);
            this.Controls.Add(this.lbl_rgn_nm);
            this.Name = "get_disp_ca_entry";
            this.Text = "get_disp_ca_entry";
            this.Load += new System.EventHandler(this.get_disp_ca_entry_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_rgn_nm;
        private System.Windows.Forms.Label lbl_viewed;
        private System.Windows.Forms.ListBox lb_req;
        private System.Windows.Forms.ListBox lb_resp;
        private System.Windows.Forms.Button btn_view;
        private System.Windows.Forms.Button btn_fin;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label lbl_req;
        private System.Windows.Forms.Label lbl_resp;
        private System.Windows.Forms.Button btn_can;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class gtwyServer : Form
    {
        public string selt_cics = null;
        private bool isloaded = false;

        public gtwyServer(string ctg_rgn, Dictionary<string,string> svr_dict)
        {
            InitializeComponent();

            lbl_ctg_rgn.Text = string.Concat("CTG Region:", ctg_rgn);
            lb_gtwy.DataSource = new BindingSource(svr_dict, null);
            lb_gtwy.DisplayMember = "Value";
            lb_gtwy.ValueMember = "Key";
        }

        private void btn_gtwy_go_Click(object sender, EventArgs e)
        {
            if (selt_cics == null | selt_cics == "")
            {
                btn_gtwy_go.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            }
            else
            {
                btn_gtwy_go.DialogResult = System.Windows.Forms.DialogResult.OK;
            }
            this.Close();

        }

        private void lb_gtwy_SelectedValueChanged(object sender, EventArgs e)
        {
            if (isloaded)
            {
                if (lb_gtwy.SelectedIndex != -1)
                {
                    string s = (string)lb_gtwy.Text;
                    selt_cics = (string)lb_gtwy.SelectedValue;
                    btn_gtwy_go.Visible = true;
                    btn_gtwy_go.DialogResult = System.Windows.Forms.DialogResult.OK;
                    lbl_gtwy_selt_cics.Text = string.Concat("Selected CICS:", s);
                    lbl_gtwy_selt_cics.Update();
                }
            }
            }

        private void btn_gtwy_can_Click(object sender, EventArgs e)
        {
                 this.Close();
        }

        private void gtwyServer_Load(object sender, EventArgs e)
        {
            isloaded = true;

        }

        }

    }

?namespace RunCTG_ECI
{
    partial class gtwyServer
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_gtwy = new System.Windows.Forms.Label();
            this.lb_gtwy = new System.Windows.Forms.ListBox();
            this.btn_gtwy_go = new System.Windows.Forms.Button();
            this.btn_gtwy_can = new System.Windows.Forms.Button();
            this.lbl_ctg_rgn = new System.Windows.Forms.Label();
            this.lbl_gtwy_selt_cics = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // lbl_gtwy
            // 
            this.lbl_gtwy.AutoSize = true;
            this.lbl_gtwy.Location = new System.Drawing.Point(29, 50);
            this.lbl_gtwy.Name = "lbl_gtwy";
            this.lbl_gtwy.Size = new System.Drawing.Size(151, 13);
            this.lbl_gtwy.TabIndex = 0;
            this.lbl_gtwy.Text = "Select A CICS Region (Server)";
            // 
            // lb_gtwy
            // 
            this.lb_gtwy.BackColor = System.Drawing.SystemColors.Control;
            this.lb_gtwy.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.lb_gtwy.Font = new System.Drawing.Font("HE_TERMINAL", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lb_gtwy.FormattingEnabled = true;
            this.lb_gtwy.ItemHeight = 16;
            this.lb_gtwy.Location = new System.Drawing.Point(32, 76);
            this.lb_gtwy.Name = "lb_gtwy";
            this.lb_gtwy.Size = new System.Drawing.Size(200, 82);
            this.lb_gtwy.TabIndex = 1;
            this.lb_gtwy.SelectedValueChanged += new System.EventHandler(this.lb_gtwy_SelectedValueChanged);
            // 
            // btn_gtwy_go
            // 
            this.btn_gtwy_go.Location = new System.Drawing.Point(32, 213);
            this.btn_gtwy_go.Name = "btn_gtwy_go";
            this.btn_gtwy_go.Size = new System.Drawing.Size(75, 23);
            this.btn_gtwy_go.TabIndex = 2;
            this.btn_gtwy_go.Text = "Select/Go";
            this.btn_gtwy_go.UseVisualStyleBackColor = true;
            this.btn_gtwy_go.Visible = false;
            this.btn_gtwy_go.Click += new System.EventHandler(this.btn_gtwy_go_Click);
            // 
            // btn_gtwy_can
            // 
            this.btn_gtwy_can.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_gtwy_can.Location = new System.Drawing.Point(151, 213);
            this.btn_gtwy_can.Name = "btn_gtwy_can";
            this.btn_gtwy_can.Size = new System.Drawing.Size(75, 23);
            this.btn_gtwy_can.TabIndex = 3;
            this.btn_gtwy_can.Text = "Cancel";
            this.btn_gtwy_can.UseVisualStyleBackColor = true;
            this.btn_gtwy_can.Click += new System.EventHandler(this.btn_gtwy_can_Click);
            // 
            // lbl_ctg_rgn
            // 
            this.lbl_ctg_rgn.AutoSize = true;
            this.lbl_ctg_rgn.Location = new System.Drawing.Point(29, 20);
            this.lbl_ctg_rgn.Name = "lbl_ctg_rgn";
            this.lbl_ctg_rgn.Size = new System.Drawing.Size(69, 13);
            this.lbl_ctg_rgn.TabIndex = 4;
            this.lbl_ctg_rgn.Text = "CTG Region:";
            // 
            // lbl_gtwy_selt_cics
            // 
            this.lbl_gtwy_selt_cics.AutoSize = true;
            this.lbl_gtwy_selt_cics.Location = new System.Drawing.Point(39, 188);
            this.lbl_gtwy_selt_cics.Name = "lbl_gtwy_selt_cics";
            this.lbl_gtwy_selt_cics.Size = new System.Drawing.Size(16, 13);
            this.lbl_gtwy_selt_cics.TabIndex = 5;
            this.lbl_gtwy_selt_cics.Text = "---";
            // 
            // gtwyServer
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(292, 273);
            this.Controls.Add(this.lbl_gtwy_selt_cics);
            this.Controls.Add(this.lbl_ctg_rgn);
            this.Controls.Add(this.btn_gtwy_can);
            this.Controls.Add(this.btn_gtwy_go);
            this.Controls.Add(this.lb_gtwy);
            this.Controls.Add(this.lbl_gtwy);
            this.Name = "gtwyServer";
            this.Text = "gtwyServer";
            this.Load += new System.EventHandler(this.gtwyServer_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_gtwy;
        private System.Windows.Forms.ListBox lb_gtwy;
        private System.Windows.Forms.Button btn_gtwy_go;
        private System.Windows.Forms.Button btn_gtwy_can;
        private System.Windows.Forms.Label lbl_ctg_rgn;
        private System.Windows.Forms.Label lbl_gtwy_selt_cics;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>ust add a block like this to the end of your app.config!
Now, run your app again and take a look at the wonderful 
lines being added to your bin\Debug\trace.log file.

<system.diagnostics>
  <trace autoflush="true"/>
  <sources>
    <source name="System.Net" maxdatasize="1024">
      <listeners>
        <add name="TraceFile"/>
      </listeners>
    </source>
    <source name="System.Net.Sockets" maxdatasize="1024">
      <listeners>
        <add name="TraceFile"/>
      </listeners>
    </source>
  </sources>
  <trace>
  <listeners>
  <add name="AppTrace" type="System.Diagnostics.TextWriterTraceListener" initializeData="Application.trc"/>
  </listeners>
  </trace>
  <sharedListeners>
    <add name="TraceFile" type="System.Diagnostics.TextWriterTraceListener"
      initializeData="trace.log"/>
  </sharedListeners>
  <switches>
    <add name="System.Net" value="Verbose" />
    <add name="System.Net.Sockets" value="Verbose" />
    <add name="CtgTrace" value="CtgTrcLevel4" dataDumpOffset="0" dataDumpLength="128"/>
  </switches>
</system.diagnostics>


#####

<configuration>
<system.diagnostics>
<switches>
<add name="CtgTrace" value="CtgTrcLevel4" dataDumpOffset="0" dataDumpLength="128"/>
</switches>
<trace>
<listeners>
<add name="AppTrace" type="System.Diagnostics.TextWriterTraceListener" initializeData="Application.trc"/>
</listeners>
</trace>
</system.diagnostics>
</configuration>?using System;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class IterateSeltRgns : Form
    {
        private List<string> rgns_selt = new List<string>(); // List of selected regions
        //
        // dict entry key:applid and Value:port record data[] as array rgnnm ipadr socket SSL("Y" or "N")
        private Dictionary<string, string[]> rgns_dict = new Dictionary<string, string[]>();

        private int rgns_ct = 0;
        private int rgn_cur_ct = -1;
        private string rgn_cur = null;
        private string data_src = null;
        private string proc_rgns_allorone = null;
        private string ch_nm = null;
        private string h_ca = "CEMT INQUIRE TASK";
        private int h_cal = 4080;
        private string h_uid;
        private string h_pw;
//        private Form rd_ca;
//
// src_list is a list of src_data class member - which will represent a single CA src_data mbr
//          or a set of container src_data members - will be Value: on rgn_src_data_dict_req
        private List<src_data> src_list = new List<src_data>();

// rgn_src_hdr_dict_req - contains the eci request header information - class src_hdr - for each region req
        private Dictionary<string, src_hdr> rgn_src_hdr_dict_req = new Dictionary<string,src_hdr>();  // rgn name and eci hdr data

// ---------------
//        keep track of individual response CA or CnC items
//                   // as each response data item is returned, accumulate to the src_list List 
//                   // IterateSelnRgns - src_data field src_repeat_ct is set to the repeat_ct
//                   //  making each /resp item unique. 
//                   // subsequently on resp: the 'key' is rgn and src_list holds all 
//                   //   response data; in which the src_repeat_ct establishes the iteration
//                   //   number to identify the response set
//          note - request src_data items only need the original collection item in src_list
//                  because all repeat iterations use the original: but response
//                  collection items will be a set composed of groups of response items
//                  which need to be uniquely identified using the src_repeat_ct value;

// rgn_src_data_dict_req - contains the eci request data as List - one or more class src_data - for each region req
        private Dictionary<string, List<src_data>> rgn_src_data_dict_req = new Dictionary<string,List<src_data>>();  // rgn name and ca/cnc req data src

// rgn_src_data_dict_resp - contains the eci response data information - class src_hdr - empty on request, but has response src_data entries
        private Dictionary<string, List<src_data>> rgn_src_data_dict_resp = new Dictionary<string, List<src_data>>();  // rgn name and ca/cnc resp data src

        //
        // one per region request 
        // combine this and the src_data List as the dict.req entry and pass it to the ECI code
        // alone with a dict.rep collection - which we will receive the reponse data
 
        // one (for CA) to many (cnc) per region request
        //   with each instances added to the src_list List


        public IterateSeltRgns(Dictionary<string, string[]> rgns_seln_dict,
            string proc_rgns_alloronearg, string uid, string pw)
        {
            InitializeComponent();
            h_uid = uid;
            h_pw = pw;
            // create collections: one list of regions; two dict of key:rgn and val:port record[]
            rgns_selt.Clear();
            rgns_dict.Clear();
            foreach (KeyValuePair<string, string[]> rgnD in rgns_seln_dict)
            {
                rgns_selt.Add(rgnD.Key);    // List of selected regions
                rgns_dict.Add(rgnD.Key, rgnD.Value);  // Dict of selected rgns port records[]
                //               src_data tmp_src_data = new src_data();

                //               req_data tmp_req_data = new req_data();
            }
            rgns_ct = rgns_selt.Count;
            lb_selt_rgns.DataSource = rgns_selt;
            rgn_cur = rgns_selt[0];       // first region in list
            proc_rgns_allorone = proc_rgns_alloronearg;
            // 
            if (proc_rgns_alloronearg == "all")
            {
                lbl_targ_rgn.Text = "All Regions";
            }
            else
            {
                if (proc_rgns_alloronearg == "all_single")
                {
                    lbl_targ_rgn.Text = "All Regions, 1 by 1";
                }
                else
                {
                    //proc_rgns_alloronearg is set to "one"
                    rgn_cur_ct = 0;
                    lbl_targ_rgn.Text = rgns_selt[rgn_cur_ct];
                }
            }
        }

        private void radioButtons_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtn_ca.Checked)
            {
                data_src = "ca";
                btn_continue.Text = "Get CA";
                tb_ch_nm.Visible = false;
                lbl_chnm.Visible = false;
            }
            else if (rbtn_cnc.Checked)
            {
                data_src = "cnc";
                btn_continue.Text = "Get CNC";
                tb_ch_nm.Visible = true;
                lbl_chnm.Visible = true;
            }
            else if (rbtn_none.Checked)
            {
                data_src = "none";
                btn_continue.Text = "NoCA,NoCnC";
                tb_ch_nm.Visible = false;
                lbl_chnm.Visible = false;
            }
        }

        private void btn_continue_Click(object sender, EventArgs e)
        {
            /*
             * if all or all_single, then we want to get a single request CA or CNC
             *  and then process every region in the list 
             *  however: all_single will display the results as each rgn completes
             *   but all will wait till all regions are finished before presentation.
             */
            int rc = 0;
            ch_nm = tb_ch_nm.Text;

//            bool errs = false;
            if (proc_rgns_allorone == "all" | proc_rgns_allorone == "all_single")
            {
                rc = do_selt_regions(rgns_selt);
                // process one rgn at a time - one by one present response
            }
            else
            {  // proc_rgns_allorone == "one"
                List<string> rgns_selt_one = new List<string>(); // List of selected regions
                foreach (var rgn in rgns_selt)
                {
                    rgns_selt_one.Clear();
                    rgns_selt_one.Add(rgn);
                    rc = do_selt_regions(rgns_selt_one);
                    if (rc > 4) break;
                    // need to reset the src_list to get new data for specific rgn
                }
            }

        }

        private void btn_cancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_reset_Click(object sender, EventArgs e)
        {
           
        }

        private int do_eci_per_region(List<string> rgns_selt_lst)
        {
            /*
             * enter this method with rgns_selt holding list of ctg regions
             * do_eci_per_region only called by all_single and all
             */
            int rc,  max_rc = 0;
            int proc_resp = 0; // 0 used to indicate keep processing viewing
                                // -1 is used to indicate Cancel rest of requests
                                // 1 is used to indicate done with region; go to next region
            List<string> ca_req_list = new List<string>();
            List<string> ca_resp_list = new List<string>();
            /*
             * for each region in the seleted list: process each
             * all_single each rgn calls eci_req and displays resp data immed upon return
             * all        each rgn calls eci_req, accum resp data, and present disp loop at end
             * one        each rgn get unique ca or cnc, calls eci_req and displays resp data 
             *              immed upon return
            src_hdr req_hdr = new src_hdr();
            */
            src_hdr req_hdr = new src_hdr();
//
//                Dictionary<string, List<src_data>> rgn_src_data_dict_req = new Dictionary<string, List<src_data>>();
//                rgn_src_data_dict_req = (Dictionary<string, List<src_data>>) gbl_src_data_dict_req[rgn];
            List<src_data> req_data = new List<src_data>();

//                Dictionary<string, List<src_data>> rgn_src_data_dict_resp = new Dictionary<string, List<src_data>>();
//                rgn_src_data_dict_resp = (Dictionary<string, List<src_data>>)gbl_src_data_dict_resp[rgn];
            List<src_data> resp_data = new List<src_data>();

        foreach (string rgn in rgns_selt_lst)
        {
            proc_resp = 1;  // if 'all' then we want to iterat all rgns then 
            lbl_emsg.Text = String.Format("Processing REGION: {0}.", rgn);
            lbl_emsg.Update();
            req_hdr = rgn_src_hdr_dict_req[rgn];
            req_data = rgn_src_data_dict_req[rgn]; //rgn_src_data_dict_req

            resp_data = rgn_src_data_dict_resp[rgn]; //rgn_src_data_dict_req

//            int rc = do_eci(req_hdr, req_data, resp_data);
//            if (rc > max_rc) { max_rc = rc; }
// run eci_req for each region in list
            ExecECI ECI_req = new ExecECI(req_hdr);
            rc = ECI_req.ExecECIReq(req_data, resp_data);
            if (rc > max_rc)
            {
                max_rc = rc;
                if (max_rc >= 20)
                proc_rgns_allorone = string.Concat("none_error:", max_rc.ToString());
            }
        // all_single means use same command for all regions, but display one by one
        //   which allows for the option to cancel
        if ((proc_rgns_allorone == "all_single" & (req_data.Count > 0 | resp_data.Count > 0)) |
            proc_rgns_allorone == "one")
            {
             List<string> rgns_selt_one = new List<string>();
             rgns_selt_one.Add(rgn);
             proc_resp = do_display_data(rgns_selt_one);
/*
// clear the list of request and response src_data because each eci req serviced individually
             ca_req_list.Clear();
             ca_resp_list.Clear();
        // DisplayResults - first get the data to display, then display it
    //        List<string> ca_req_list = new List<string>();
    //        List<string> ca_resp_list = new List<string>();
            string Avail_item_name = "";
            foreach (src_data tmp in req_data)
            {
                Avail_item_name = string.Concat(tmp.src_name, "#", tmp.src_repeat_ct);
                ca_req_list.Add(Avail_item_name);
            }
            foreach (src_data tmp in resp_data)
            {
                Avail_item_name = string.Concat(tmp.src_name, "#", tmp.src_repeat_ct);
                ca_resp_list.Add(tmp.src_name);
            }

            string viewed_items = "";
            get_disp_ca_entry show_ca = new get_disp_ca_entry(req_hdr.src_hdr_rgn, ca_req_list, ca_resp_list);
            do
            {
                proc_resp = 0; // select req/resp view loop

                show_ca.viewed = viewed_items;
                show_ca.ShowDialog();
                // dialogresult returns
                // YES - means process selection   proc_resp = 0;
                // NO  - means go to next region   proc_resp = 1
                // Cancel - done viewing           proc_resp = -1
                var tmp_dialogresult = show_ca.DialogResult;
                if (show_ca.DialogResult == DialogResult.Yes)
                {
                    proc_resp = 0;

                    string req_resp = show_ca.req_resp;
                    int item_num = show_ca.item_num;
                    string tmp_item = string.Concat(req_resp, show_ca.req_resp_nm);
                    if (viewed_items.IndexOf(tmp_item) == -1) viewed_items = string.Concat(viewed_items, " ", tmp_item);
                    src_data disp_data = new src_data();
                    if (req_resp == "req")
                    {
                        disp_data = req_data[item_num];
                    }
                    else
                    {
                        disp_data = resp_data[item_num];
                    }
                    DisplayResults dispdata = new DisplayResults(req_hdr, disp_data);
                    dispdata.ShowDialog();
                    // display results returns dialogresult 
                    //  YES - btn for NextData - select another req/resp data (proc_resp = 0)

                    //  OK  - btn for finish  - done looking at this region  (proc_resp = 1)
                    //                         - xeq next eci call for one and all_single
                    //  Cancel - btn for cancel reset of data disp            (proc_resp = -1)
                    //                         - single and all_regions mean cancel the xeq of rest
                    //                         - all - means no more data disp - done
                    if (dispdata.DialogResult == DialogResult.Cancel)
                    {
                        proc_resp = -1;
                        //    show_ca.DialogResult = DialogResult.Cancel;
                    }
                    else if (dispdata.DialogResult == DialogResult.No)
                    {
                        proc_resp = 1;
                    }
                    else
                    {
                        proc_resp = 0;
                    }
                    // DispData(disp_data, RegionName, tmp_item, dest_kix_codepage); 
                }
                else
                {
                    if (show_ca.DialogResult == DialogResult.No)
                    {
                        proc_resp = 1; // next rgn
                    }
                    else
                    {
                        proc_resp = -1; // cancel all
                    }
                    Console.WriteLine("IterateSeltRgns.do_eci_pre_region:all_single: dispdata.ShowDialog() Cancel. good bye");
                    this.Close();
                }

            } while (proc_resp == 0 );
 */
            if (proc_resp == 1)
            {
                Console.WriteLine("IterateSeltRgns.do_eci_pre_region:all_single:" +
                    " dispdata finished. Go next region (proc_resp = 1)");
                max_rc = 4;

            }
            else
            {
                Console.WriteLine("IterateSeltRgns.do_eci_pre_region:all_single:" +
                    " dispdata Cancel. Cancel rest. (proc_resp = -1)");
                max_rc = 20;

            }
            Console.WriteLine("IterateSeltRgns:all_single:finished all rgns");
           }  // end of all_single logic xeq 1 by one
        if (proc_resp == 1)
        {
            Console.WriteLine("IterateSeltRgns: finished rgn:{0}:iterate next rgn (proc_resp={1})", rgn, proc_resp);
        }
        else
        {
            Console.WriteLine("IterateSeltRgns: finished rgn:{0}:Cancel selected (proc_resp={1})", rgn, proc_resp);
            break;
        }
       }  // end of for each rgn run the eci_req
        Console.WriteLine("IterateSeltRgns.do_eci_pre_region: Out of ECI loop (proc_resp={0})", proc_resp);
        /*
         *  we have looped thru all rgn in rgns_selt; all_single and single are done
         *  so all we have to do is process disp req/rep data for 'all' regions
         */

        if (proc_rgns_allorone == "all")
            {
     Console.WriteLine("IterateSeltRgns.do_eci_pre_region:'all':enter dispdata loop for all");
            proc_resp = do_display_data(rgns_selt_lst);

            if (proc_resp == 1)
            {
                Console.WriteLine("IterateSeltRgns.do_eci_pre_region:All:" +
                    " dispdata finished. Go next region (proc_resp = 1)");
                max_rc = 4;

            }
            else
            {
                Console.WriteLine("IterateSeltRgns.do_eci_pre_region:All:" +
                    " dispdata Cancel. Cancel rest. (proc_resp = -1)");
                max_rc = 20;

            }
            Console.WriteLine("IterateSeltRgns:all_single:finished all rgns");
        }  // end of 'All' regions viewing
        Console.WriteLine("IterateSeltRgns.do_eci_pre_region: returning to caller. ");
        return max_rc;
      }

        private int do_selt_regions(List<string> rgns_selt_lst)
        {
            int rc = 0;
            // for all regions and all_single, we want to collect a single set of 
            //  request and response, ca or cnc, and initialize the src_data objects
            //  with the same request data (ca or cnc) objects.
            string proc_rgns_string = "";
            if (proc_rgns_allorone == "one")
            {
                proc_rgns_string = rgns_selt_lst[0].ToUpper();
            } else {
                proc_rgns_string = "AllRegions";
            }

            bool errs = false;
            src_hdr rgn_hdr = new src_hdr();
            if (data_src == "ca")
            {
                src_list.Clear();
                get_CA rd_ca = new get_CA(proc_rgns_string, src_list, rgn_hdr);
                rd_ca.get_ca_data = "CEMT INQUIRE TASK";
                rd_ca.get_ca_l = 4080;
                rd_ca.ShowDialog();
                var tmp = rd_ca.DialogResult;
                if (tmp == DialogResult.Cancel)
                {
                    this.Close();
                }
                int t = src_list.Count;
                if (t < 0)
                {
                    lbl_emsg.Text = "Warning - No COMMAREA item created?";
                }
                else
                {
                    lbl_emsg.Text = String.Format("COMMAREA created {0:00} items.", t);
                }
                h_ca = rd_ca.get_ca_data;
                h_cal = rd_ca.get_ca_l;
            }
//               
            else if (data_src == "cnc")
            {
                errs = false;
                ch_nm = tb_ch_nm.Text.TrimEnd();
                if (ch_nm == "")
                {
                    lbl_emsg.Text = "Channel Name Required";
                    errs = true;
                }
                else
                {
                    string compare = ch_nm.Substring(0, 1);
                    Regex regex = new Regex(@"[\d]");
                    if (regex.IsMatch(compare))
                    {
                        lbl_emsg.Text = "Channel Name Invalid (leading char)";
                        errs = true;
                    }
                    else
                    {
                        Regex regexS = new Regex(@"[\s]");
                        if (regexS.IsMatch(ch_nm))
                        {
                            lbl_emsg.Text = "Channel Name Invalid (spaces)";
                            errs = true;
                        }
                        else
                        {
                            rgn_hdr.src_hdr_ch_nm = ch_nm;
                            src_list.Clear();
                            //                        src_hdr rgn_hdr = new src_hdr();
                            get_CnC rd_cnc = new get_CnC(proc_rgns_string, src_list, rgn_hdr);
                            do
                            {
                                rd_cnc.ch_nm = ch_nm;
                                rd_cnc.ShowDialog();
                                var tmp = rd_cnc.DialogResult;
                                if (tmp == DialogResult.Cancel | tmp == DialogResult.No)
                                {
                                    rc = 4;
                                    if (tmp == DialogResult.Cancel) rc = 8;
                                    rd_cnc.Close();
                                    return rc;
                                }
                                int t = src_list.Count;
                                if (t < 0)
                                {
                                    lbl_emsg.Text = "Warning - No Containers created?";
                                }
                                else
                                {
                                    lbl_emsg.Text = String.Format("Containers created {0:00} items.", t);

                                }
                            } while (src_list.Count < 1);
                            if (src_list.Count < 1)
                            {
                                lbl_emsg.Text = String.Format("get_CnC dialogue returned zero CN?????");
                                errs = true;
                            }
                        } // end of ch_nm validation
                    } // ch_nm controlled by errs
                }
            }
            else
            {    // data_src = none noCA noCnC
                src_list.Clear();
                //                        src_hdr rgn_hdr = new src_hdr();

            }
            // does not matter CA, CnC or none
            //  each rgn get a cpy of the req_hdr req and resp  src_data CA/CnC/none

            if (errs == false)
            {
                foreach (var rgn in rgns_selt_lst)
                {
                    src_hdr new_rgn_hdr = new src_hdr();
                    new_rgn_hdr = Program.DeepCopy(rgn_hdr);
                    //hdr_data_copy(rgn_hdr, new_rgn_hdr);
                    new_rgn_hdr.src_hdr_uid = h_uid;
                    new_rgn_hdr.src_hdr_pw = h_pw;
                    new_rgn_hdr.src_hdr_rgn = rgn;
                    string[] s = rgns_dict[rgn];
                    new_rgn_hdr.src_hdr_dest_ip = s[0];
                    new_rgn_hdr.src_hdr_dest_port = s[1];
                    new_rgn_hdr.src_hdr_dest_SSL = s[3];
                    rgn_src_hdr_dict_req.Add(rgn, new_rgn_hdr); // one dict entry per rgn with respective src_hdr

                    List<src_data> new_src_list = new List<src_data>();
                    foreach (src_data h_src_data in src_list)
                    {
                        src_data new_src_data = new src_data();
                        new_src_data = Program.DeepCopy(h_src_data);
                        //                               src_list_copy(h_src_data, new_src_data);
                        new_src_list.Add(new_src_data);
                    }

                    rgn_src_data_dict_req.Add(rgn, new_src_list);
                    rgn_src_data_dict_resp.Add(rgn, new List<src_data>());
                    //                            gbl_src_data_dict_req.Add(rgn, rgn_src_data_dict_req);
                    //                            gbl_src_data_dict_resp.Add(rgn, rgn_src_data_dict_resp);
                }
                rc = do_eci_per_region(rgns_selt_lst);
                // launch get_ca_data form("all", src_list);
                // check for dialog cancel
                btn_continue.Visible = false;
                btn_continue.DialogResult = System.Windows.Forms.DialogResult.Ignore;
                btn_reset.Visible = false;
                btn_cancel.Text = "DONE";
                lbl_emsg.Text = String.Format("Finished Processing All Regions; MaxRC:{0}", rc.ToString());
                lbl_emsg.Update();
            }
            else
            {
                rc = 8;
            }
            return rc;
        }

        private int do_display_data(List<string> rgns_selt_lst)
        {
            int proc_resp = 0; // 0 used to indicate keep processing viewing
            // -1 is used to indicate Cancel rest of requests
            // 1 is used to indicate done with region; go to next region
            List<string> ca_req_list = new List<string>();
            List<string> ca_resp_list = new List<string>();
            /*
             * for each region in the seleted list: process each
             * all_single each rgn calls eci_req and displays resp data immed upon return
             * all        each rgn calls eci_req, accum resp data, and present disp loop at end
             * one        each rgn get unique ca or cnc, calls eci_req and displays resp data 
             *              immed upon return
            src_hdr req_hdr = new src_hdr();
            */
            src_hdr req_hdr = new src_hdr();
            //
            //                Dictionary<string, List<src_data>> rgn_src_data_dict_req = new Dictionary<string, List<src_data>>();
            //                rgn_src_data_dict_req = (Dictionary<string, List<src_data>>) gbl_src_data_dict_req[rgn];
            List<src_data> req_data = new List<src_data>();

            //                Dictionary<string, List<src_data>> rgn_src_data_dict_resp = new Dictionary<string, List<src_data>>();
            //                rgn_src_data_dict_resp = (Dictionary<string, List<src_data>>)gbl_src_data_dict_resp[rgn];
            List<src_data> resp_data = new List<src_data>();// clear the list of request and response src_data because each eci req serviced individually
            ca_req_list.Clear();
            ca_resp_list.Clear();
            // DisplayResults - first get the data to display, then display it
            //        List<string> ca_req_list = new List<string>();
            //        List<string> ca_resp_list = new List<string>();

            /*
             * all regions req/resp data presented in total
             * need to keep track of the which item on the display list
             * corresponds to the rgn, and the selected data
             * (item num associated with req_data/resp_data List<src_data> item_num
             * so we are creating a req and resp dict where the key is composed of
             * rgn||"#"||src_data.src_name||"#"||src_data.src_repeat_ct
             * and the dict value is the actual item_num from the respective
             * rgn req_data/resp_data List(src_data>
             * expl: rgna has single CA req and two CA (repeat_ct 00 and 01)
             * corresponds to rgna.req_data[0] and rgna.resp_data[0] and [1]
             *      rgnb has single CA req and two CA (repeat_ct 00 and 01)
             * corresponds to rgnb.req_data[0] and rgnb.resp_data[0] and [1]
             * looping thu each rgn req and resp data, we have dict entries
             * req key: rnga#CA#00 value:0     resp key:rgna#CA#00 value:0
             *                                 resp key:rgna#CA#01 value:1
             * req key: rngb#CA#00 value:0     resp key:rgnb#CA#00 value:0
             *                                 resp key:rgnb#CA#00 value:1
             * the selection Lists will present
             * req: rnga#CA#00                 resp:rnga#CA#00
             *      rngb#CA#00                      rnga#CA#01
             *                                      rngb#CA#00
             *                                      rngb#CA#01
             * selecting one to display returns the 'key'
             *  
             * use the returned req_resp field to determine which dict to look at
             * obtain the associated req/resp dict 'value' (item num of the real data List[]
             * parsing the 'key' to extract the rgn name,
             * and then read the actual req/resp dict items for the region
             * from the rgn_src_data_dict_req or rgn_src_data_dict_resp
             * which is keyed by rgn, and holds the src_data in a List
             * where the 'value' is the item from thei src_data List
             * whew.....
             */
            Dictionary<string, int> req_items = new Dictionary<string, int>();
            Dictionary<string, int> resp_items = new Dictionary<string, int>();

            foreach (string rgn in rgns_selt_lst)
            {
                //              req_hdr = rgn_src_hdr_dict_req[rgn];
                req_data = rgn_src_data_dict_req[rgn]; //rgn_src_data_dict_req

                resp_data = rgn_src_data_dict_resp[rgn]; //rgn_src_data_dict_req

                string Avail_item_name = "";
                int Avail_item_num = 0;
                foreach (src_data tmp in req_data) // for each rgn in respective item# order
                {
                    Avail_item_name = string.Concat(rgn, "#", tmp.src_name, "#", tmp.src_repeat_ct);
                    req_items.Add(Avail_item_name, Avail_item_num);
                    ca_req_list.Add(Avail_item_name);
                    Avail_item_num++;  // bump to next item in the src_data List
                }
                Avail_item_num = 0;
                foreach (src_data tmp in resp_data)
                {
                    Avail_item_name = string.Concat(rgn, "#", tmp.src_name, "#", tmp.src_repeat_ct);
                    resp_items.Add(Avail_item_name, Avail_item_num);
                    ca_resp_list.Add(Avail_item_name);
                    Avail_item_num++;
                }
            }
            string viewed_items = "";
            get_disp_ca_entry show_ca = new get_disp_ca_entry((string)"AllRegions", ca_req_list, ca_resp_list);
            do
            {
                proc_resp = 0; // select req/resp view loop

                show_ca.viewed = viewed_items;
                show_ca.ShowDialog();
                // dialogresult returns
                // YES - means process selection   proc_resp = 0;
                // NO  - means go to next region   proc_resp = 1
                // Cancel - done viewing           proc_resp = -1
                if (show_ca.DialogResult == DialogResult.Yes)
                {
                    proc_resp = 0;

                    string req_resp = show_ca.req_resp; //'req' or 'resp'
                    int item_num = 0;
                    string tmp_item = string.Concat(req_resp, show_ca.req_resp_nm);
                    if (viewed_items.IndexOf(tmp_item) == -1) viewed_items = string.Concat(viewed_items, " ", tmp_item);
                    src_data disp_data = new src_data();
                    if (req_resp == "req")
                    {
                        string[] tmp_ary = show_ca.req_resp_nm.Split('#');
                        string tmp_rgn = tmp_ary[0]; // got the rgn name
                        req_hdr = rgn_src_hdr_dict_req[tmp_rgn];
                        req_data = rgn_src_data_dict_req[tmp_rgn];
                        item_num = req_items[show_ca.req_resp_nm];
                        disp_data = req_data[item_num];
                    }
                    else
                    {
                        string[] tmp_ary = show_ca.req_resp_nm.Split('#');
                        string tmp_rgn = tmp_ary[0]; // got the rgn name
                        req_hdr = rgn_src_hdr_dict_req[tmp_rgn];
                        resp_data = rgn_src_data_dict_resp[tmp_rgn];
                        item_num = resp_items[show_ca.req_resp_nm];
                        disp_data = resp_data[item_num];
                    }
                    DisplayResults dispdata = new DisplayResults(req_hdr, disp_data);
                    dispdata.ShowDialog();
                    // display results returns dialogresult 
                    //  YES - btn for NextData - select another req/resp data (proc_resp = 0)

                    //  OK  - btn for finish  - done looking at this region  (proc_resp = 1)
                    //                         - xeq next eci call for one and all_single
                    //  Cancel - btn for cancel reset of data disp            (proc_resp = -1)
                    //                         - single and all_regions mean cancel the xeq of rest
                    //                         - all - means no more data disp - done
                    if (dispdata.DialogResult == DialogResult.Cancel)
                    {
                        proc_resp = -1;
                        //    show_ca.DialogResult = DialogResult.Cancel;
                    }
                    else if (dispdata.DialogResult == DialogResult.No)
                    {
                        proc_resp = 1;
                    }
                    else
                    {
                        proc_resp = 0;
                    }
                    // DispData(disp_data, RegionName, tmp_item, dest_kix_codepage); 
                }
                else
                {
                    if (show_ca.DialogResult == DialogResult.No)
                    {
                        proc_resp = 1; // next rgn
                    }
                    else
                    {
                        proc_resp = -1; // cancel all
                    }
                    Console.WriteLine("IterateSeltRgns.do_eci_pre_region:All: dispdata.ShowDialog() Cancel. good bye");
                    this.Close();
                }

            } while (proc_resp == 0);
            return proc_resp;
        }

        private void tb_ch_nm_Validating(object sender, CancelEventArgs e)
        {
            string s = tb_ch_nm.Text.TrimEnd(' ');
            if (s == "")
            {
                lbl_emsg.Text = "Channel Name Required";
                e.Cancel = true;
                return;
            }
            string compare = s.Substring(0, 1);
            Regex regex = new Regex(@"[\d]");
            if (regex.IsMatch(compare))
            {
                lbl_emsg.Text = "Channel Name Invalid (leading char)";
                e.Cancel = true;
                return;
            }
            Regex regexS = new Regex(@"[\s]");
            if (regexS.IsMatch(s))
            {
                lbl_emsg.Text = "Channel Name Invalid (spaces)";
                e.Cancel = true;
                return;
            }
            ch_nm = s;
            e.Cancel = false;
        }
    }
}

?namespace RunCTG_ECI
{
    partial class IterateSeltRgns
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_ca_cnc = new System.Windows.Forms.Label();
            this.lbl_targ_rgn = new System.Windows.Forms.Label();
            this.lb_selt_rgns = new System.Windows.Forms.ListBox();
            this.gb_ca_cnc = new System.Windows.Forms.GroupBox();
            this.rbtn_none = new System.Windows.Forms.RadioButton();
            this.rbtn_cnc = new System.Windows.Forms.RadioButton();
            this.rbtn_ca = new System.Windows.Forms.RadioButton();
            this.btn_continue = new System.Windows.Forms.Button();
            this.btn_cancel = new System.Windows.Forms.Button();
            this.btn_reset = new System.Windows.Forms.Button();
            this.tb_ch_nm = new System.Windows.Forms.TextBox();
            this.lbl_chnm = new System.Windows.Forms.Label();
            this.lbl_emsg = new System.Windows.Forms.Label();
            this.gb_ca_cnc.SuspendLayout();
            this.SuspendLayout();
            // 
            // lbl_ca_cnc
            // 
            this.lbl_ca_cnc.AutoSize = true;
            this.lbl_ca_cnc.Location = new System.Drawing.Point(13, 13);
            this.lbl_ca_cnc.Name = "lbl_ca_cnc";
            this.lbl_ca_cnc.Size = new System.Drawing.Size(142, 13);
            this.lbl_ca_cnc.TabIndex = 0;
            this.lbl_ca_cnc.Text = "Select Commarea or Cnc for:";
            // 
            // lbl_targ_rgn
            // 
            this.lbl_targ_rgn.AutoSize = true;
            this.lbl_targ_rgn.Location = new System.Drawing.Point(58, 26);
            this.lbl_targ_rgn.Name = "lbl_targ_rgn";
            this.lbl_targ_rgn.Size = new System.Drawing.Size(36, 13);
            this.lbl_targ_rgn.TabIndex = 1;
            this.lbl_targ_rgn.Text = "region";
            // 
            // lb_selt_rgns
            // 
            this.lb_selt_rgns.BackColor = System.Drawing.SystemColors.Control;
            this.lb_selt_rgns.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.lb_selt_rgns.FormattingEnabled = true;
            this.lb_selt_rgns.Location = new System.Drawing.Point(195, 38);
            this.lb_selt_rgns.Name = "lb_selt_rgns";
            this.lb_selt_rgns.Size = new System.Drawing.Size(75, 104);
            this.lb_selt_rgns.TabIndex = 2;
            // 
            // gb_ca_cnc
            // 
            this.gb_ca_cnc.Controls.Add(this.rbtn_none);
            this.gb_ca_cnc.Controls.Add(this.rbtn_cnc);
            this.gb_ca_cnc.Controls.Add(this.rbtn_ca);
            this.gb_ca_cnc.Location = new System.Drawing.Point(16, 55);
            this.gb_ca_cnc.Name = "gb_ca_cnc";
            this.gb_ca_cnc.Size = new System.Drawing.Size(154, 91);
            this.gb_ca_cnc.TabIndex = 3;
            this.gb_ca_cnc.TabStop = false;
            this.gb_ca_cnc.Text = "Data Source";
            // 
            // rbtn_none
            // 
            this.rbtn_none.AutoSize = true;
            this.rbtn_none.Location = new System.Drawing.Point(7, 66);
            this.rbtn_none.Name = "rbtn_none";
            this.rbtn_none.Size = new System.Drawing.Size(99, 17);
            this.rbtn_none.TabIndex = 2;
            this.rbtn_none.TabStop = true;
            this.rbtn_none.Text = "No CA, No CnC";
            this.rbtn_none.UseVisualStyleBackColor = true;
            this.rbtn_none.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // rbtn_cnc
            // 
            this.rbtn_cnc.AutoSize = true;
            this.rbtn_cnc.Location = new System.Drawing.Point(7, 43);
            this.rbtn_cnc.Name = "rbtn_cnc";
            this.rbtn_cnc.Size = new System.Drawing.Size(144, 17);
            this.rbtn_cnc.TabIndex = 1;
            this.rbtn_cnc.TabStop = true;
            this.rbtn_cnc.Text = "Channel and Container(s)";
            this.rbtn_cnc.UseVisualStyleBackColor = true;
            this.rbtn_cnc.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // rbtn_ca
            // 
            this.rbtn_ca.AutoSize = true;
            this.rbtn_ca.Location = new System.Drawing.Point(7, 20);
            this.rbtn_ca.Name = "rbtn_ca";
            this.rbtn_ca.Size = new System.Drawing.Size(75, 17);
            this.rbtn_ca.TabIndex = 0;
            this.rbtn_ca.TabStop = true;
            this.rbtn_ca.Text = "Commarea";
            this.rbtn_ca.UseVisualStyleBackColor = true;
            this.rbtn_ca.CheckedChanged += new System.EventHandler(this.radioButtons_CheckedChanged);
            // 
            // btn_continue
            // 
            this.btn_continue.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.btn_continue.Location = new System.Drawing.Point(20, 256);
            this.btn_continue.Name = "btn_continue";
            this.btn_continue.Size = new System.Drawing.Size(75, 23);
            this.btn_continue.TabIndex = 4;
            this.btn_continue.Text = "Continue";
            this.btn_continue.UseVisualStyleBackColor = true;
            this.btn_continue.Click += new System.EventHandler(this.btn_continue_Click);
            // 
            // btn_cancel
            // 
            this.btn_cancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btn_cancel.Location = new System.Drawing.Point(195, 257);
            this.btn_cancel.Name = "btn_cancel";
            this.btn_cancel.Size = new System.Drawing.Size(75, 23);
            this.btn_cancel.TabIndex = 5;
            this.btn_cancel.Text = "Cancel";
            this.btn_cancel.UseVisualStyleBackColor = true;
            this.btn_cancel.Click += new System.EventHandler(this.btn_cancel_Click);
            // 
            // btn_reset
            // 
            this.btn_reset.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.btn_reset.Location = new System.Drawing.Point(23, 152);
            this.btn_reset.Name = "btn_reset";
            this.btn_reset.Size = new System.Drawing.Size(75, 23);
            this.btn_reset.TabIndex = 6;
            this.btn_reset.Text = "Reset";
            this.btn_reset.UseVisualStyleBackColor = true;
            this.btn_reset.Click += new System.EventHandler(this.btn_reset_Click);
            // 
            // tb_ch_nm
            // 
            this.tb_ch_nm.Location = new System.Drawing.Point(135, 181);
            this.tb_ch_nm.MaxLength = 16;
            this.tb_ch_nm.Name = "tb_ch_nm";
            this.tb_ch_nm.Size = new System.Drawing.Size(100, 20);
            this.tb_ch_nm.TabIndex = 8;
            this.tb_ch_nm.Text = "channelname";
            this.tb_ch_nm.Visible = false;
            this.tb_ch_nm.Validating += new System.ComponentModel.CancelEventHandler(this.tb_ch_nm_Validating);
            // 
            // lbl_chnm
            // 
            this.lbl_chnm.AutoSize = true;
            this.lbl_chnm.Location = new System.Drawing.Point(24, 184);
            this.lbl_chnm.Name = "lbl_chnm";
            this.lbl_chnm.Size = new System.Drawing.Size(105, 13);
            this.lbl_chnm.TabIndex = 9;
            this.lbl_chnm.Text = "Enter Channel Name";
            this.lbl_chnm.Visible = false;
            // 
            // lbl_emsg
            // 
            this.lbl_emsg.AutoSize = true;
            this.lbl_emsg.Location = new System.Drawing.Point(20, 240);
            this.lbl_emsg.MaximumSize = new System.Drawing.Size(330, 20);
            this.lbl_emsg.Name = "lbl_emsg";
            this.lbl_emsg.Size = new System.Drawing.Size(202, 13);
            this.lbl_emsg.TabIndex = 10;
            this.lbl_emsg.Text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
            // 
            // IterateSeltRgns
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(292, 293);
            this.Controls.Add(this.lbl_emsg);
            this.Controls.Add(this.lbl_chnm);
            this.Controls.Add(this.tb_ch_nm);
            this.Controls.Add(this.btn_reset);
            this.Controls.Add(this.btn_cancel);
            this.Controls.Add(this.btn_continue);
            this.Controls.Add(this.gb_ca_cnc);
            this.Controls.Add(this.lb_selt_rgns);
            this.Controls.Add(this.lbl_targ_rgn);
            this.Controls.Add(this.lbl_ca_cnc);
            this.Name = "IterateSeltRgns";
            this.Text = "IterateSeltRgns";
            this.gb_ca_cnc.ResumeLayout(false);
            this.gb_ca_cnc.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_ca_cnc;
        private System.Windows.Forms.Label lbl_targ_rgn;
        private System.Windows.Forms.ListBox lb_selt_rgns;
        private System.Windows.Forms.GroupBox gb_ca_cnc;
        private System.Windows.Forms.RadioButton rbtn_cnc;
        private System.Windows.Forms.RadioButton rbtn_ca;
        private System.Windows.Forms.Button btn_continue;
        private System.Windows.Forms.Button btn_cancel;
        private System.Windows.Forms.Button btn_reset;
        private System.Windows.Forms.TextBox tb_ch_nm;
        private System.Windows.Forms.Label lbl_chnm;
        private System.Windows.Forms.Label lbl_emsg;
        private System.Windows.Forms.RadioButton rbtn_none;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;
using System.Collections.Generic;
using System.ComponentModel;
//using System.Data;
//using System.Drawing;
//using System.Linq;
using System.Text;
using System.Security.Cryptography;
//using System.Threading.Tasks;
using System.Windows.Forms;

namespace RunCTG_ECI
{
    public partial class Msg_Digest : Form
    {
        private src_data md_pg_data = new src_data();
        private char md_pg_fmt_data_encode;
        private byte[] md_A_ary;
        private int md_A_aryl;
        private byte[] md_E_ary;
        private int md_E_aryl;
        private string md_rgn;
        private string md_ch_nm;
        private string md_cn_nm;


        public Msg_Digest(src_data md_src_data, string rgn, string ch_nm)
        {
            Encoding utf8 = Encoding.UTF8;
            Encoding ascii = Encoding.ASCII;
            Encoding unicode = Encoding.Unicode;
            Encoding ibm037 = Encoding.GetEncoding(037);

            InitializeComponent();
            md_pg_data = md_src_data;
            md_pg_fmt_data_encode = md_pg_data.src_fmt_data_encode;
            md_rgn = rgn;
            md_ch_nm = ch_nm;
            md_cn_nm = md_src_data.src_name;
            lbl_rgn.Text = rgn.ToUpper();

            lbl_ch_nm.Text = md_ch_nm;
            lbl_cn_nm.Text = md_cn_nm;
            lbl_ascii.Text = "ASCII SHA1";
            lbl_ebcdic.Text = "EBCDIC SHA1";
            md_A_aryl = md_src_data.src_l;
            md_E_aryl = md_src_data.src_l;
            Array.Resize(ref md_A_ary, md_A_aryl);
            Array.Resize(ref md_E_ary, md_E_aryl);
            switch (md_pg_fmt_data_encode)
            {
                case 'a':
                case 'A':
                    {
                        Array.Copy(md_pg_data.b_src_ary, md_A_ary, md_A_aryl);
                        md_E_ary = Encoding.Convert(ascii, ibm037, md_A_ary);
                        tb_ascii_md.Text = "ASCII:\n" + getHashA(md_A_ary);
                        tb_ebcdic_md.Text = "EBCDIC:\n" + getHashA(md_E_ary);
                        break;
                    }
                case 'x':
                case 'X':
                    {
                        Array.Copy(md_pg_data.b_src_ary, md_A_ary, md_A_aryl);
                        tb_ebcdic_md.Visible = false;
                        tb_ascii_md.Text = "ASCII:\n" + getHashA(md_A_ary);
                        break;
                    }
                case 'e':
                case 'E':
                    {
                        Array.Copy(md_pg_data.b_src_ary, md_E_ary, md_E_aryl);
                        md_A_ary = Encoding.Convert(ibm037, ascii, md_E_ary);
                        tb_ascii_md.Text = "ASCII:\n" + getHashA(md_A_ary);
                        tb_ebcdic_md.Text = "EBCDIC:\n" + getHashA(md_E_ary);
                        break;
                    }
            }

        }

        private string getHashA(byte[] b)
        {
            HashAlgorithm HasherSHA1 = new SHA1CryptoServiceProvider();
            HashAlgorithm HasherSHA256 = new SHA256CryptoServiceProvider();
            HashAlgorithm HasherSHA512 = new SHA512CryptoServiceProvider();
            byte[] bsha1 = HasherSHA1.ComputeHash(b);
            byte[] bsha256 = HasherSHA256.ComputeHash(b);
            byte[] bsha512 = HasherSHA512.ComputeHash(b);
            StringBuilder sbA = new StringBuilder(2000);
            sbA.Append("SHA1:");
            sbA.Append(BitConverter.ToString(bsha1).Replace("-", "").ToLowerInvariant().Trim()).Append("\n");
            sbA.Append("SHA256:").Append(BitConverter.ToString(bsha256).Replace("-", "").ToLowerInvariant().Trim()).Append("\n");
            sbA.Append("SHA512:").Append(BitConverter.ToString(bsha512).Replace("-", "").ToLowerInvariant().Trim()).Append("\n");
            return sbA.ToString();
        }
    }
}
?namespace RunCTG_ECI
{
    partial class Msg_Digest
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbl_rgn = new System.Windows.Forms.Label();
            this.lbl_ch_nm = new System.Windows.Forms.Label();
            this.lbl_cn_nm = new System.Windows.Forms.Label();
            this.tb_ascii_md = new System.Windows.Forms.TextBox();
            this.tb_ebcdic_md = new System.Windows.Forms.TextBox();
            this.lbl_ascii = new System.Windows.Forms.Label();
            this.lbl_ebcdic = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // lbl_rgn
            // 
            this.lbl_rgn.AutoSize = true;
            this.lbl_rgn.Location = new System.Drawing.Point(13, 9);
            this.lbl_rgn.Name = "lbl_rgn";
            this.lbl_rgn.Size = new System.Drawing.Size(42, 13);
            this.lbl_rgn.TabIndex = 0;
            this.lbl_rgn.Text = "rgn_nm";
            // 
            // lbl_ch_nm
            // 
            this.lbl_ch_nm.AutoSize = true;
            this.lbl_ch_nm.Location = new System.Drawing.Point(13, 33);
            this.lbl_ch_nm.Name = "lbl_ch_nm";
            this.lbl_ch_nm.Size = new System.Drawing.Size(54, 13);
            this.lbl_ch_nm.TabIndex = 1;
            this.lbl_ch_nm.Text = "ch_or_CA";
            // 
            // lbl_cn_nm
            // 
            this.lbl_cn_nm.AutoSize = true;
            this.lbl_cn_nm.Location = new System.Drawing.Point(13, 56);
            this.lbl_cn_nm.Name = "lbl_cn_nm";
            this.lbl_cn_nm.Size = new System.Drawing.Size(51, 13);
            this.lbl_cn_nm.TabIndex = 2;
            this.lbl_cn_nm.Text = "cn_or CA";
            // 
            // tb_ascii_md
            // 
            this.tb_ascii_md.BackColor = System.Drawing.SystemColors.Control;
            this.tb_ascii_md.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.tb_ascii_md.Font = new System.Drawing.Font("HE_TERMINAL", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_ascii_md.Location = new System.Drawing.Point(16, 88);
            this.tb_ascii_md.MaxLength = 2000000;
            this.tb_ascii_md.Multiline = true;
            this.tb_ascii_md.Name = "tb_ascii_md";
            this.tb_ascii_md.ReadOnly = true;
            this.tb_ascii_md.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.tb_ascii_md.Size = new System.Drawing.Size(250, 81);
            this.tb_ascii_md.TabIndex = 3;
            // 
            // tb_ebcdic_md
            // 
            this.tb_ebcdic_md.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.tb_ebcdic_md.Font = new System.Drawing.Font("HE_TERMINAL", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tb_ebcdic_md.Location = new System.Drawing.Point(16, 190);
            this.tb_ebcdic_md.MaxLength = 2000000;
            this.tb_ebcdic_md.Multiline = true;
            this.tb_ebcdic_md.Name = "tb_ebcdic_md";
            this.tb_ebcdic_md.ReadOnly = true;
            this.tb_ebcdic_md.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.tb_ebcdic_md.Size = new System.Drawing.Size(250, 81);
            this.tb_ebcdic_md.TabIndex = 4;
            // 
            // lbl_ascii
            // 
            this.lbl_ascii.AutoSize = true;
            this.lbl_ascii.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_ascii.Location = new System.Drawing.Point(114, 72);
            this.lbl_ascii.Name = "lbl_ascii";
            this.lbl_ascii.Size = new System.Drawing.Size(43, 9);
            this.lbl_ascii.TabIndex = 5;
            this.lbl_ascii.Text = "ASCII SHA";
            // 
            // lbl_ebcdic
            // 
            this.lbl_ebcdic.AutoSize = true;
            this.lbl_ebcdic.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lbl_ebcdic.Location = new System.Drawing.Point(114, 178);
            this.lbl_ebcdic.Name = "lbl_ebcdic";
            this.lbl_ebcdic.Size = new System.Drawing.Size(53, 9);
            this.lbl_ebcdic.TabIndex = 6;
            this.lbl_ebcdic.Text = "EBCDIC SHA";
            // 
            // Msg_Digest
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(287, 282);
            this.Controls.Add(this.lbl_ebcdic);
            this.Controls.Add(this.lbl_ascii);
            this.Controls.Add(this.tb_ebcdic_md);
            this.Controls.Add(this.tb_ascii_md);
            this.Controls.Add(this.lbl_cn_nm);
            this.Controls.Add(this.lbl_ch_nm);
            this.Controls.Add(this.lbl_rgn);
            this.Name = "Msg_Digest";
            this.Text = "Msg_Digest";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbl_rgn;
        private System.Windows.Forms.Label lbl_ch_nm;
        private System.Windows.Forms.Label lbl_cn_nm;
        private System.Windows.Forms.TextBox tb_ascii_md;
        private System.Windows.Forms.TextBox tb_ebcdic_md;
        private System.Windows.Forms.Label lbl_ascii;
        private System.Windows.Forms.Label lbl_ebcdic;
    }
}?<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>?using System;  // required for Serializable()
namespace RunCTG_ECI
{
        [Serializable()]
    public class pg_data
        {
        public int pg_offset = 0;
        public string s_str = "";
        public string a_str = "";
        public string e_str = "";
        }
}
?using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

namespace RunCTG_ECI
{

    static class Program
    {

        public static T DeepCopy<T>(T item)
        {
            BinaryFormatter formatter = new BinaryFormatter();
            MemoryStream stream = new MemoryStream();
            formatter.Serialize(stream, item);
            stream.Seek(0, SeekOrigin.Begin);
            T result = (T)formatter.Deserialize(stream);
            stream.Close();
            return result;
        }

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            string[] args = Environment.GetCommandLineArgs();
            foreach (string arg in args)
            {
                Console.WriteLine("Arg:{0}", arg);
            }
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
?using System;
using System.IO;
using System.Collections.Generic;
//using System.Linq;
using System.Text;
//using System.Threading.Tasks;

namespace RunCTG_ECI
{
    class ReadPorts
    {
        public Dictionary<string, string[]> port_records_list = new Dictionary<string,string[]>();  // hold file records (0 is empty)
        public List<string> rgns = new List<string>();	     // region names
        public List<string> rgns_displist = new List<string>(); // display list for form
//        public Dictionary<int, string> rgnsItem = new Dictionary<int, string>(); //list of sel# with rgn name
//        public Dictionary<string, string> rgnsAdr = new Dictionary<string, string>();
//        public Dictionary<string, string> rgnsSock = new Dictionary<string, string>();
//        public Dictionary<int, string> rgnsSeln = new Dictionary<int, string>();  // seln# with rgn name
        

        public void ReadPortsFile(string fileName)
        {
            //string fileName;
            // Write to console
            Console.WriteLine("ReadPorts: Using Filename: {0}", fileName);
            StringBuilder sb = new StringBuilder();
            string s = String.Empty;
            int items = 0;
            using (StreamReader sr = File.OpenText(fileName))
            {
                try
                {
                    string[] rgn_ary = new string[4];
                    while ((s = sr.ReadLine()) != null)
                    {
                        string[] s_ary = s.Split(',');
                        if (s_ary.Length > 1)
                        {
                            items++;
//                            this.port_records_list.Add(s);         		  // add entire port record	
                            Console.WriteLine("{0}", s);
                            this.rgns.Add(s_ary[0]);		  // rgn name
//                            this.rgnsItem.Add(items, s_ary[0]);     // dict item# with rgn name
//                            this.rgnsAdr.Add(s_ary[0], s_ary[1]);   // dict rgn name with IPAdr
//                            this.rgnsSock.Add(s_ary[0], s_ary[2]);  // dict rgn name with Sock	
                            sb.Clear();
                            sb.Append(s_ary[0]).Append("\t").Append(s_ary[1]).Append("\t").Append(s_ary[2]);
                            this.rgns_displist.Add(sb.ToString());  // hold form selecton list 0 - n regions
                            rgn_ary[0] = s_ary[1].ToString();   //rgnnm
                            rgn_ary[1] = s_ary[2].ToString();   // ipaddr
                            rgn_ary[2] = s_ary[3].ToString();   // socket
                            bool B = s_ary[0].EndsWith("SSL");
                            if (B)
                            {
                                rgn_ary[3] = 'Y'.ToString();
                            } else
                            {
                                rgn_ary[3] = 'N'.ToString();
                            }
                           
                            string[] t_ary = new string[4] { rgn_ary[0], rgn_ary[1], rgn_ary[2], rgn_ary[3] };
                            this.port_records_list.Add(s_ary[0],t_ary);         		  // add entire port record	
                        }
                    }
                }
                catch (FileNotFoundException ex)
                {
                    Console.WriteLine("File:{0} Not Found.\n{1}.", fileName, ex.ToString());
                }
                catch (DirectoryNotFoundException ex)
                {
                    Console.WriteLine("File Directory:{0} Not Found.\n{1}.", fileName, ex.ToString());
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Exception:{0}\n{1}.", fileName, ex.ToString());
                }
                finally
                {
                    sr.Close();
                    sr.Dispose();
                }
            }  // end of using Streamreader
            return;
         }

    }
}
?<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6EE37424-F0F0-458B-BA15-05CC70A82159}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>RunCTG_ECI</RootNamespace>
    <AssemblyName>RunCTG_ECI</AssemblyName>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <PublishUrl>Z:\CTG\Run_Ctg\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Unc</InstallFrom>
    <UpdateEnabled>true</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>true</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <InstallUrl>\\wdcnap515\TRANPROC\CTG\Run_CTG\</InstallUrl>
    <MinimumRequiredVersion>1.0.0.18</MinimumRequiredVersion>
    <CreateWebPageOnPublish>true</CreateWebPageOnPublish>
    <WebPage>publish.htm</WebPage>
    <ApplicationRevision>18</ApplicationRevision>
    <ApplicationVersion>1.0.0.18</ApplicationVersion>
    <UseApplicationTrust>false</UseApplicationTrust>
    <CreateDesktopShortcut>true</CreateDesktopShortcut>
    <PublishWizardCompleted>true</PublishWizardCompleted>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>3</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <PropertyGroup>
    <ManifestCertificateThumbprint>83AAC0C0A33953C5CCF015A1BC1056F499A4620D</ManifestCertificateThumbprint>
  </PropertyGroup>
  <PropertyGroup>
    <ManifestKeyFile>
    </ManifestKeyFile>
  </PropertyGroup>
  <PropertyGroup>
    <GenerateManifests>true</GenerateManifests>
  </PropertyGroup>
  <PropertyGroup>
    <SignManifests>false</SignManifests>
  </PropertyGroup>
  <PropertyGroup />
  <PropertyGroup>
    <TargetZone>LocalIntranet</TargetZone>
  </PropertyGroup>
  <PropertyGroup />
  <PropertyGroup>
    <ApplicationManifest>Properties\app.manifest</ApplicationManifest>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="IBM.CTG.Client, Version=9.1.0.0, Culture=neutral, PublicKeyToken=4f7d883847d47abe, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\..\..\MyDoc\CTG\CTG9\deployable9_2\cicstgsdk\api\dotnet\runtime\IBM.CTG.Client.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="cvt_x_A_E.cs" />
    <Compile Include="DisplayResults.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="DisplayResults.Designer.cs">
      <DependentUpon>DisplayResults.cs</DependentUpon>
    </Compile>
    <Compile Include="ExecECI.cs" />
    <Compile Include="Form1.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Form1.Designer.cs">
      <DependentUpon>Form1.cs</DependentUpon>
    </Compile>
    <Compile Include="GetCTGRegions.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="GetCTGRegions.Designer.cs">
      <DependentUpon>GetCTGRegions.cs</DependentUpon>
    </Compile>
    <Compile Include="getUIDnPW.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="getUIDnPW.Designer.cs">
      <DependentUpon>getUIDnPW.cs</DependentUpon>
    </Compile>
    <Compile Include="get_CA.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="get_CA.Designer.cs">
      <DependentUpon>get_CA.cs</DependentUpon>
    </Compile>
    <Compile Include="get_CnC.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="get_CnC.Designer.cs">
      <DependentUpon>get_CnC.cs</DependentUpon>
    </Compile>
    <Compile Include="get_disp_ca_entry.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="get_disp_ca_entry.Designer.cs">
      <DependentUpon>get_disp_ca_entry.cs</DependentUpon>
    </Compile>
    <Compile Include="gtwyServer.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="gtwyServer.Designer.cs">
      <DependentUpon>gtwyServer.cs</DependentUpon>
    </Compile>
    <Compile Include="IterateSeltRgns.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="IterateSeltRgns.Designer.cs">
      <DependentUpon>IterateSeltRgns.cs</DependentUpon>
    </Compile>
    <Compile Include="Msg_Digest.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Msg_Digest.Designer.cs">
      <DependentUpon>Msg_Digest.cs</DependentUpon>
    </Compile>
    <Compile Include="pg_data.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="ReadPorts.cs" />
    <Compile Include="RunECI_utils.cs" />
    <Compile Include="seltd_item.cs" />
    <Compile Include="src_data.cs" />
    <Compile Include="src_hdr.cs" />
    <EmbeddedResource Include="DisplayResults.resx">
      <DependentUpon>DisplayResults.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Form1.resx">
      <DependentUpon>Form1.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="GetCTGRegions.resx">
      <DependentUpon>GetCTGRegions.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="getUIDnPW.resx">
      <DependentUpon>getUIDnPW.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="get_CA.resx">
      <DependentUpon>get_CA.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="get_CnC.resx">
      <DependentUpon>get_CnC.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="get_disp_ca_entry.resx">
      <DependentUpon>get_disp_ca_entry.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="gtwyServer.resx">
      <DependentUpon>gtwyServer.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="IterateSeltRgns.resx">
      <DependentUpon>IterateSeltRgns.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Msg_Digest.resx">
      <DependentUpon>Msg_Digest.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\app.manifest" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <None Include="RunECI_Csharp_1_TemporaryKey.pfx" />
    <None Include="RunECI_Csharp_TemporaryKey.pfx" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include=".NETFramework,Version=v4.5">
      <Visible>False</Visible>
      <ProductName>Microsoft .NET Framework 4.5 %28x86 and x64%29</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>?<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PublishUrlHistory>Z:\CTG\Run_Ctg\|file:\\\\wdcnap515\\CTG\Run_Ctg\|\\wdcnap515\\CTG\Run_Ctg\|Z:\CTG\Run_Ctg\C#_RunCtg\|C:\RunCtg\c#Version\</PublishUrlHistory>
    <InstallUrlHistory>\\wdcnap515\TRANPROC\CTG\Run_CTG\|\\wdcnap515\CTG\Run_CTG\|file://wdcnap515/CTG/Run_CTG/|http://wdcnap515/CTG/Run_CTG/|\\wdcnap515\CTG\Run_Ctg\</InstallUrlHistory>
    <SupportUrlHistory />
    <UpdateUrlHistory>file://wdcnap515/CTG/Run_CTG/</UpdateUrlHistory>
    <BootstrapperUrlHistory />
    <ErrorReportUrlHistory />
    <FallbackCulture>en-US</FallbackCulture>
    <VerifyUploadedFiles>false</VerifyUploadedFiles>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|AnyCPU'">
    <StartArguments>one  two  three, four=five</StartArguments>
  </PropertyGroup>
  <PropertyGroup>
    <ReferencePath>C:\RunCtg\ctgZ920_classes\runtime\;C:\RunCtg\ctgZ920_classes\runtime\policy\</ReferencePath>
  </PropertyGroup>
</Project>0??0?D	*?H??
??5?10?-0??	*?H??
?????0??0??*?H??

???0??0
*?H??
0[=??{?????+]?Z??/?r0L??,EZ????x?W?????????$?D?,?A?Z?5;y?f??(?Y?2??*]???4???G"3????Q3?1E-?L?x?f<?????YC;?]+<?AZ?K??	?U??Y?b?????w??????/??sB\?????,?<% ???5??_,?sO?????M?r?.?????l??"??~d?@;"???y=6	1.?i?[r?/V__?/f??7??w?i?????d0??0?D	*?H??
??5?10?-0??	*?H??
?????0??0??*?H??

???0??0
*?H??
0?????0??0?D	*?H??
??5?10?-0??	*?H??
?????0??0??*?H??

???0??0
*?H??
0?using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace RunCTG_ECI
{
    public static class RunECI_utils
    {

        public static int cvt_x2A_E(this cvt_x_A_E cvt_msg)
        {

            Encoding ascii = Encoding.ASCII;
            Encoding unicode = Encoding.Unicode;
            Encoding ibm037 = Encoding.GetEncoding(037);
            if ((cvt_msg.X_str.Length % 2) != 0) return (int)-1;
            byte[] bvalue = new byte[cvt_msg.X_str.Length / 2];
            bvalue = StringToByteArray(cvt_msg.X_str);

            string s_utf8 = Encoding.ASCII.GetString(bvalue);
            //            byte[] unicodeBytes = unicode.GetBytes(s_utf8);
            //            byte[] asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);
            byte[] ibm037Bytes = Encoding.Convert(ascii, ibm037, bvalue);
            //            cvt_msg.A_str = BitConverter.ToString(asciiBytes).Replace("-", string.Empty);
            //            cvt_msg.E_str = BitConverter.ToString(ibm037Bytes).Replace("-", string.Empty);
            cvt_msg.A_str = Encoding.ASCII.GetString(bvalue);
//            cvt_msg.E_str = Encoding.GetEncoding(037).GetString(ibm037Bytes);
            cvt_msg.E_str = RunECI_utils.ToHexStr(ibm037Bytes);
            return (int)0;
        }

        public static  byte[] StringToByteArray(this string hex)
        {
            // take a displayable hex string and colaspse two chars into a single byte
            // textbox 32 --> x'33' x'32' --> x'32' --> decimile'50' --> 2
            return Enumerable.Range(0, hex.Length)
                             .Where(x => x % 2 == 0)
                             .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                             .ToArray();
        }

        public static string ToHexStr(this byte[] the_bytes)
        {
            return BitConverter.ToString(the_bytes, 0).Replace("-", string.Empty);
        }
        //  
        // Convert a string containing 2-digit hexadecimal
        // values into a byte array.
        public static byte[] ToBytes(this string the_string)
        {
            int b_ct = the_string.Length;
            byte[] bytes = new byte[b_ct / 2];
            int j = 0;
            for (int i = 0; i < b_ct; i += 2)
            {
                bytes[j] = Convert.ToByte(the_string.Substring(i, 2), 16);
                j++;
            }
            return bytes;
        }
    }
}
?
namespace RunCTG_ECI
{
    public class seltd_item
    {
        public string req_resp  { get; set; }
        public int item_num  { get; set; }
    }
}
?namespace RunCTG_ECI.Properties {
    
    
    // This class allows you to handle specific events on the settings class:
    //  The SettingChanging event is raised before a setting's value is changed.
    //  The PropertyChanged event is raised after a setting's value is changed.
    //  The SettingsLoaded event is raised after the setting values are loaded.
    //  The SettingsSaving event is raised before the setting values are saved.
    internal sealed partial class Settings {
        
        public Settings() {
            // // To add event handlers for saving and changing settings, uncomment the lines below:
            //
            // this.SettingChanging += this.SettingChangingEventHandler;
            //
            // this.SettingsSaving += this.SettingsSavingEventHandler;
            //
        }
        
        private void SettingChangingEventHandler(object sender, System.Configuration.SettingChangingEventArgs e) {
            // Add code to handle the SettingChangingEvent event here.
        }
        
        private void SettingsSavingEventHandler(object sender, System.ComponentModel.CancelEventArgs e) {
            // Add code to handle the SettingsSaving event here.
        }
    }
}
?using System;

namespace RunCTG_ECI
{
 [Serializable()]

    public class src_data
    {
        public char src_type;   //'c' for CA and 'n' for bit container:'N' for char container
        public char src_fmt_data_encode;   //'a' ascii data request 'e' ebcdic data request
                                            // 'x' hex data request (no CP conv)
                                            // 'A' ascii data response 'E' ebcdic data response
                                            // 'X' hex data response (no CP conv)
        public string src_startTM;  // DataTime start.ToString("yyyy-MM-dd HH:mm:ss.fff");
        public string src_endTM;    // DataTime start.ToString("yyyy-MM-dd HH:mm:ss.fff");
        public string src_name = null;   // "DFHCOMMAREA" or container name
        public string src_repeat_ct; // uses repeat to make each iteration unique
        public int src_l = 0;         // ca length; or actual data lng of container
        public string src_eci_retcd;         // eci request RESP1  
        public byte[] b_src_ary;   // byte array for request
    }
}
?using System;

namespace RunCTG_ECI

{
    [Serializable()]
    public class src_hdr
    {
        public string src_hdr_rgn = "";
        public string src_hdr_dest_SSL = "";
        public string src_hdr_dest_ip = "";
        public string src_hdr_dest_port = "";
        public string src_hdr_uid = "";
        public string src_hdr_pw = "";
        public int src_hdr_repeat = 0;
        public int src_hdr_wait = 0;
        public int src_hdr_eci_flow = 0;
        public int src_hdr_eci_to = 0;
        public char src_hdr_eci_X_tran = 'N';
        public string src_hdr_pgm_nm = "";
        public string src_hdr_tranid = "";
        public string src_hdr_ch_nm = "";

 //           public src_hdr()
 //           {
 //       }
    }
}

